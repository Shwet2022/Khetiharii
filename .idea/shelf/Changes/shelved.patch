Index: lib/flutter_flow/flutter_flow_model.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/flutter_flow/flutter_flow_model.dart b/lib/flutter_flow/flutter_flow_model.dart
new file mode 100644
--- /dev/null	(date 1708365758957)
+++ b/lib/flutter_flow/flutter_flow_model.dart	(date 1708365758957)
@@ -0,0 +1,169 @@
+import 'package:collection/collection.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter/scheduler.dart';
+import 'package:provider/provider.dart';
+
+Widget wrapWithModel<T extends FlutterFlowModel>({
+  required T model,
+  required Widget child,
+  required VoidCallback updateCallback,
+  bool updateOnChange = false,
+}) {
+  // Set the component to optionally update the page on updates.
+  model.setOnUpdate(
+    onUpdate: updateCallback,
+    updateOnChange: updateOnChange,
+  );
+  // Models for components within a page will be disposed by the page's model,
+  // so we don't want the component widget to dispose them until the page is
+  // itself disposed.
+  model.disposeOnWidgetDisposal = false;
+  // Wrap in a Provider so that the model can be accessed by the component.
+  return Provider<T>.value(
+    value: model,
+    child: child,
+  );
+}
+
+T createModel<T extends FlutterFlowModel>(
+  BuildContext context,
+  T Function() defaultBuilder,
+) {
+  final model = context.read<T?>() ?? defaultBuilder();
+  model._init(context);
+  return model;
+}
+
+abstract class FlutterFlowModel<W extends Widget> {
+  // Initialization methods
+  bool _isInitialized = false;
+  void initState(BuildContext context);
+  void _init(BuildContext context) {
+    if (!_isInitialized) {
+      initState(context);
+      _isInitialized = true;
+    }
+    if (context.widget is W) _widget = context.widget as W;
+  }
+
+  // The widget associated with this model. This is useful for accessing the
+  // parameters of the widget, for example.
+  W? _widget;
+  // This will always be non-null when used, but is nullable to allow us to
+  // dispose of the widget in the [dispose] method (for garbage collection).
+  W get widget => _widget!;
+
+  // Dispose methods
+  // Whether to dispose this model when the corresponding widget is
+  // disposed. By default this is true for pages and false for components,
+  // as page/component models handle the disposal of their children.
+  bool disposeOnWidgetDisposal = true;
+  void dispose();
+  void maybeDispose() {
+    if (disposeOnWidgetDisposal) {
+      dispose();
+    }
+    // Remove reference to widget for garbage collection purposes.
+    _widget = null;
+  }
+
+  // Whether to update the containing page / component on updates.
+  bool updateOnChange = false;
+  // Function to call when the model receives an update.
+  VoidCallback _updateCallback = () {};
+  void onUpdate() => updateOnChange ? _updateCallback() : () {};
+  FlutterFlowModel setOnUpdate({
+    bool updateOnChange = false,
+    required VoidCallback onUpdate,
+  }) =>
+      this
+        .._updateCallback = onUpdate
+        ..updateOnChange = updateOnChange;
+  // Update the containing page when this model received an update.
+  void updatePage(VoidCallback callback) {
+    callback();
+    _updateCallback();
+  }
+}
+
+class FlutterFlowDynamicModels<T extends FlutterFlowModel> {
+  FlutterFlowDynamicModels(this.defaultBuilder);
+
+  final T Function() defaultBuilder;
+  final Map<String, T> _childrenModels = {};
+  final Map<String, int> _childrenIndexes = {};
+  Set<String>? _activeKeys;
+
+  T getModel(String uniqueKey, int index) {
+    _updateActiveKeys(uniqueKey);
+    _childrenIndexes[uniqueKey] = index;
+    return _childrenModels[uniqueKey] ??= defaultBuilder();
+  }
+
+  List<S> getValues<S>(S? Function(T) getValue) {
+    return _childrenIndexes.entries
+        // Sort keys by index.
+        .sorted((a, b) => a.value.compareTo(b.value))
+        .where((e) => _childrenModels[e.key] != null)
+        // Map each model to the desired value and return as list. In order
+        // to preserve index order, rather than removing null values we provide
+        // default values (for types with reasonable defaults).
+        .map((e) => getValue(_childrenModels[e.key]!) ?? _getDefaultValue<S>()!)
+        .toList();
+  }
+
+  S? getValueAtIndex<S>(int index, S? Function(T) getValue) {
+    final uniqueKey =
+        _childrenIndexes.entries.firstWhereOrNull((e) => e.value == index)?.key;
+    return getValueForKey(uniqueKey, getValue);
+  }
+
+  S? getValueForKey<S>(String? uniqueKey, S? Function(T) getValue) {
+    final model = _childrenModels[uniqueKey];
+    return model != null ? getValue(model) : null;
+  }
+
+  void dispose() => _childrenModels.values.forEach((model) => model.dispose());
+
+  void _updateActiveKeys(String uniqueKey) {
+    final shouldResetActiveKeys = _activeKeys == null;
+    _activeKeys ??= {};
+    _activeKeys!.add(uniqueKey);
+
+    if (shouldResetActiveKeys) {
+      // Add a post-frame callback to remove and dispose of unused models after
+      // we're done building, then reset `_activeKeys` to null so we know to do
+      // this again next build.
+      SchedulerBinding.instance.addPostFrameCallback((_) {
+        _childrenIndexes.removeWhere((k, _) => !_activeKeys!.contains(k));
+        _childrenModels.keys
+            .toSet()
+            .difference(_activeKeys!)
+            // Remove and dispose of unused models since they are  not being used
+            // elsewhere and would not otherwise be disposed.
+            .forEach((k) => _childrenModels.remove(k)?.dispose());
+        _activeKeys = null;
+      });
+    }
+  }
+}
+
+T? _getDefaultValue<T>() {
+  switch (T) {
+    case int:
+      return 0 as T;
+    case double:
+      return 0.0 as T;
+    case String:
+      return '' as T;
+    case bool:
+      return false as T;
+    default:
+      return null as T;
+  }
+}
+
+extension TextValidationExtensions on String? Function(BuildContext, String?)? {
+  String? Function(String?)? asValidator(BuildContext context) =>
+      this != null ? (val) => this!(context, val) : null;
+}
Index: lib/flutter_flow/flutter_flow_animations.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/flutter_flow/flutter_flow_animations.dart b/lib/flutter_flow/flutter_flow_animations.dart
new file mode 100644
--- /dev/null	(date 1708365759052)
+++ b/lib/flutter_flow/flutter_flow_animations.dart	(date 1708365759052)
@@ -0,0 +1,93 @@
+import 'package:flutter/material.dart';
+import 'package:flutter_animate/flutter_animate.dart';
+
+enum AnimationTrigger {
+  onPageLoad,
+  onActionTrigger,
+}
+
+class AnimationInfo {
+  AnimationInfo({
+    required this.trigger,
+    required this.effects,
+    this.loop = false,
+    this.reverse = false,
+    this.applyInitialState = true,
+  });
+  final AnimationTrigger trigger;
+  final List<Effect<dynamic>> effects;
+  final bool applyInitialState;
+  final bool loop;
+  final bool reverse;
+  late AnimationController controller;
+}
+
+void createAnimation(AnimationInfo animation, TickerProvider vsync) {
+  final newController = AnimationController(vsync: vsync);
+  animation.controller = newController;
+}
+
+void setupAnimations(Iterable<AnimationInfo> animations, TickerProvider vsync) {
+  animations.forEach((animation) => createAnimation(animation, vsync));
+}
+
+extension AnimatedWidgetExtension on Widget {
+  Widget animateOnPageLoad(AnimationInfo animationInfo) => Animate(
+      effects: animationInfo.effects,
+      child: this,
+      onPlay: (controller) => animationInfo.loop
+          ? controller.repeat(reverse: animationInfo.reverse)
+          : null,
+      onComplete: (controller) => !animationInfo.loop && animationInfo.reverse
+          ? controller.reverse()
+          : null);
+
+  Widget animateOnActionTrigger(
+    AnimationInfo animationInfo, {
+    bool hasBeenTriggered = false,
+  }) =>
+      hasBeenTriggered || animationInfo.applyInitialState
+          ? Animate(
+              controller: animationInfo.controller,
+              autoPlay: false,
+              effects: animationInfo.effects,
+              child: this)
+          : this;
+}
+
+class TiltEffect extends Effect<Offset> {
+  const TiltEffect({
+    Duration? delay,
+    Duration? duration,
+    Curve? curve,
+    Offset? begin,
+    Offset? end,
+  }) : super(
+          delay: delay,
+          duration: duration,
+          curve: curve,
+          begin: begin ?? const Offset(0.0, 0.0),
+          end: end ?? const Offset(0.0, 0.0),
+        );
+
+  @override
+  Widget build(
+    BuildContext context,
+    Widget child,
+    AnimationController controller,
+    EffectEntry entry,
+  ) {
+    Animation<Offset> animation = buildAnimation(controller, entry);
+    return getOptimizedBuilder<Offset>(
+      animation: animation,
+      builder: (_, __) => Transform(
+        transform: Matrix4.identity()
+          ..setEntry(3, 2, 0.001)
+          ..rotateX(animation.value.dx)
+          ..rotateY(animation.value.dy),
+        alignment: Alignment.center,
+        child: child,
+      ),
+    );
+  }
+}
Index: lib/flutter_flow/internationalization.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/flutter_flow/internationalization.dart b/lib/flutter_flow/internationalization.dart
new file mode 100644
--- /dev/null	(date 1708365759008)
+++ b/lib/flutter_flow/internationalization.dart	(date 1708365759008)
@@ -0,0 +1,107 @@
+import 'package:flutter/material.dart';
+import 'package:flutter/foundation.dart';
+import 'package:shared_preferences/shared_preferences.dart';
+
+const _kLocaleStorageKey = '__locale_key__';
+
+class FFLocalizations {
+  FFLocalizations(this.locale);
+
+  final Locale locale;
+
+  static FFLocalizations of(BuildContext context) =>
+      Localizations.of<FFLocalizations>(context, FFLocalizations)!;
+
+  static List<String> languages() => ['en'];
+
+  static late SharedPreferences _prefs;
+  static Future initialize() async =>
+      _prefs = await SharedPreferences.getInstance();
+  static Future storeLocale(String locale) =>
+      _prefs.setString(_kLocaleStorageKey, locale);
+  static Locale? getStoredLocale() {
+    final locale = _prefs.getString(_kLocaleStorageKey);
+    return locale != null && locale.isNotEmpty ? createLocale(locale) : null;
+  }
+
+  String get languageCode => locale.toString();
+  String? get languageShortCode =>
+      _languagesWithShortCode.contains(locale.toString())
+          ? '${locale.toString()}_short'
+          : null;
+  int get languageIndex => languages().contains(languageCode)
+      ? languages().indexOf(languageCode)
+      : 0;
+
+  String getText(String key) =>
+      (kTranslationsMap[key] ?? {})[locale.toString()] ?? '';
+
+  String getVariableText({
+    String? enText = '',
+  }) =>
+      [enText][languageIndex] ?? '';
+
+  static const Set<String> _languagesWithShortCode = {
+    'ar',
+    'az',
+    'ca',
+    'cs',
+    'da',
+    'de',
+    'dv',
+    'en',
+    'es',
+    'et',
+    'fi',
+    'fr',
+    'gr',
+    'he',
+    'hi',
+    'hu',
+    'it',
+    'km',
+    'ku',
+    'mn',
+    'ms',
+    'no',
+    'pt',
+    'ro',
+    'ru',
+    'rw',
+    'sv',
+    'th',
+    'uk',
+    'vi',
+  };
+}
+
+class FFLocalizationsDelegate extends LocalizationsDelegate<FFLocalizations> {
+  const FFLocalizationsDelegate();
+
+  @override
+  bool isSupported(Locale locale) {
+    final language = locale.toString();
+    return FFLocalizations.languages().contains(
+      language.endsWith('_')
+          ? language.substring(0, language.length - 1)
+          : language,
+    );
+  }
+
+  @override
+  Future<FFLocalizations> load(Locale locale) =>
+      SynchronousFuture<FFLocalizations>(FFLocalizations(locale));
+
+  @override
+  bool shouldReload(FFLocalizationsDelegate old) => false;
+}
+
+Locale createLocale(String language) => language.contains('_')
+    ? Locale.fromSubtags(
+        languageCode: language.split('_').first,
+        scriptCode: language.split('_').last,
+      )
+    : Locale(language);
+
+final kTranslationsMap =
+    <Map<String, Map<String, String>>>[].reduce((a, b) => a..addAll(b));
Index: lib/flutter_flow/flutter_flow_widgets.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/flutter_flow/flutter_flow_widgets.dart b/lib/flutter_flow/flutter_flow_widgets.dart
new file mode 100644
--- /dev/null	(date 1708365759255)
+++ b/lib/flutter_flow/flutter_flow_widgets.dart	(date 1708365759255)
@@ -0,0 +1,257 @@
+import 'package:font_awesome_flutter/font_awesome_flutter.dart';
+import 'package:flutter/material.dart';
+import 'package:auto_size_text/auto_size_text.dart';
+
+class FFButtonOptions {
+  const FFButtonOptions({
+    this.textStyle,
+    this.elevation,
+    this.height,
+    this.width,
+    this.padding,
+    this.color,
+    this.disabledColor,
+    this.disabledTextColor,
+    this.splashColor,
+    this.iconSize,
+    this.iconColor,
+    this.iconPadding,
+    this.borderRadius,
+    this.borderSide,
+    this.hoverColor,
+    this.hoverBorderSide,
+    this.hoverTextColor,
+    this.hoverElevation,
+    this.maxLines,
+  });
+
+  final TextStyle? textStyle;
+  final double? elevation;
+  final double? height;
+  final double? width;
+  final EdgeInsetsGeometry? padding;
+  final Color? color;
+  final Color? disabledColor;
+  final Color? disabledTextColor;
+  final int? maxLines;
+  final Color? splashColor;
+  final double? iconSize;
+  final Color? iconColor;
+  final EdgeInsetsGeometry? iconPadding;
+  final BorderRadius? borderRadius;
+  final BorderSide? borderSide;
+  final Color? hoverColor;
+  final BorderSide? hoverBorderSide;
+  final Color? hoverTextColor;
+  final double? hoverElevation;
+}
+
+class FFButtonWidget extends StatefulWidget {
+  const FFButtonWidget({
+    super.key,
+    required this.text,
+    required this.onPressed,
+    this.icon,
+    this.iconData,
+    required this.options,
+    this.showLoadingIndicator = true,
+  });
+
+  final String text;
+  final Widget? icon;
+  final IconData? iconData;
+  final Function()? onPressed;
+  final FFButtonOptions options;
+  final bool showLoadingIndicator;
+
+  @override
+  State<FFButtonWidget> createState() => _FFButtonWidgetState();
+}
+
+class _FFButtonWidgetState extends State<FFButtonWidget> {
+  bool loading = false;
+
+  int get maxLines => widget.options.maxLines ?? 1;
+
+  @override
+  Widget build(BuildContext context) {
+    Widget textWidget = loading
+        ? SizedBox(
+            width: widget.options.width == null
+                ? _getTextWidth(widget.text, widget.options.textStyle, maxLines)
+                : null,
+            child: Center(
+              child: SizedBox(
+                width: 23,
+                height: 23,
+                child: CircularProgressIndicator(
+                  valueColor: AlwaysStoppedAnimation<Color>(
+                    widget.options.textStyle!.color ?? Colors.white,
+                  ),
+                ),
+              ),
+            ),
+          )
+        : AutoSizeText(
+            widget.text,
+            style: widget.options.textStyle?.withoutColor(),
+            maxLines: maxLines,
+            overflow: TextOverflow.ellipsis,
+          );
+
+    final onPressed = widget.onPressed != null
+        ? (widget.showLoadingIndicator
+            ? () async {
+                if (loading) {
+                  return;
+                }
+                setState(() => loading = true);
+                try {
+                  await widget.onPressed!();
+                } finally {
+                  if (mounted) {
+                    setState(() => loading = false);
+                  }
+                }
+              }
+            : () => widget.onPressed!())
+        : null;
+
+    ButtonStyle style = ButtonStyle(
+      shape: MaterialStateProperty.resolveWith<OutlinedBorder>(
+        (states) {
+          if (states.contains(MaterialState.hovered) &&
+              widget.options.hoverBorderSide != null) {
+            return RoundedRectangleBorder(
+              borderRadius:
+                  widget.options.borderRadius ?? BorderRadius.circular(8),
+              side: widget.options.hoverBorderSide!,
+            );
+          }
+          return RoundedRectangleBorder(
+            borderRadius:
+                widget.options.borderRadius ?? BorderRadius.circular(8),
+            side: widget.options.borderSide ?? BorderSide.none,
+          );
+        },
+      ),
+      foregroundColor: MaterialStateProperty.resolveWith<Color?>(
+        (states) {
+          if (states.contains(MaterialState.disabled) &&
+              widget.options.disabledTextColor != null) {
+            return widget.options.disabledTextColor;
+          }
+          if (states.contains(MaterialState.hovered) &&
+              widget.options.hoverTextColor != null) {
+            return widget.options.hoverTextColor;
+          }
+          return widget.options.textStyle?.color;
+        },
+      ),
+      backgroundColor: MaterialStateProperty.resolveWith<Color?>(
+        (states) {
+          if (states.contains(MaterialState.disabled) &&
+              widget.options.disabledColor != null) {
+            return widget.options.disabledColor;
+          }
+          if (states.contains(MaterialState.hovered) &&
+              widget.options.hoverColor != null) {
+            return widget.options.hoverColor;
+          }
+          return widget.options.color;
+        },
+      ),
+      overlayColor: MaterialStateProperty.resolveWith<Color?>((states) {
+        if (states.contains(MaterialState.pressed)) {
+          return widget.options.splashColor;
+        }
+        return widget.options.hoverColor == null ? null : Colors.transparent;
+      }),
+      padding: MaterialStateProperty.all(widget.options.padding ??
+          const EdgeInsets.symmetric(horizontal: 12.0, vertical: 4.0)),
+      elevation: MaterialStateProperty.resolveWith<double?>(
+        (states) {
+          if (states.contains(MaterialState.hovered) &&
+              widget.options.hoverElevation != null) {
+            return widget.options.hoverElevation!;
+          }
+          return widget.options.elevation;
+        },
+      ),
+    );
+
+    if ((widget.icon != null || widget.iconData != null) && !loading) {
+      return SizedBox(
+        height: widget.options.height,
+        width: widget.options.width,
+        child: ElevatedButton.icon(
+          icon: Padding(
+            padding: widget.options.iconPadding ?? EdgeInsets.zero,
+            child: widget.icon ??
+                FaIcon(
+                  widget.iconData,
+                  size: widget.options.iconSize,
+                  color: widget.options.iconColor ??
+                      widget.options.textStyle!.color,
+                ),
+          ),
+          label: textWidget,
+          onPressed: onPressed,
+          style: style,
+        ),
+      );
+    }
+
+    return Container(
+      height: widget.options.height,
+      width: widget.options.width,
+      child: ElevatedButton(
+        onPressed: onPressed,
+        style: style,
+        child: textWidget,
+      ),
+    );
+  }
+}
+
+extension _WithoutColorExtension on TextStyle {
+  TextStyle withoutColor() => TextStyle(
+        inherit: inherit,
+        color: null,
+        backgroundColor: backgroundColor,
+        fontSize: fontSize,
+        fontWeight: fontWeight,
+        fontStyle: fontStyle,
+        letterSpacing: letterSpacing,
+        wordSpacing: wordSpacing,
+        textBaseline: textBaseline,
+        height: height,
+        leadingDistribution: leadingDistribution,
+        locale: locale,
+        foreground: foreground,
+        background: background,
+        shadows: shadows,
+        fontFeatures: fontFeatures,
+        decoration: decoration,
+        decorationColor: decorationColor,
+        decorationStyle: decorationStyle,
+        decorationThickness: decorationThickness,
+        debugLabel: debugLabel,
+        fontFamily: fontFamily,
+        fontFamilyFallback: fontFamilyFallback,
+        // The _package field is private so unfortunately we can't set it here,
+        // but it's almost always unset anyway.
+        // package: _package,
+        overflow: overflow,
+      );
+}
+
+// Slightly hacky method of getting the layout width of the provided text.
+double _getTextWidth(String text, TextStyle? style, int maxLines) =>
+    (TextPainter(
+      text: TextSpan(text: text, style: style),
+      textDirection: TextDirection.ltr,
+      maxLines: maxLines,
+    )..layout())
+        .size
+        .width;
Index: lib/flutter_flow/place.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/flutter_flow/place.dart b/lib/flutter_flow/place.dart
new file mode 100644
--- /dev/null	(date 1708365759224)
+++ b/lib/flutter_flow/place.dart	(date 1708365759224)
@@ -0,0 +1,46 @@
+import 'lat_lng.dart';
+
+class FFPlace {
+  const FFPlace({
+    this.latLng = const LatLng(0.0, 0.0),
+    this.name = '',
+    this.address = '',
+    this.city = '',
+    this.state = '',
+    this.country = '',
+    this.zipCode = '',
+  });
+
+  final LatLng latLng;
+  final String name;
+  final String address;
+  final String city;
+  final String state;
+  final String country;
+  final String zipCode;
+
+  @override
+  String toString() => '''FFPlace(
+        latLng: $latLng,
+        name: $name,
+        address: $address,
+        city: $city,
+        state: $state,
+        country: $country,
+        zipCode: $zipCode,
+      )''';
+
+  @override
+  int get hashCode => latLng.hashCode;
+
+  @override
+  bool operator ==(other) =>
+      other is FFPlace &&
+      latLng == other.latLng &&
+      name == other.name &&
+      address == other.address &&
+      city == other.city &&
+      state == other.state &&
+      country == other.country &&
+      zipCode == other.zipCode;
+}
Index: lib/flutter_flow/flutter_flow_google_map.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/flutter_flow/flutter_flow_google_map.dart b/lib/flutter_flow/flutter_flow_google_map.dart
new file mode 100644
--- /dev/null	(date 1708365759146)
+++ b/lib/flutter_flow/flutter_flow_google_map.dart	(date 1708365759146)
@@ -0,0 +1,178 @@
+import 'dart:async';
+import 'dart:math';
+import 'package:flutter/material.dart';
+import 'package:google_maps_flutter/google_maps_flutter.dart';
+import 'lat_lng.dart' as latlng;
+
+export 'dart:async' show Completer;
+export 'package:google_maps_flutter/google_maps_flutter.dart' hide LatLng;
+export 'lat_lng.dart' show LatLng;
+
+enum GoogleMapStyle {
+  standard,
+  silver,
+  retro,
+  dark,
+  night,
+  aubergine,
+}
+
+enum GoogleMarkerColor {
+  red,
+  orange,
+  yellow,
+  green,
+  cyan,
+  azure,
+  blue,
+  violet,
+  magenta,
+  rose,
+}
+
+class FlutterFlowMarker {
+  const FlutterFlowMarker(this.markerId, this.location, [this.onTap]);
+  final String markerId;
+  final latlng.LatLng location;
+  final Future Function()? onTap;
+}
+
+class FlutterFlowGoogleMap extends StatefulWidget {
+  const FlutterFlowGoogleMap({
+    required this.controller,
+    this.onCameraIdle,
+    this.initialLocation,
+    this.markers = const [],
+    this.markerColor = GoogleMarkerColor.red,
+    this.mapType = MapType.normal,
+    this.style = GoogleMapStyle.standard,
+    this.initialZoom = 12,
+    this.allowInteraction = true,
+    this.allowZoom = true,
+    this.showZoomControls = true,
+    this.showLocation = true,
+    this.showCompass = false,
+    this.showMapToolbar = false,
+    this.showTraffic = false,
+    this.centerMapOnMarkerTap = false,
+    Key? key,
+  }) : super(key: key);
+
+  final Completer<GoogleMapController> controller;
+  final Function(latlng.LatLng)? onCameraIdle;
+  final latlng.LatLng? initialLocation;
+  final Iterable<FlutterFlowMarker> markers;
+  final GoogleMarkerColor markerColor;
+  final MapType mapType;
+  final GoogleMapStyle style;
+  final double initialZoom;
+  final bool allowInteraction;
+  final bool allowZoom;
+  final bool showZoomControls;
+  final bool showLocation;
+  final bool showCompass;
+  final bool showMapToolbar;
+  final bool showTraffic;
+  final bool centerMapOnMarkerTap;
+
+  @override
+  State<StatefulWidget> createState() => _FlutterFlowGoogleMapState();
+}
+
+class _FlutterFlowGoogleMapState extends State<FlutterFlowGoogleMap> {
+  double get initialZoom => max(double.minPositive, widget.initialZoom);
+  LatLng get initialPosition =>
+      widget.initialLocation?.toGoogleMaps() ?? const LatLng(0.0, 0.0);
+
+  late Completer<GoogleMapController> _controller;
+  late LatLng currentMapCenter;
+
+  void onCameraIdle() => widget.onCameraIdle?.call(currentMapCenter.toLatLng());
+
+  @override
+  void initState() {
+    super.initState();
+    currentMapCenter = initialPosition;
+    _controller = widget.controller;
+  }
+
+  @override
+  Widget build(BuildContext context) => AbsorbPointer(
+        absorbing: !widget.allowInteraction,
+        child: GoogleMap(
+          onMapCreated: (controller) async {
+            _controller.complete(controller);
+            await controller.setMapStyle(googleMapStyleStrings[widget.style]);
+          },
+          onCameraIdle: onCameraIdle,
+          onCameraMove: (position) => currentMapCenter = position.target,
+          initialCameraPosition: CameraPosition(
+            target: initialPosition,
+            zoom: initialZoom,
+          ),
+          mapType: widget.mapType,
+          zoomGesturesEnabled: widget.allowZoom,
+          zoomControlsEnabled: widget.showZoomControls,
+          myLocationEnabled: widget.showLocation,
+          compassEnabled: widget.showCompass,
+          mapToolbarEnabled: widget.showMapToolbar,
+          trafficEnabled: widget.showTraffic,
+          markers: widget.markers
+              .map(
+                (m) => Marker(
+                  markerId: MarkerId(m.markerId),
+                  position: m.location.toGoogleMaps(),
+                  icon: BitmapDescriptor.defaultMarkerWithHue(
+                      googleMarkerColorMap[widget.markerColor]!),
+                  onTap: () async {
+                    if (widget.centerMapOnMarkerTap) {
+                      final controller = await _controller.future;
+                      await controller.animateCamera(
+                        CameraUpdate.newLatLng(m.location.toGoogleMaps()),
+                      );
+                      currentMapCenter = m.location.toGoogleMaps();
+                      onCameraIdle();
+                    }
+                    await m.onTap?.call();
+                  },
+                ),
+              )
+              .toSet(),
+        ),
+      );
+}
+
+extension ToGoogleMapsLatLng on latlng.LatLng {
+  LatLng toGoogleMaps() => LatLng(latitude, longitude);
+}
+
+extension GoogleMapsToLatLng on LatLng {
+  latlng.LatLng toLatLng() => latlng.LatLng(latitude, longitude);
+}
+
+Map<GoogleMapStyle, String> googleMapStyleStrings = {
+  GoogleMapStyle.standard: '[]',
+  GoogleMapStyle.silver:
+      r'[{"elementType":"geometry","stylers":[{"color":"#f5f5f5"}]},{"elementType":"labels.icon","stylers":[{"visibility":"off"}]},{"elementType":"labels.text.fill","stylers":[{"color":"#616161"}]},{"elementType":"labels.text.stroke","stylers":[{"color":"#f5f5f5"}]},{"featureType":"administrative.land_parcel","elementType":"labels.text.fill","stylers":[{"color":"#bdbdbd"}]},{"featureType":"poi","elementType":"geometry","stylers":[{"color":"#eeeeee"}]},{"featureType":"poi","elementType":"labels.text.fill","stylers":[{"color":"#757575"}]},{"featureType":"poi.park","elementType":"geometry","stylers":[{"color":"#e5e5e5"}]},{"featureType":"poi.park","elementType":"labels.text.fill","stylers":[{"color":"#9e9e9e"}]},{"featureType":"road","elementType":"geometry","stylers":[{"color":"#ffffff"}]},{"featureType":"road.arterial","elementType":"labels.text.fill","stylers":[{"color":"#757575"}]},{"featureType":"road.highway","elementType":"geometry","stylers":[{"color":"#dadada"}]},{"featureType":"road.highway","elementType":"labels.text.fill","stylers":[{"color":"#616161"}]},{"featureType":"road.local","elementType":"labels.text.fill","stylers":[{"color":"#9e9e9e"}]},{"featureType":"transit.line","elementType":"geometry","stylers":[{"color":"#e5e5e5"}]},{"featureType":"transit.station","elementType":"geometry","stylers":[{"color":"#eeeeee"}]},{"featureType":"water","elementType":"geometry","stylers":[{"color":"#c9c9c9"}]},{"featureType":"water","elementType":"labels.text.fill","stylers":[{"color":"#9e9e9e"}]}]',
+  GoogleMapStyle.retro:
+      r'[{"elementType":"geometry","stylers":[{"color":"#ebe3cd"}]},{"elementType":"labels.text.fill","stylers":[{"color":"#523735"}]},{"elementType":"labels.text.stroke","stylers":[{"color":"#f5f1e6"}]},{"featureType":"administrative","elementType":"geometry.stroke","stylers":[{"color":"#c9b2a6"}]},{"featureType":"administrative.land_parcel","elementType":"geometry.stroke","stylers":[{"color":"#dcd2be"}]},{"featureType":"administrative.land_parcel","elementType":"labels.text.fill","stylers":[{"color":"#ae9e90"}]},{"featureType":"landscape.natural","elementType":"geometry","stylers":[{"color":"#dfd2ae"}]},{"featureType":"poi","elementType":"geometry","stylers":[{"color":"#dfd2ae"}]},{"featureType":"poi","elementType":"labels.text.fill","stylers":[{"color":"#93817c"}]},{"featureType":"poi.park","elementType":"geometry.fill","stylers":[{"color":"#a5b076"}]},{"featureType":"poi.park","elementType":"labels.text.fill","stylers":[{"color":"#447530"}]},{"featureType":"road","elementType":"geometry","stylers":[{"color":"#f5f1e6"}]},{"featureType":"road.arterial","elementType":"geometry","stylers":[{"color":"#fdfcf8"}]},{"featureType":"road.highway","elementType":"geometry","stylers":[{"color":"#f8c967"}]},{"featureType":"road.highway","elementType":"geometry.stroke","stylers":[{"color":"#e9bc62"}]},{"featureType":"road.highway.controlled_access","elementType":"geometry","stylers":[{"color":"#e98d58"}]},{"featureType":"road.highway.controlled_access","elementType":"geometry.stroke","stylers":[{"color":"#db8555"}]},{"featureType":"road.local","elementType":"labels.text.fill","stylers":[{"color":"#806b63"}]},{"featureType":"transit.line","elementType":"geometry","stylers":[{"color":"#dfd2ae"}]},{"featureType":"transit.line","elementType":"labels.text.fill","stylers":[{"color":"#8f7d77"}]},{"featureType":"transit.line","elementType":"labels.text.stroke","stylers":[{"color":"#ebe3cd"}]},{"featureType":"transit.station","elementType":"geometry","stylers":[{"color":"#dfd2ae"}]},{"featureType":"water","elementType":"geometry.fill","stylers":[{"color":"#b9d3c2"}]},{"featureType":"water","elementType":"labels.text.fill","stylers":[{"color":"#92998d"}]}]',
+  GoogleMapStyle.dark:
+      r'[{"elementType":"geometry","stylers":[{"color":"#212121"}]},{"elementType":"labels.icon","stylers":[{"visibility":"off"}]},{"elementType":"labels.text.fill","stylers":[{"color":"#757575"}]},{"elementType":"labels.text.stroke","stylers":[{"color":"#212121"}]},{"featureType":"administrative","elementType":"geometry","stylers":[{"color":"#757575"}]},{"featureType":"administrative.country","elementType":"labels.text.fill","stylers":[{"color":"#9e9e9e"}]},{"featureType":"administrative.land_parcel","stylers":[{"visibility":"off"}]},{"featureType":"administrative.locality","elementType":"labels.text.fill","stylers":[{"color":"#bdbdbd"}]},{"featureType":"poi","elementType":"labels.text.fill","stylers":[{"color":"#757575"}]},{"featureType":"poi.park","elementType":"geometry","stylers":[{"color":"#181818"}]},{"featureType":"poi.park","elementType":"labels.text.fill","stylers":[{"color":"#616161"}]},{"featureType":"poi.park","elementType":"labels.text.stroke","stylers":[{"color":"#1b1b1b"}]},{"featureType":"road","elementType":"geometry.fill","stylers":[{"color":"#2c2c2c"}]},{"featureType":"road","elementType":"labels.text.fill","stylers":[{"color":"#8a8a8a"}]},{"featureType":"road.arterial","elementType":"geometry","stylers":[{"color":"#373737"}]},{"featureType":"road.highway","elementType":"geometry","stylers":[{"color":"#3c3c3c"}]},{"featureType":"road.highway.controlled_access","elementType":"geometry","stylers":[{"color":"#4e4e4e"}]},{"featureType":"road.local","elementType":"labels.text.fill","stylers":[{"color":"#616161"}]},{"featureType":"transit","elementType":"labels.text.fill","stylers":[{"color":"#757575"}]},{"featureType":"water","elementType":"geometry","stylers":[{"color":"#000000"}]},{"featureType":"water","elementType":"labels.text.fill","stylers":[{"color":"#3d3d3d"}]}]',
+  GoogleMapStyle.night:
+      r'[{"elementType":"geometry","stylers":[{"color":"#242f3e"}]},{"elementType":"labels.text.fill","stylers":[{"color":"#746855"}]},{"elementType":"labels.text.stroke","stylers":[{"color":"#242f3e"}]},{"featureType":"administrative.locality","elementType":"labels.text.fill","stylers":[{"color":"#d59563"}]},{"featureType":"poi","elementType":"labels.text.fill","stylers":[{"color":"#d59563"}]},{"featureType":"poi.park","elementType":"geometry","stylers":[{"color":"#263c3f"}]},{"featureType":"poi.park","elementType":"labels.text.fill","stylers":[{"color":"#6b9a76"}]},{"featureType":"road","elementType":"geometry","stylers":[{"color":"#38414e"}]},{"featureType":"road","elementType":"geometry.stroke","stylers":[{"color":"#212a37"}]},{"featureType":"road","elementType":"labels.text.fill","stylers":[{"color":"#9ca5b3"}]},{"featureType":"road.highway","elementType":"geometry","stylers":[{"color":"#746855"}]},{"featureType":"road.highway","elementType":"geometry.stroke","stylers":[{"color":"#1f2835"}]},{"featureType":"road.highway","elementType":"labels.text.fill","stylers":[{"color":"#f3d19c"}]},{"featureType":"transit","elementType":"geometry","stylers":[{"color":"#2f3948"}]},{"featureType":"transit.station","elementType":"labels.text.fill","stylers":[{"color":"#d59563"}]},{"featureType":"water","elementType":"geometry","stylers":[{"color":"#17263c"}]},{"featureType":"water","elementType":"labels.text.fill","stylers":[{"color":"#515c6d"}]},{"featureType":"water","elementType":"labels.text.stroke","stylers":[{"color":"#17263c"}]}]',
+  GoogleMapStyle.aubergine:
+      r'[{"elementType":"geometry","stylers":[{"color":"#1d2c4d"}]},{"elementType":"labels.text.fill","stylers":[{"color":"#8ec3b9"}]},{"elementType":"labels.text.stroke","stylers":[{"color":"#1a3646"}]},{"featureType":"administrative.country","elementType":"geometry.stroke","stylers":[{"color":"#4b6878"}]},{"featureType":"administrative.land_parcel","elementType":"labels.text.fill","stylers":[{"color":"#64779e"}]},{"featureType":"administrative.province","elementType":"geometry.stroke","stylers":[{"color":"#4b6878"}]},{"featureType":"landscape.man_made","elementType":"geometry.stroke","stylers":[{"color":"#334e87"}]},{"featureType":"landscape.natural","elementType":"geometry","stylers":[{"color":"#023e58"}]},{"featureType":"poi","elementType":"geometry","stylers":[{"color":"#283d6a"}]},{"featureType":"poi","elementType":"labels.text.fill","stylers":[{"color":"#6f9ba5"}]},{"featureType":"poi","elementType":"labels.text.stroke","stylers":[{"color":"#1d2c4d"}]},{"featureType":"poi.park","elementType":"geometry.fill","stylers":[{"color":"#023e58"}]},{"featureType":"poi.park","elementType":"labels.text.fill","stylers":[{"color":"#3C7680"}]},{"featureType":"road","elementType":"geometry","stylers":[{"color":"#304a7d"}]},{"featureType":"road","elementType":"labels.text.fill","stylers":[{"color":"#98a5be"}]},{"featureType":"road","elementType":"labels.text.stroke","stylers":[{"color":"#1d2c4d"}]},{"featureType":"road.highway","elementType":"geometry","stylers":[{"color":"#2c6675"}]},{"featureType":"road.highway","elementType":"geometry.stroke","stylers":[{"color":"#255763"}]},{"featureType":"road.highway","elementType":"labels.text.fill","stylers":[{"color":"#b0d5ce"}]},{"featureType":"road.highway","elementType":"labels.text.stroke","stylers":[{"color":"#023e58"}]},{"featureType":"transit","elementType":"labels.text.fill","stylers":[{"color":"#98a5be"}]},{"featureType":"transit","elementType":"labels.text.stroke","stylers":[{"color":"#1d2c4d"}]},{"featureType":"transit.line","elementType":"geometry.fill","stylers":[{"color":"#283d6a"}]},{"featureType":"transit.station","elementType":"geometry","stylers":[{"color":"#3a4762"}]},{"featureType":"water","elementType":"geometry","stylers":[{"color":"#0e1626"}]},{"featureType":"water","elementType":"labels.text.fill","stylers":[{"color":"#4e6d70"}]}]',
+};
+
+Map<GoogleMarkerColor, double> googleMarkerColorMap = {
+  GoogleMarkerColor.red: 0.0,
+  GoogleMarkerColor.orange: 30.0,
+  GoogleMarkerColor.yellow: 60.0,
+  GoogleMarkerColor.green: 120.0,
+  GoogleMarkerColor.cyan: 180.0,
+  GoogleMarkerColor.azure: 210.0,
+  GoogleMarkerColor.blue: 240.0,
+  GoogleMarkerColor.violet: 270.0,
+  GoogleMarkerColor.magenta: 300.0,
+  GoogleMarkerColor.rose: 330.0,
+};
Index: lib/flutter_flow/flutter_flow_theme.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/flutter_flow/flutter_flow_theme.dart b/lib/flutter_flow/flutter_flow_theme.dart
new file mode 100644
--- /dev/null	(date 1708365758942)
+++ b/lib/flutter_flow/flutter_flow_theme.dart	(date 1708365758942)
@@ -0,0 +1,349 @@
+// ignore_for_file: overridden_fields, annotate_overrides
+
+import 'package:flutter/material.dart';
+import 'package:google_fonts/google_fonts.dart';
+
+import 'package:shared_preferences/shared_preferences.dart';
+
+const kThemeModeKey = '__theme_mode__';
+SharedPreferences? _prefs;
+
+abstract class FlutterFlowTheme {
+  static Future initialize() async =>
+      _prefs = await SharedPreferences.getInstance();
+  static ThemeMode get themeMode {
+    final darkMode = _prefs?.getBool(kThemeModeKey);
+    return darkMode == null
+        ? ThemeMode.system
+        : darkMode
+            ? ThemeMode.dark
+            : ThemeMode.light;
+  }
+
+  static void saveThemeMode(ThemeMode mode) => mode == ThemeMode.system
+      ? _prefs?.remove(kThemeModeKey)
+      : _prefs?.setBool(kThemeModeKey, mode == ThemeMode.dark);
+
+  static FlutterFlowTheme of(BuildContext context) {
+    return Theme.of(context).brightness == Brightness.dark
+        ? DarkModeTheme()
+        : LightModeTheme();
+  }
+
+  @Deprecated('Use primary instead')
+  Color get primaryColor => primary;
+  @Deprecated('Use secondary instead')
+  Color get secondaryColor => secondary;
+  @Deprecated('Use tertiary instead')
+  Color get tertiaryColor => tertiary;
+
+  late Color primary;
+  late Color secondary;
+  late Color tertiary;
+  late Color alternate;
+  late Color primaryText;
+  late Color secondaryText;
+  late Color primaryBackground;
+  late Color secondaryBackground;
+  late Color accent1;
+  late Color accent2;
+  late Color accent3;
+  late Color accent4;
+  late Color success;
+  late Color warning;
+  late Color error;
+  late Color info;
+
+  @Deprecated('Use displaySmallFamily instead')
+  String get title1Family => displaySmallFamily;
+  @Deprecated('Use displaySmall instead')
+  TextStyle get title1 => typography.displaySmall;
+  @Deprecated('Use headlineMediumFamily instead')
+  String get title2Family => typography.headlineMediumFamily;
+  @Deprecated('Use headlineMedium instead')
+  TextStyle get title2 => typography.headlineMedium;
+  @Deprecated('Use headlineSmallFamily instead')
+  String get title3Family => typography.headlineSmallFamily;
+  @Deprecated('Use headlineSmall instead')
+  TextStyle get title3 => typography.headlineSmall;
+  @Deprecated('Use titleMediumFamily instead')
+  String get subtitle1Family => typography.titleMediumFamily;
+  @Deprecated('Use titleMedium instead')
+  TextStyle get subtitle1 => typography.titleMedium;
+  @Deprecated('Use titleSmallFamily instead')
+  String get subtitle2Family => typography.titleSmallFamily;
+  @Deprecated('Use titleSmall instead')
+  TextStyle get subtitle2 => typography.titleSmall;
+  @Deprecated('Use bodyMediumFamily instead')
+  String get bodyText1Family => typography.bodyMediumFamily;
+  @Deprecated('Use bodyMedium instead')
+  TextStyle get bodyText1 => typography.bodyMedium;
+  @Deprecated('Use bodySmallFamily instead')
+  String get bodyText2Family => typography.bodySmallFamily;
+  @Deprecated('Use bodySmall instead')
+  TextStyle get bodyText2 => typography.bodySmall;
+
+  String get displayLargeFamily => typography.displayLargeFamily;
+  TextStyle get displayLarge => typography.displayLarge;
+  String get displayMediumFamily => typography.displayMediumFamily;
+  TextStyle get displayMedium => typography.displayMedium;
+  String get displaySmallFamily => typography.displaySmallFamily;
+  TextStyle get displaySmall => typography.displaySmall;
+  String get headlineLargeFamily => typography.headlineLargeFamily;
+  TextStyle get headlineLarge => typography.headlineLarge;
+  String get headlineMediumFamily => typography.headlineMediumFamily;
+  TextStyle get headlineMedium => typography.headlineMedium;
+  String get headlineSmallFamily => typography.headlineSmallFamily;
+  TextStyle get headlineSmall => typography.headlineSmall;
+  String get titleLargeFamily => typography.titleLargeFamily;
+  TextStyle get titleLarge => typography.titleLarge;
+  String get titleMediumFamily => typography.titleMediumFamily;
+  TextStyle get titleMedium => typography.titleMedium;
+  String get titleSmallFamily => typography.titleSmallFamily;
+  TextStyle get titleSmall => typography.titleSmall;
+  String get labelLargeFamily => typography.labelLargeFamily;
+  TextStyle get labelLarge => typography.labelLarge;
+  String get labelMediumFamily => typography.labelMediumFamily;
+  TextStyle get labelMedium => typography.labelMedium;
+  String get labelSmallFamily => typography.labelSmallFamily;
+  TextStyle get labelSmall => typography.labelSmall;
+  String get bodyLargeFamily => typography.bodyLargeFamily;
+  TextStyle get bodyLarge => typography.bodyLarge;
+  String get bodyMediumFamily => typography.bodyMediumFamily;
+  TextStyle get bodyMedium => typography.bodyMedium;
+  String get bodySmallFamily => typography.bodySmallFamily;
+  TextStyle get bodySmall => typography.bodySmall;
+
+  Typography get typography => ThemeTypography(this);
+}
+
+class LightModeTheme extends FlutterFlowTheme {
+  @Deprecated('Use primary instead')
+  Color get primaryColor => primary;
+  @Deprecated('Use secondary instead')
+  Color get secondaryColor => secondary;
+  @Deprecated('Use tertiary instead')
+  Color get tertiaryColor => tertiary;
+
+  late Color primary = const Color(0xFF6F61EF);
+  late Color secondary = const Color(0xFF39D2C0);
+  late Color tertiary = const Color(0xFFEE8B60);
+  late Color alternate = const Color(0xFFE5E7EB);
+  late Color primaryText = const Color(0xFF15161E);
+  late Color secondaryText = const Color(0xFF606A85);
+  late Color primaryBackground = const Color(0xFFF1F4F8);
+  late Color secondaryBackground = const Color(0xFFFFFFFF);
+  late Color accent1 = const Color(0x4D9489F5);
+  late Color accent2 = const Color(0x4C39D2C0);
+  late Color accent3 = const Color(0x4CEE8B60);
+  late Color accent4 = const Color(0x9AFFFFFF);
+  late Color success = const Color(0xFF048178);
+  late Color warning = const Color(0xFFFCDC0C);
+  late Color error = const Color(0xFFFF5963);
+  late Color info = const Color(0xFFFFFFFF);
+}
+
+abstract class Typography {
+  String get displayLargeFamily;
+  TextStyle get displayLarge;
+  String get displayMediumFamily;
+  TextStyle get displayMedium;
+  String get displaySmallFamily;
+  TextStyle get displaySmall;
+  String get headlineLargeFamily;
+  TextStyle get headlineLarge;
+  String get headlineMediumFamily;
+  TextStyle get headlineMedium;
+  String get headlineSmallFamily;
+  TextStyle get headlineSmall;
+  String get titleLargeFamily;
+  TextStyle get titleLarge;
+  String get titleMediumFamily;
+  TextStyle get titleMedium;
+  String get titleSmallFamily;
+  TextStyle get titleSmall;
+  String get labelLargeFamily;
+  TextStyle get labelLarge;
+  String get labelMediumFamily;
+  TextStyle get labelMedium;
+  String get labelSmallFamily;
+  TextStyle get labelSmall;
+  String get bodyLargeFamily;
+  TextStyle get bodyLarge;
+  String get bodyMediumFamily;
+  TextStyle get bodyMedium;
+  String get bodySmallFamily;
+  TextStyle get bodySmall;
+}
+
+class ThemeTypography extends Typography {
+  ThemeTypography(this.theme);
+
+  final FlutterFlowTheme theme;
+
+  String get displayLargeFamily => 'Outfit';
+  TextStyle get displayLarge => GoogleFonts.getFont(
+        'Outfit',
+        color: theme.primaryText,
+        fontWeight: FontWeight.normal,
+        fontSize: 57.0,
+      );
+  String get displayMediumFamily => 'Outfit';
+  TextStyle get displayMedium => GoogleFonts.getFont(
+        'Outfit',
+        color: theme.primaryText,
+        fontWeight: FontWeight.normal,
+        fontSize: 45.0,
+      );
+  String get displaySmallFamily => 'Outfit';
+  TextStyle get displaySmall => GoogleFonts.getFont(
+        'Outfit',
+        color: theme.primaryText,
+        fontWeight: FontWeight.w600,
+        fontSize: 36.0,
+      );
+  String get headlineLargeFamily => 'Outfit';
+  TextStyle get headlineLarge => GoogleFonts.getFont(
+        'Outfit',
+        color: theme.primaryText,
+        fontWeight: FontWeight.normal,
+        fontSize: 32.0,
+      );
+  String get headlineMediumFamily => 'Outfit';
+  TextStyle get headlineMedium => GoogleFonts.getFont(
+        'Outfit',
+        color: theme.primaryText,
+        fontWeight: FontWeight.w500,
+        fontSize: 24.0,
+      );
+  String get headlineSmallFamily => 'Outfit';
+  TextStyle get headlineSmall => GoogleFonts.getFont(
+        'Outfit',
+        color: theme.primaryText,
+        fontWeight: FontWeight.bold,
+        fontSize: 22.0,
+      );
+  String get titleLargeFamily => 'Outfit';
+  TextStyle get titleLarge => GoogleFonts.getFont(
+        'Outfit',
+        color: theme.primaryText,
+        fontWeight: FontWeight.w500,
+        fontSize: 22.0,
+      );
+  String get titleMediumFamily => 'Plus Jakarta Sans';
+  TextStyle get titleMedium => GoogleFonts.getFont(
+        'Plus Jakarta Sans',
+        color: theme.info,
+        fontWeight: FontWeight.w500,
+        fontSize: 18.0,
+      );
+  String get titleSmallFamily => 'Plus Jakarta Sans';
+  TextStyle get titleSmall => GoogleFonts.getFont(
+        'Plus Jakarta Sans',
+        color: theme.info,
+        fontWeight: FontWeight.w500,
+        fontSize: 16.0,
+      );
+  String get labelLargeFamily => 'Outfit';
+  TextStyle get labelLarge => GoogleFonts.getFont(
+        'Outfit',
+        color: theme.secondaryText,
+        fontWeight: FontWeight.w500,
+        fontSize: 16.0,
+      );
+  String get labelMediumFamily => 'Outfit';
+  TextStyle get labelMedium => GoogleFonts.getFont(
+        'Outfit',
+        color: theme.secondaryText,
+        fontWeight: FontWeight.w500,
+        fontSize: 14.0,
+      );
+  String get labelSmallFamily => 'Outfit';
+  TextStyle get labelSmall => GoogleFonts.getFont(
+        'Outfit',
+        color: theme.secondaryText,
+        fontWeight: FontWeight.w500,
+        fontSize: 12.0,
+      );
+  String get bodyLargeFamily => 'Plus Jakarta Sans';
+  TextStyle get bodyLarge => GoogleFonts.getFont(
+        'Plus Jakarta Sans',
+        color: theme.primaryText,
+        fontSize: 16.0,
+      );
+  String get bodyMediumFamily => 'Plus Jakarta Sans';
+  TextStyle get bodyMedium => GoogleFonts.getFont(
+        'Plus Jakarta Sans',
+        color: theme.primaryText,
+        fontWeight: FontWeight.normal,
+        fontSize: 14.0,
+      );
+  String get bodySmallFamily => 'Plus Jakarta Sans';
+  TextStyle get bodySmall => GoogleFonts.getFont(
+        'Plus Jakarta Sans',
+        color: theme.primaryText,
+        fontWeight: FontWeight.normal,
+        fontSize: 12.0,
+      );
+}
+
+class DarkModeTheme extends FlutterFlowTheme {
+  @Deprecated('Use primary instead')
+  Color get primaryColor => primary;
+  @Deprecated('Use secondary instead')
+  Color get secondaryColor => secondary;
+  @Deprecated('Use tertiary instead')
+  Color get tertiaryColor => tertiary;
+
+  late Color primary = const Color(0xFF6F61EF);
+  late Color secondary = const Color(0xFF39D2C0);
+  late Color tertiary = const Color(0xFFEE8B60);
+  late Color alternate = const Color(0xFF313442);
+  late Color primaryText = const Color(0xFFFFFFFF);
+  late Color secondaryText = const Color(0xFFA9ADC6);
+  late Color primaryBackground = const Color(0xFF15161E);
+  late Color secondaryBackground = const Color(0xFF1B1D27);
+  late Color accent1 = const Color(0x4D9489F5);
+  late Color accent2 = const Color(0x4C39D2C0);
+  late Color accent3 = const Color(0x4CEE8B60);
+  late Color accent4 = const Color(0x981D2428);
+  late Color success = const Color(0xFF048178);
+  late Color warning = const Color(0xFFFCDC0C);
+  late Color error = const Color(0xFFFF5963);
+  late Color info = const Color(0xFFFFFFFF);
+}
+
+extension TextStyleHelper on TextStyle {
+  TextStyle override({
+    String? fontFamily,
+    Color? color,
+    double? fontSize,
+    FontWeight? fontWeight,
+    double? letterSpacing,
+    FontStyle? fontStyle,
+    bool useGoogleFonts = true,
+    TextDecoration? decoration,
+    double? lineHeight,
+  }) =>
+      useGoogleFonts
+          ? GoogleFonts.getFont(
+              fontFamily!,
+              color: color ?? this.color,
+              fontSize: fontSize ?? this.fontSize,
+              letterSpacing: letterSpacing ?? this.letterSpacing,
+              fontWeight: fontWeight ?? this.fontWeight,
+              fontStyle: fontStyle ?? this.fontStyle,
+              decoration: decoration,
+              height: lineHeight,
+            )
+          : copyWith(
+              fontFamily: fontFamily,
+              color: color,
+              fontSize: fontSize,
+              letterSpacing: letterSpacing,
+              fontWeight: fontWeight,
+              fontStyle: fontStyle,
+              decoration: decoration,
+              height: lineHeight,
+            );
+}
Index: lib/flutter_flow/flutter_flow_util.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/flutter_flow/flutter_flow_util.dart b/lib/flutter_flow/flutter_flow_util.dart
new file mode 100644
--- /dev/null	(date 1708365758989)
+++ b/lib/flutter_flow/flutter_flow_util.dart	(date 1708365758989)
@@ -0,0 +1,349 @@
+import 'dart:io';
+
+import 'package:cloud_firestore/cloud_firestore.dart';
+import 'package:flutter/foundation.dart' show kIsWeb;
+import 'package:flutter/material.dart';
+import 'package:collection/collection.dart';
+import 'package:from_css_color/from_css_color.dart';
+import 'package:intl/intl.dart';
+import 'package:json_path/json_path.dart';
+import 'package:timeago/timeago.dart' as timeago;
+import 'package:url_launcher/url_launcher.dart';
+
+import '../main.dart';
+
+import 'lat_lng.dart';
+
+export 'lat_lng.dart';
+export 'place.dart';
+export 'uploaded_file.dart';
+export '../app_state.dart';
+export 'flutter_flow_model.dart';
+export 'dart:math' show min, max;
+export 'dart:typed_data' show Uint8List;
+export 'dart:convert' show jsonEncode, jsonDecode;
+export 'package:intl/intl.dart';
+export 'package:cloud_firestore/cloud_firestore.dart'
+    show DocumentReference, FirebaseFirestore;
+export 'package:page_transition/page_transition.dart';
+export 'internationalization.dart' show FFLocalizations;
+export '/backend/firebase_analytics/analytics.dart';
+export 'nav/nav.dart';
+
+T valueOrDefault<T>(T? value, T defaultValue) =>
+    (value is String && value.isEmpty) || value == null ? defaultValue : value;
+
+void _setTimeagoLocales() {
+  timeago.setLocaleMessages('en', timeago.EnMessages());
+  timeago.setLocaleMessages('en_short', timeago.EnShortMessages());
+}
+
+String dateTimeFormat(String format, DateTime? dateTime, {String? locale}) {
+  if (dateTime == null) {
+    return '';
+  }
+  if (format == 'relative') {
+    _setTimeagoLocales();
+    return timeago.format(dateTime, locale: locale, allowFromNow: true);
+  }
+  return DateFormat(format, locale).format(dateTime);
+}
+
+Future launchURL(String url) async {
+  var uri = Uri.parse(url).toString();
+  try {
+    await launch(uri);
+  } catch (e) {
+    throw 'Could not launch $uri: $e';
+  }
+}
+
+Color colorFromCssString(String color, {Color? defaultColor}) {
+  try {
+    return fromCssColor(color);
+  } catch (_) {}
+  return defaultColor ?? Colors.black;
+}
+
+enum FormatType {
+  decimal,
+  percent,
+  scientific,
+  compact,
+  compactLong,
+  custom,
+}
+
+enum DecimalType {
+  automatic,
+  periodDecimal,
+  commaDecimal,
+}
+
+String formatNumber(
+  num? value, {
+  required FormatType formatType,
+  DecimalType? decimalType,
+  String? currency,
+  bool toLowerCase = false,
+  String? format,
+  String? locale,
+}) {
+  if (value == null) {
+    return '';
+  }
+  var formattedValue = '';
+  switch (formatType) {
+    case FormatType.decimal:
+      switch (decimalType!) {
+        case DecimalType.automatic:
+          formattedValue = NumberFormat.decimalPattern().format(value);
+          break;
+        case DecimalType.periodDecimal:
+          formattedValue = NumberFormat.decimalPattern('en_US').format(value);
+          break;
+        case DecimalType.commaDecimal:
+          formattedValue = NumberFormat.decimalPattern('es_PA').format(value);
+          break;
+      }
+      break;
+    case FormatType.percent:
+      formattedValue = NumberFormat.percentPattern().format(value);
+      break;
+    case FormatType.scientific:
+      formattedValue = NumberFormat.scientificPattern().format(value);
+      if (toLowerCase) {
+        formattedValue = formattedValue.toLowerCase();
+      }
+      break;
+    case FormatType.compact:
+      formattedValue = NumberFormat.compact().format(value);
+      break;
+    case FormatType.compactLong:
+      formattedValue = NumberFormat.compactLong().format(value);
+      break;
+    case FormatType.custom:
+      final hasLocale = locale != null && locale.isNotEmpty;
+      formattedValue =
+          NumberFormat(format, hasLocale ? locale : null).format(value);
+  }
+
+  if (formattedValue.isEmpty) {
+    return value.toString();
+  }
+
+  if (currency != null) {
+    final currencySymbol = currency.isNotEmpty
+        ? currency
+        : NumberFormat.simpleCurrency().format(0.0).substring(0, 1);
+    formattedValue = '$currencySymbol$formattedValue';
+  }
+
+  return formattedValue;
+}
+
+DateTime get getCurrentTimestamp => DateTime.now();
+DateTime dateTimeFromSecondsSinceEpoch(int seconds) {
+  return DateTime.fromMillisecondsSinceEpoch(seconds * 1000);
+}
+
+extension DateTimeConversionExtension on DateTime {
+  int get secondsSinceEpoch => (millisecondsSinceEpoch / 1000).round();
+}
+
+extension DateTimeComparisonOperators on DateTime {
+  bool operator <(DateTime other) => isBefore(other);
+  bool operator >(DateTime other) => isAfter(other);
+  bool operator <=(DateTime other) => this < other || isAtSameMomentAs(other);
+  bool operator >=(DateTime other) => this > other || isAtSameMomentAs(other);
+}
+
+T? castToType<T>(dynamic value) {
+  if (value == null) {
+    return null;
+  }
+  switch (T) {
+    case double:
+      // Doubles may be stored as ints in some cases.
+      return value.toDouble() as T;
+    case int:
+      // Likewise, ints may be stored as doubles. If this is the case
+      // (i.e. no decimal value), return the value as an int.
+      if (value is num && value.toInt() == value) {
+        return value.toInt() as T;
+      }
+      break;
+    default:
+      break;
+  }
+  return value as T;
+}
+
+dynamic getJsonField(
+  dynamic response,
+  String jsonPath, [
+  bool isForList = false,
+]) {
+  final field = JsonPath(jsonPath).read(response);
+  if (field.isEmpty) {
+    return null;
+  }
+  if (field.length > 1) {
+    return field.map((f) => f.value).toList();
+  }
+  final value = field.first.value;
+  if (isForList) {
+    return value is! Iterable
+        ? [value]
+        : (value is List ? value : value.toList());
+  }
+  return value;
+}
+
+Rect? getWidgetBoundingBox(BuildContext context) {
+  try {
+    final renderBox = context.findRenderObject() as RenderBox?;
+    return renderBox!.localToGlobal(Offset.zero) & renderBox.size;
+  } catch (_) {
+    return null;
+  }
+}
+
+bool get isAndroid => !kIsWeb && Platform.isAndroid;
+bool get isiOS => !kIsWeb && Platform.isIOS;
+bool get isWeb => kIsWeb;
+
+const kBreakpointSmall = 479.0;
+const kBreakpointMedium = 767.0;
+const kBreakpointLarge = 991.0;
+bool isMobileWidth(BuildContext context) =>
+    MediaQuery.sizeOf(context).width < kBreakpointSmall;
+bool responsiveVisibility({
+  required BuildContext context,
+  bool phone = true,
+  bool tablet = true,
+  bool tabletLandscape = true,
+  bool desktop = true,
+}) {
+  final width = MediaQuery.sizeOf(context).width;
+  if (width < kBreakpointSmall) {
+    return phone;
+  } else if (width < kBreakpointMedium) {
+    return tablet;
+  } else if (width < kBreakpointLarge) {
+    return tabletLandscape;
+  } else {
+    return desktop;
+  }
+}
+
+const kTextValidatorUsernameRegex = r'^[a-zA-Z][a-zA-Z0-9_-]{2,16}$';
+// https://stackoverflow.com/a/201378
+const kTextValidatorEmailRegex =
+    "^(?:[a-z0-9!#\$%&\'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#\$%&\'*+/=?^_`{|}~-]+)*|\"(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21\\x23-\\x5b\\x5d-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\\x01-\\x08\\x0b\\x0c\\x0e-\\x1f\\x21-\\x5a\\x53-\\x7f]|\\\\[\\x01-\\x09\\x0b\\x0c\\x0e-\\x7f])+)\\])\$";
+const kTextValidatorWebsiteRegex =
+    r'(https?:\/\/)?(www\.)[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,10}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)|(https?:\/\/)?(www\.)?(?!ww)[-a-zA-Z0-9@:%._\+~#=]{2,256}\.[a-z]{2,10}\b([-a-zA-Z0-9@:%_\+.~#?&//=]*)';
+
+extension FFTextEditingControllerExt on TextEditingController? {
+  String get text => this == null ? '' : this!.text;
+  set text(String newText) => this?.text = newText;
+}
+
+extension IterableExt<T> on Iterable<T> {
+  List<T> sortedList<S extends Comparable>([S Function(T)? keyOf]) => toList()
+    ..sort(keyOf == null ? null : ((a, b) => keyOf(a).compareTo(keyOf(b))));
+
+  List<S> mapIndexed<S>(S Function(int, T) func) => toList()
+      .asMap()
+      .map((index, value) => MapEntry(index, func(index, value)))
+      .values
+      .toList();
+}
+
+extension StringDocRef on String {
+  DocumentReference get ref => FirebaseFirestore.instance.doc(this);
+}
+
+void setAppLanguage(BuildContext context, String language) =>
+    MyApp.of(context).setLocale(language);
+
+void setDarkModeSetting(BuildContext context, ThemeMode themeMode) =>
+    MyApp.of(context).setThemeMode(themeMode);
+
+void showSnackbar(
+  BuildContext context,
+  String message, {
+  bool loading = false,
+  int duration = 4,
+}) {
+  ScaffoldMessenger.of(context).hideCurrentSnackBar();
+  ScaffoldMessenger.of(context).showSnackBar(
+    SnackBar(
+      content: Row(
+        children: [
+          if (loading)
+            Padding(
+              padding: EdgeInsetsDirectional.only(end: 10.0),
+              child: Container(
+                height: 20,
+                width: 20,
+                child: const CircularProgressIndicator(
+                  color: Colors.white,
+                ),
+              ),
+            ),
+          Text(message),
+        ],
+      ),
+      duration: Duration(seconds: duration),
+    ),
+  );
+}
+
+extension FFStringExt on String {
+  String maybeHandleOverflow({int? maxChars, String replacement = ''}) =>
+      maxChars != null && length > maxChars
+          ? replaceRange(maxChars, null, replacement)
+          : this;
+}
+
+extension ListFilterExt<T> on Iterable<T?> {
+  List<T> get withoutNulls => where((s) => s != null).map((e) => e!).toList();
+}
+
+extension MapListContainsExt on List<dynamic> {
+  bool containsMap(dynamic map) => map is Map
+      ? any((e) => e is Map && const DeepCollectionEquality().equals(e, map))
+      : contains(map);
+}
+
+extension ListDivideExt<T extends Widget> on Iterable<T> {
+  Iterable<MapEntry<int, Widget>> get enumerate => toList().asMap().entries;
+
+  List<Widget> divide(Widget t) => isEmpty
+      ? []
+      : (enumerate.map((e) => [e.value, t]).expand((i) => i).toList()
+        ..removeLast());
+
+  List<Widget> around(Widget t) => addToStart(t).addToEnd(t);
+
+  List<Widget> addToStart(Widget t) =>
+      enumerate.map((e) => e.value).toList()..insert(0, t);
+
+  List<Widget> addToEnd(Widget t) =>
+      enumerate.map((e) => e.value).toList()..add(t);
+
+  List<Padding> paddingTopEach(double val) =>
+      map((w) => Padding(padding: EdgeInsets.only(top: val), child: w))
+          .toList();
+}
+
+extension StatefulWidgetExtensions on State<StatefulWidget> {
+  /// Check if the widget exist before safely setting state.
+  void safeSetState(VoidCallback fn) {
+    if (mounted) {
+      // ignore: invalid_use_of_protected_member
+      setState(fn);
+    }
+  }
+}
Index: lib/flutter_flow/lat_lng.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/flutter_flow/lat_lng.dart b/lib/flutter_flow/lat_lng.dart
new file mode 100644
--- /dev/null	(date 1708365759193)
+++ b/lib/flutter_flow/lat_lng.dart	(date 1708365759193)
@@ -0,0 +1,19 @@
+class LatLng {
+  const LatLng(this.latitude, this.longitude);
+  final double latitude;
+  final double longitude;
+
+  @override
+  String toString() => 'LatLng(lat: $latitude, lng: $longitude)';
+
+  String serialize() => '$latitude,$longitude';
+
+  @override
+  int get hashCode => latitude.hashCode + longitude.hashCode;
+
+  @override
+  bool operator ==(other) =>
+      other is LatLng &&
+      latitude == other.latitude &&
+      longitude == other.longitude;
+}
Index: lib/flutter_flow/nav/nav.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/flutter_flow/nav/nav.dart b/lib/flutter_flow/nav/nav.dart
new file mode 100644
--- /dev/null	(date 1708365759318)
+++ b/lib/flutter_flow/nav/nav.dart	(date 1708365759318)
@@ -0,0 +1,428 @@
+import 'dart:async';
+
+import 'package:flutter/material.dart';
+import 'package:go_router/go_router.dart';
+import 'package:page_transition/page_transition.dart';
+import 'package:provider/provider.dart';
+import '/backend/backend.dart';
+import '/backend/schema/structs/index.dart';
+
+import '/auth/base_auth_user_provider.dart';
+
+import '/index.dart';
+import '/main.dart';
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/lat_lng.dart';
+import '/flutter_flow/place.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import 'serialization_util.dart';
+
+export 'package:go_router/go_router.dart';
+export 'serialization_util.dart';
+
+const kTransitionInfoKey = '__transition_info__';
+
+class AppStateNotifier extends ChangeNotifier {
+  AppStateNotifier._();
+
+  static AppStateNotifier? _instance;
+  static AppStateNotifier get instance => _instance ??= AppStateNotifier._();
+
+  BaseAuthUser? initialUser;
+  BaseAuthUser? user;
+  bool showSplashImage = true;
+  String? _redirectLocation;
+
+  /// Determines whether the app will refresh and build again when a sign
+  /// in or sign out happens. This is useful when the app is launched or
+  /// on an unexpected logout. However, this must be turned off when we
+  /// intend to sign in/out and then navigate or perform any actions after.
+  /// Otherwise, this will trigger a refresh and interrupt the action(s).
+  bool notifyOnAuthChange = true;
+
+  bool get loading => user == null || showSplashImage;
+  bool get loggedIn => user?.loggedIn ?? false;
+  bool get initiallyLoggedIn => initialUser?.loggedIn ?? false;
+  bool get shouldRedirect => loggedIn && _redirectLocation != null;
+
+  String getRedirectLocation() => _redirectLocation!;
+  bool hasRedirect() => _redirectLocation != null;
+  void setRedirectLocationIfUnset(String loc) => _redirectLocation ??= loc;
+  void clearRedirectLocation() => _redirectLocation = null;
+
+  /// Mark as not needing to notify on a sign in / out when we intend
+  /// to perform subsequent actions (such as navigation) afterwards.
+  void updateNotifyOnAuthChange(bool notify) => notifyOnAuthChange = notify;
+
+  void update(BaseAuthUser newUser) {
+    final shouldUpdate =
+        user?.uid == null || newUser.uid == null || user?.uid != newUser.uid;
+    initialUser ??= newUser;
+    user = newUser;
+    // Refresh the app on auth change unless explicitly marked otherwise.
+    // No need to update unless the user has changed.
+    if (notifyOnAuthChange && shouldUpdate) {
+      notifyListeners();
+    }
+    // Once again mark the notifier as needing to update on auth change
+    // (in order to catch sign in / out events).
+    updateNotifyOnAuthChange(true);
+  }
+
+  void stopShowingSplashImage() {
+    showSplashImage = false;
+    notifyListeners();
+  }
+}
+
+GoRouter createRouter(AppStateNotifier appStateNotifier) => GoRouter(
+      initialLocation: '/',
+      debugLogDiagnostics: true,
+      refreshListenable: appStateNotifier,
+      errorBuilder: (context, state) =>
+          appStateNotifier.loggedIn ? NavBarPage() : SignInWidget(),
+      routes: [
+        FFRoute(
+          name: '_initialize',
+          path: '/',
+          builder: (context, _) =>
+              appStateNotifier.loggedIn ? NavBarPage() : SignInWidget(),
+          routes: [
+            FFRoute(
+              name: 'Splash',
+              path: 'splash',
+              builder: (context, params) => SplashWidget(),
+            ),
+            FFRoute(
+              name: 'SignIn',
+              path: 'sign-in',
+              builder: (context, params) => SignInWidget(),
+            ),
+            FFRoute(
+              name: 'Onboarding_Slideshow',
+              path: 'onboarding',
+              requireAuth: true,
+              builder: (context, params) => OnboardingSlideshowWidget(),
+            ),
+            FFRoute(
+              name: 'Onboarding_CreateAccount',
+              path: 'create-account',
+              builder: (context, params) => OnboardingCreateAccountWidget(),
+            ),
+            FFRoute(
+              name: 'Dashboard',
+              path: 'dashboard',
+              requireAuth: true,
+              builder: (context, params) => params.isEmpty
+                  ? NavBarPage(initialPage: 'Dashboard')
+                  : DashboardWidget(),
+            ),
+            FFRoute(
+              name: 'Profile',
+              path: 'profile',
+              requireAuth: true,
+              builder: (context, params) => params.isEmpty
+                  ? NavBarPage(initialPage: 'Profile')
+                  : ProfileWidget(),
+            ),
+            FFRoute(
+              name: 'EditProfile',
+              path: 'edit-profile',
+              requireAuth: true,
+              builder: (context, params) => EditProfileWidget(),
+            ),
+            FFRoute(
+              name: 'AboutUs',
+              path: 'about-us',
+              requireAuth: true,
+              builder: (context, params) => AboutUsWidget(),
+            ),
+            FFRoute(
+              name: 'PersonalAssistance',
+              path: 'eating-preferences',
+              requireAuth: true,
+              builder: (context, params) => PersonalAssistanceWidget(),
+            ),
+            FFRoute(
+              name: 'SupportCenter',
+              path: 'support-center',
+              requireAuth: true,
+              builder: (context, params) => SupportCenterWidget(),
+            ),
+            FFRoute(
+              name: 'ForgotPassword',
+              path: 'forgot-password',
+              builder: (context, params) => ForgotPasswordWidget(),
+            ),
+            FFRoute(
+              name: 'EditPreferences',
+              path: 'edit-preferences',
+              requireAuth: true,
+              builder: (context, params) => EditPreferencesWidget(
+                page: params.getParam('page', ParamType.int),
+              ),
+            ),
+            FFRoute(
+              name: 'Book_equipment',
+              path: 'bookEquipment',
+              builder: (context, params) => BookEquipmentWidget(),
+            ),
+            FFRoute(
+              name: 'Nearby_equipment',
+              path: 'nearbyEquipment',
+              builder: (context, params) => NearbyEquipmentWidget(),
+            )
+          ].map((r) => r.toRoute(appStateNotifier)).toList(),
+        ),
+      ].map((r) => r.toRoute(appStateNotifier)).toList(),
+    );
+
+extension NavParamExtensions on Map<String, String?> {
+  Map<String, String> get withoutNulls => Map.fromEntries(
+        entries
+            .where((e) => e.value != null)
+            .map((e) => MapEntry(e.key, e.value!)),
+      );
+}
+
+extension NavigationExtensions on BuildContext {
+  void goNamedAuth(
+    String name,
+    bool mounted, {
+    Map<String, String> pathParameters = const <String, String>{},
+    Map<String, String> queryParameters = const <String, String>{},
+    Object? extra,
+    bool ignoreRedirect = false,
+  }) =>
+      !mounted || GoRouter.of(this).shouldRedirect(ignoreRedirect)
+          ? null
+          : goNamed(
+              name,
+              pathParameters: pathParameters,
+              queryParameters: queryParameters,
+              extra: extra,
+            );
+
+  void pushNamedAuth(
+    String name,
+    bool mounted, {
+    Map<String, String> pathParameters = const <String, String>{},
+    Map<String, String> queryParameters = const <String, String>{},
+    Object? extra,
+    bool ignoreRedirect = false,
+  }) =>
+      !mounted || GoRouter.of(this).shouldRedirect(ignoreRedirect)
+          ? null
+          : pushNamed(
+              name,
+              pathParameters: pathParameters,
+              queryParameters: queryParameters,
+              extra: extra,
+            );
+
+  void safePop() {
+    // If there is only one route on the stack, navigate to the initial
+    // page instead of popping.
+    if (canPop()) {
+      pop();
+    } else {
+      go('/');
+    }
+  }
+}
+
+extension GoRouterExtensions on GoRouter {
+  AppStateNotifier get appState => AppStateNotifier.instance;
+  void prepareAuthEvent([bool ignoreRedirect = false]) =>
+      appState.hasRedirect() && !ignoreRedirect
+          ? null
+          : appState.updateNotifyOnAuthChange(false);
+  bool shouldRedirect(bool ignoreRedirect) =>
+      !ignoreRedirect && appState.hasRedirect();
+  void clearRedirectLocation() => appState.clearRedirectLocation();
+  void setRedirectLocationIfUnset(String location) =>
+      appState.updateNotifyOnAuthChange(false);
+}
+
+extension _GoRouterStateExtensions on GoRouterState {
+  Map<String, dynamic> get extraMap =>
+      extra != null ? extra as Map<String, dynamic> : {};
+  Map<String, dynamic> get allParams => <String, dynamic>{}
+    ..addAll(pathParameters)
+    ..addAll(queryParameters)
+    ..addAll(extraMap);
+  TransitionInfo get transitionInfo => extraMap.containsKey(kTransitionInfoKey)
+      ? extraMap[kTransitionInfoKey] as TransitionInfo
+      : TransitionInfo.appDefault();
+}
+
+class FFParameters {
+  FFParameters(this.state, [this.asyncParams = const {}]);
+
+  final GoRouterState state;
+  final Map<String, Future<dynamic> Function(String)> asyncParams;
+
+  Map<String, dynamic> futureParamValues = {};
+
+  // Parameters are empty if the params map is empty or if the only parameter
+  // present is the special extra parameter reserved for the transition info.
+  bool get isEmpty =>
+      state.allParams.isEmpty ||
+      (state.extraMap.length == 1 &&
+          state.extraMap.containsKey(kTransitionInfoKey));
+  bool isAsyncParam(MapEntry<String, dynamic> param) =>
+      asyncParams.containsKey(param.key) && param.value is String;
+  bool get hasFutures => state.allParams.entries.any(isAsyncParam);
+  Future<bool> completeFutures() => Future.wait(
+        state.allParams.entries.where(isAsyncParam).map(
+          (param) async {
+            final doc = await asyncParams[param.key]!(param.value)
+                .onError((_, __) => null);
+            if (doc != null) {
+              futureParamValues[param.key] = doc;
+              return true;
+            }
+            return false;
+          },
+        ),
+      ).onError((_, __) => [false]).then((v) => v.every((e) => e));
+
+  dynamic getParam<T>(
+    String paramName,
+    ParamType type, [
+    bool isList = false,
+    List<String>? collectionNamePath,
+  ]) {
+    if (futureParamValues.containsKey(paramName)) {
+      return futureParamValues[paramName];
+    }
+    if (!state.allParams.containsKey(paramName)) {
+      return null;
+    }
+    final param = state.allParams[paramName];
+    // Got parameter from `extras`, so just directly return it.
+    if (param is! String) {
+      return param;
+    }
+    // Return serialized value.
+    return deserializeParam<T>(param, type, isList,
+        collectionNamePath: collectionNamePath);
+  }
+}
+
+class FFRoute {
+  const FFRoute({
+    required this.name,
+    required this.path,
+    required this.builder,
+    this.requireAuth = false,
+    this.asyncParams = const {},
+    this.routes = const [],
+  });
+
+  final String name;
+  final String path;
+  final bool requireAuth;
+  final Map<String, Future<dynamic> Function(String)> asyncParams;
+  final Widget Function(BuildContext, FFParameters) builder;
+  final List<GoRoute> routes;
+
+  GoRoute toRoute(AppStateNotifier appStateNotifier) => GoRoute(
+        name: name,
+        path: path,
+        redirect: (context, state) {
+          if (appStateNotifier.shouldRedirect) {
+            final redirectLocation = appStateNotifier.getRedirectLocation();
+            appStateNotifier.clearRedirectLocation();
+            return redirectLocation;
+          }
+
+          if (requireAuth && !appStateNotifier.loggedIn) {
+            appStateNotifier.setRedirectLocationIfUnset(state.location);
+            return '/sign-in';
+          }
+          return null;
+        },
+        pageBuilder: (context, state) {
+          final ffParams = FFParameters(state, asyncParams);
+          final page = ffParams.hasFutures
+              ? FutureBuilder(
+                  future: ffParams.completeFutures(),
+                  builder: (context, _) => builder(context, ffParams),
+                )
+              : builder(context, ffParams);
+          final child = appStateNotifier.loading
+              ? Container(
+                  color: FlutterFlowTheme.of(context).primaryBackground,
+                  child: Center(
+                    child: Image.asset(
+                      'assets/images/MealPlanner_Rounded.png',
+                      width: 175.0,
+                      fit: BoxFit.cover,
+                    ),
+                  ),
+                )
+              : page;
+
+          final transitionInfo = state.transitionInfo;
+          return transitionInfo.hasTransition
+              ? CustomTransitionPage(
+                  key: state.pageKey,
+                  child: child,
+                  transitionDuration: transitionInfo.duration,
+                  transitionsBuilder:
+                      (context, animation, secondaryAnimation, child) =>
+                          PageTransition(
+                    type: transitionInfo.transitionType,
+                    duration: transitionInfo.duration,
+                    reverseDuration: transitionInfo.duration,
+                    alignment: transitionInfo.alignment,
+                    child: child,
+                  ).buildTransitions(
+                    context,
+                    animation,
+                    secondaryAnimation,
+                    child,
+                  ),
+                )
+              : MaterialPage(key: state.pageKey, child: child);
+        },
+        routes: routes,
+      );
+}
+
+class TransitionInfo {
+  const TransitionInfo({
+    required this.hasTransition,
+    this.transitionType = PageTransitionType.fade,
+    this.duration = const Duration(milliseconds: 300),
+    this.alignment,
+  });
+
+  final bool hasTransition;
+  final PageTransitionType transitionType;
+  final Duration duration;
+  final Alignment? alignment;
+
+  static TransitionInfo appDefault() => TransitionInfo(hasTransition: false);
+}
+
+class RootPageContext {
+  const RootPageContext(this.isRootPage, [this.errorRoute]);
+  final bool isRootPage;
+  final String? errorRoute;
+
+  static bool isInactiveRootPage(BuildContext context) {
+    final rootPageContext = context.read<RootPageContext?>();
+    final isRootPage = rootPageContext?.isRootPage ?? false;
+    final location = GoRouter.of(context).location;
+    return isRootPage &&
+        location != '/' &&
+        location != rootPageContext?.errorRoute;
+  }
+
+  static Widget wrap(Widget child, {String? errorRoute}) => Provider.value(
+        value: RootPageContext(true, errorRoute),
+        child: child,
+      );
+}
Index: lib/flutter_flow/uploaded_file.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/flutter_flow/uploaded_file.dart b/lib/flutter_flow/uploaded_file.dart
new file mode 100644
--- /dev/null	(date 1708365759208)
+++ b/lib/flutter_flow/uploaded_file.dart	(date 1708365759208)
@@ -0,0 +1,68 @@
+import 'dart:convert';
+import 'dart:typed_data' show Uint8List;
+
+class FFUploadedFile {
+  const FFUploadedFile({
+    this.name,
+    this.bytes,
+    this.height,
+    this.width,
+    this.blurHash,
+  });
+
+  final String? name;
+  final Uint8List? bytes;
+  final double? height;
+  final double? width;
+  final String? blurHash;
+
+  @override
+  String toString() =>
+      'FFUploadedFile(name: $name, bytes: ${bytes?.length ?? 0}, height: $height, width: $width, blurHash: $blurHash,)';
+
+  String serialize() => jsonEncode(
+        {
+          'name': name,
+          'bytes': bytes,
+          'height': height,
+          'width': width,
+          'blurHash': blurHash,
+        },
+      );
+
+  static FFUploadedFile deserialize(String val) {
+    final serializedData = jsonDecode(val) as Map<String, dynamic>;
+    final data = {
+      'name': serializedData['name'] ?? '',
+      'bytes': serializedData['bytes'] ?? Uint8List.fromList([]),
+      'height': serializedData['height'],
+      'width': serializedData['width'],
+      'blurHash': serializedData['blurHash'],
+    };
+    return FFUploadedFile(
+      name: data['name'] as String,
+      bytes: Uint8List.fromList(data['bytes'].cast<int>().toList()),
+      height: data['height'] as double?,
+      width: data['width'] as double?,
+      blurHash: data['blurHash'] as String?,
+    );
+  }
+
+  @override
+  int get hashCode => Object.hash(
+        name,
+        bytes,
+        height,
+        width,
+        blurHash,
+      );
+
+  @override
+  bool operator ==(other) =>
+      other is FFUploadedFile &&
+      name == other.name &&
+      bytes == other.bytes &&
+      height == other.height &&
+      width == other.width &&
+      blurHash == other.blurHash;
+}
Index: lib/book_equipment/book_equipment_widget.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/book_equipment/book_equipment_widget.dart b/lib/book_equipment/book_equipment_widget.dart
new file mode 100644
--- /dev/null	(date 1708365758330)
+++ b/lib/book_equipment/book_equipment_widget.dart	(date 1708365758330)
@@ -0,0 +1,522 @@
+import '/flutter_flow/flutter_flow_icon_button.dart';
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/flutter_flow_widgets.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+import 'package:simple_gradient_text/simple_gradient_text.dart';
+import 'book_equipment_model.dart';
+export 'book_equipment_model.dart';
+
+class BookEquipmentWidget extends StatefulWidget {
+  const BookEquipmentWidget({super.key});
+
+  @override
+  State<BookEquipmentWidget> createState() => _BookEquipmentWidgetState();
+}
+
+class _BookEquipmentWidgetState extends State<BookEquipmentWidget> {
+  late BookEquipmentModel _model;
+
+  final scaffoldKey = GlobalKey<ScaffoldState>();
+
+  @override
+  void initState() {
+    super.initState();
+    _model = createModel(context, () => BookEquipmentModel());
+
+    logFirebaseEvent('screen_view',
+        parameters: {'screen_name': 'Book_equipment'});
+    WidgetsBinding.instance.addPostFrameCallback((_) => setState(() {}));
+  }
+
+  @override
+  void dispose() {
+    _model.dispose();
+
+    super.dispose();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    if (isiOS) {
+      SystemChrome.setSystemUIOverlayStyle(
+        SystemUiOverlayStyle(
+          statusBarBrightness: Theme.of(context).brightness,
+          systemStatusBarContrastEnforced: true,
+        ),
+      );
+    }
+
+    context.watch<FFAppState>();
+
+    return GestureDetector(
+      onTap: () => _model.unfocusNode.canRequestFocus
+          ? FocusScope.of(context).requestFocus(_model.unfocusNode)
+          : FocusScope.of(context).unfocus(),
+      child: Scaffold(
+        key: scaffoldKey,
+        backgroundColor: FlutterFlowTheme.of(context).primaryBackground,
+        appBar: AppBar(
+          backgroundColor: FlutterFlowTheme.of(context).primary,
+          automaticallyImplyLeading: false,
+          leading: FlutterFlowIconButton(
+            borderColor: Colors.transparent,
+            borderRadius: 30.0,
+            borderWidth: 1.0,
+            buttonSize: 60.0,
+            icon: Icon(
+              Icons.arrow_back_rounded,
+              color: Colors.white,
+              size: 30.0,
+            ),
+            onPressed: () async {
+              logFirebaseEvent('BOOK_EQUIPMENT_arrow_back_rounded_ICN_ON');
+              logFirebaseEvent('IconButton_navigate_to');
+
+              context.pushNamed('Dashboard');
+            },
+          ),
+          title: GradientText(
+            'BOOK',
+            style: FlutterFlowTheme.of(context).titleLarge,
+            colors: [
+              FlutterFlowTheme.of(context).secondaryBackground,
+              FlutterFlowTheme.of(context).secondary
+            ],
+            gradientDirection: GradientDirection.ltr,
+            gradientType: GradientType.linear,
+          ),
+          actions: [],
+          centerTitle: true,
+          elevation: 2.0,
+        ),
+        body: SafeArea(
+          top: true,
+          child: Padding(
+            padding: EdgeInsetsDirectional.fromSTEB(16.0, 0.0, 16.0, 0.0),
+            child: SingleChildScrollView(
+              child: Column(
+                mainAxisSize: MainAxisSize.max,
+                crossAxisAlignment: CrossAxisAlignment.start,
+                children: [
+                  Text(
+                    'Book Farming Equipment ',
+                    style: FlutterFlowTheme.of(context).headlineLarge.override(
+                          fontFamily: 'Outfit',
+                          color: FlutterFlowTheme.of(context).primaryText,
+                        ),
+                  ),
+                  Padding(
+                    padding:
+                        EdgeInsetsDirectional.fromSTEB(0.0, 16.0, 0.0, 0.0),
+                    child: Text(
+                      'Select the equipment you need for your farming activities.',
+                      style: FlutterFlowTheme.of(context).bodyLarge.override(
+                            fontFamily: 'Plus Jakarta Sans',
+                            color: FlutterFlowTheme.of(context).secondaryText,
+                          ),
+                    ),
+                  ),
+                  Padding(
+                    padding:
+                        EdgeInsetsDirectional.fromSTEB(0.0, 0.0, 16.0, 0.0),
+                    child: Row(
+                      mainAxisSize: MainAxisSize.max,
+                      mainAxisAlignment: MainAxisAlignment.spaceBetween,
+                      children: [
+                        Padding(
+                          padding: EdgeInsetsDirectional.fromSTEB(
+                              0.0, 20.0, 0.0, 0.0),
+                          child: Text(
+                            'Available Equipment',
+                            style: FlutterFlowTheme.of(context)
+                                .titleMedium
+                                .override(
+                                  fontFamily: 'Plus Jakarta Sans',
+                                  color:
+                                      FlutterFlowTheme.of(context).primaryText,
+                                ),
+                          ),
+                        ),
+                        Padding(
+                          padding: EdgeInsetsDirectional.fromSTEB(
+                              0.0, 20.0, 0.0, 0.0),
+                          child: Text(
+                            'See all',
+                            style: FlutterFlowTheme.of(context)
+                                .bodyMedium
+                                .override(
+                                  fontFamily: 'Plus Jakarta Sans',
+                                  color: FlutterFlowTheme.of(context).primary,
+                                ),
+                          ),
+                        ),
+                      ],
+                    ),
+                  ),
+                  Padding(
+                    padding:
+                        EdgeInsetsDirectional.fromSTEB(0.0, 0.0, 16.0, 0.0),
+                    child: Column(
+                      mainAxisSize: MainAxisSize.max,
+                      children: [
+                        Padding(
+                          padding: EdgeInsetsDirectional.fromSTEB(
+                              0.0, 30.0, 8.0, 0.0),
+                          child: InkWell(
+                            splashColor: Colors.transparent,
+                            focusColor: Colors.transparent,
+                            hoverColor: Colors.transparent,
+                            highlightColor: Colors.transparent,
+                            onTap: () async {
+                              logFirebaseEvent(
+                                  'BOOK_EQUIPMENT_PAGE_Row_0x0iao0j_ON_TAP');
+                              logFirebaseEvent('Row_navigate_to');
+
+                              context.pushNamed('Nearby_equipment');
+                            },
+                            child: Row(
+                              mainAxisSize: MainAxisSize.max,
+                              children: [
+                                ClipRRect(
+                                  borderRadius: BorderRadius.circular(70.0),
+                                  child: Image.network(
+                                    'https://images.unsplash.com/photo-1609038023520-7efc516b9f74?w=512&h=512',
+                                    width: 70.0,
+                                    height: 70.0,
+                                    fit: BoxFit.cover,
+                                  ),
+                                ),
+                                Padding(
+                                  padding: EdgeInsetsDirectional.fromSTEB(
+                                      8.0, 0.0, 0.0, 12.0),
+                                  child: Column(
+                                    mainAxisSize: MainAxisSize.max,
+                                    crossAxisAlignment:
+                                        CrossAxisAlignment.start,
+                                    children: [
+                                      Text(
+                                        'Tractor',
+                                        style: FlutterFlowTheme.of(context)
+                                            .titleMedium
+                                            .override(
+                                              fontFamily: 'Plus Jakarta Sans',
+                                              color:
+                                                  FlutterFlowTheme.of(context)
+                                                      .primaryText,
+                                            ),
+                                      ),
+                                      Text(
+                                        'For plowing, tilling, disking, harrowing, planting.',
+                                        style: FlutterFlowTheme.of(context)
+                                            .labelMedium
+                                            .override(
+                                              fontFamily: 'Outfit',
+                                              color:
+                                                  FlutterFlowTheme.of(context)
+                                                      .secondaryText,
+                                            ),
+                                      ),
+                                    ],
+                                  ),
+                                ),
+                              ],
+                            ),
+                          ),
+                        ),
+                        Padding(
+                          padding: EdgeInsetsDirectional.fromSTEB(
+                              0.0, 20.0, 8.0, 0.0),
+                          child: InkWell(
+                            splashColor: Colors.transparent,
+                            focusColor: Colors.transparent,
+                            hoverColor: Colors.transparent,
+                            highlightColor: Colors.transparent,
+                            onTap: () async {
+                              logFirebaseEvent(
+                                  'BOOK_EQUIPMENT_PAGE_Row_x3dt3atr_ON_TAP');
+                              logFirebaseEvent('Row_navigate_to');
+
+                              context.pushNamed('Nearby_equipment');
+                            },
+                            child: Row(
+                              mainAxisSize: MainAxisSize.max,
+                              children: [
+                                ClipRRect(
+                                  borderRadius: BorderRadius.circular(70.0),
+                                  child: Image.network(
+                                    'https://images.unsplash.com/photo-1600474778368-58926eab858b?w=512&h=512',
+                                    width: 70.0,
+                                    height: 70.0,
+                                    fit: BoxFit.cover,
+                                  ),
+                                ),
+                                Padding(
+                                  padding: EdgeInsetsDirectional.fromSTEB(
+                                      8.0, 0.0, 0.0, 12.0),
+                                  child: Column(
+                                    mainAxisSize: MainAxisSize.max,
+                                    crossAxisAlignment:
+                                        CrossAxisAlignment.start,
+                                    children: [
+                                      Text(
+                                        'Harvester',
+                                        style: FlutterFlowTheme.of(context)
+                                            .titleMedium
+                                            .override(
+                                              fontFamily: 'Plus Jakarta Sans',
+                                              color:
+                                                  FlutterFlowTheme.of(context)
+                                                      .primaryText,
+                                            ),
+                                      ),
+                                      Text(
+                                        'For reaping, threshing, and winnowing.',
+                                        style: FlutterFlowTheme.of(context)
+                                            .labelMedium
+                                            .override(
+                                              fontFamily: 'Outfit',
+                                              color:
+                                                  FlutterFlowTheme.of(context)
+                                                      .secondaryText,
+                                            ),
+                                      ),
+                                    ],
+                                  ),
+                                ),
+                              ],
+                            ),
+                          ),
+                        ),
+                        Padding(
+                          padding: EdgeInsetsDirectional.fromSTEB(
+                              0.0, 20.0, 8.0, 0.0),
+                          child: InkWell(
+                            splashColor: Colors.transparent,
+                            focusColor: Colors.transparent,
+                            hoverColor: Colors.transparent,
+                            highlightColor: Colors.transparent,
+                            onTap: () async {
+                              logFirebaseEvent(
+                                  'BOOK_EQUIPMENT_PAGE_Row_1w61n8un_ON_TAP');
+                              logFirebaseEvent('Row_navigate_to');
+
+                              context.pushNamed('Nearby_equipment');
+                            },
+                            child: Row(
+                              mainAxisSize: MainAxisSize.max,
+                              children: [
+                                ClipRRect(
+                                  borderRadius: BorderRadius.circular(70.0),
+                                  child: Image.network(
+                                    'https://images.unsplash.com/photo-1565151903241-634c9c12f28e?w=512&h=512',
+                                    width: 70.0,
+                                    height: 70.0,
+                                    fit: BoxFit.cover,
+                                  ),
+                                ),
+                                Padding(
+                                  padding: EdgeInsetsDirectional.fromSTEB(
+                                      8.0, 0.0, 0.0, 12.0),
+                                  child: Column(
+                                    mainAxisSize: MainAxisSize.max,
+                                    crossAxisAlignment:
+                                        CrossAxisAlignment.start,
+                                    children: [
+                                      Text(
+                                        'Plow',
+                                        style: FlutterFlowTheme.of(context)
+                                            .titleMedium
+                                            .override(
+                                              fontFamily: 'Plus Jakarta Sans',
+                                              color:
+                                                  FlutterFlowTheme.of(context)
+                                                      .primaryText,
+                                            ),
+                                      ),
+                                      Text(
+                                        'For turning over the upper layer of soil.',
+                                        style: FlutterFlowTheme.of(context)
+                                            .labelMedium
+                                            .override(
+                                              fontFamily: 'Outfit',
+                                              color:
+                                                  FlutterFlowTheme.of(context)
+                                                      .secondaryText,
+                                            ),
+                                      ),
+                                    ],
+                                  ),
+                                ),
+                              ],
+                            ),
+                          ),
+                        ),
+                      ],
+                    ),
+                  ),
+                  Padding(
+                    padding:
+                        EdgeInsetsDirectional.fromSTEB(0.0, 0.0, 16.0, 0.0),
+                    child: Column(
+                      mainAxisSize: MainAxisSize.max,
+                      children: [
+                        Padding(
+                          padding: EdgeInsetsDirectional.fromSTEB(
+                              0.0, 20.0, 8.0, 0.0),
+                          child: Row(
+                            mainAxisSize: MainAxisSize.max,
+                            children: [
+                              ClipRRect(
+                                borderRadius: BorderRadius.circular(70.0),
+                                child: Image.asset(
+                                  'assets/images/WhatsApp_Image_2024-02-19_at_9.52.03_PM.jpeg',
+                                  width: 70.0,
+                                  height: 70.0,
+                                  fit: BoxFit.cover,
+                                ),
+                              ),
+                              Padding(
+                                padding: EdgeInsetsDirectional.fromSTEB(
+                                    8.0, 0.0, 0.0, 12.0),
+                                child: Column(
+                                  mainAxisSize: MainAxisSize.max,
+                                  crossAxisAlignment: CrossAxisAlignment.start,
+                                  children: [
+                                    Text(
+                                      'Threshers',
+                                      style: FlutterFlowTheme.of(context)
+                                          .titleMedium
+                                          .override(
+                                            fontFamily: 'Plus Jakarta Sans',
+                                            color: FlutterFlowTheme.of(context)
+                                                .primaryText,
+                                          ),
+                                    ),
+                                    Text(
+                                      'For thresh gains',
+                                      style: FlutterFlowTheme.of(context)
+                                          .labelMedium
+                                          .override(
+                                            fontFamily: 'Outfit',
+                                            color: FlutterFlowTheme.of(context)
+                                                .secondaryText,
+                                          ),
+                                    ),
+                                  ],
+                                ),
+                              ),
+                            ],
+                          ),
+                        ),
+                        Padding(
+                          padding: EdgeInsetsDirectional.fromSTEB(
+                              0.0, 20.0, 8.0, 0.0),
+                          child: Row(
+                            mainAxisSize: MainAxisSize.max,
+                            children: [
+                              ClipRRect(
+                                borderRadius: BorderRadius.circular(70.0),
+                                child: Image.asset(
+                                  'assets/images/WhatsApp_Image_2024-02-19_at_9.50.48_PM.jpeg',
+                                  width: 70.0,
+                                  height: 70.0,
+                                  fit: BoxFit.cover,
+                                ),
+                              ),
+                              Padding(
+                                padding: EdgeInsetsDirectional.fromSTEB(
+                                    8.0, 0.0, 0.0, 12.0),
+                                child: Column(
+                                  mainAxisSize: MainAxisSize.max,
+                                  crossAxisAlignment: CrossAxisAlignment.start,
+                                  children: [
+                                    Text(
+                                      'Rotavator',
+                                      style: FlutterFlowTheme.of(context)
+                                          .titleMedium
+                                          .override(
+                                            fontFamily: 'Plus Jakarta Sans',
+                                            color: FlutterFlowTheme.of(context)
+                                                .primaryText,
+                                          ),
+                                    ),
+                                    Text(
+                                      'Used to breakup,churn & Aerate the soil',
+                                      style: FlutterFlowTheme.of(context)
+                                          .labelMedium
+                                          .override(
+                                            fontFamily: 'Outfit',
+                                            color: FlutterFlowTheme.of(context)
+                                                .secondaryText,
+                                          ),
+                                    ),
+                                  ],
+                                ),
+                              ),
+                            ],
+                          ),
+                        ),
+                        Padding(
+                          padding: EdgeInsetsDirectional.fromSTEB(
+                              0.0, 20.0, 8.0, 0.0),
+                          child: Row(
+                            mainAxisSize: MainAxisSize.max,
+                            children: [
+                              ClipRRect(
+                                borderRadius: BorderRadius.circular(70.0),
+                                child: Image.asset(
+                                  'assets/images/WhatsApp_Image_2024-02-19_at_9.50.47_PM.jpeg',
+                                  width: 70.0,
+                                  height: 70.0,
+                                  fit: BoxFit.cover,
+                                ),
+                              ),
+                              Padding(
+                                padding: EdgeInsetsDirectional.fromSTEB(
+                                    8.0, 0.0, 0.0, 12.0),
+                                child: Column(
+                                  mainAxisSize: MainAxisSize.max,
+                                  crossAxisAlignment: CrossAxisAlignment.start,
+                                  children: [
+                                    Text(
+                                      'Cultivator',
+                                      style: FlutterFlowTheme.of(context)
+                                          .titleMedium
+                                          .override(
+                                            fontFamily: 'Plus Jakarta Sans',
+                                            color: FlutterFlowTheme.of(context)
+                                                .primaryText,
+                                          ),
+                                    ),
+                                    Text(
+                                      'Used to prepare Soil for Farming',
+                                      style: FlutterFlowTheme.of(context)
+                                          .labelMedium
+                                          .override(
+                                            fontFamily: 'Outfit',
+                                            color: FlutterFlowTheme.of(context)
+                                                .secondaryText,
+                                          ),
+                                    ),
+                                  ],
+                                ),
+                              ),
+                            ],
+                          ),
+                        ),
+                      ],
+                    ),
+                  ),
+                ],
+              ),
+            ),
+          ),
+        ),
+      ),
+    );
+  }
+}
Index: lib/flutter_flow/nav/serialization_util.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/flutter_flow/nav/serialization_util.dart b/lib/flutter_flow/nav/serialization_util.dart
new file mode 100644
--- /dev/null	(date 1708365759287)
+++ b/lib/flutter_flow/nav/serialization_util.dart	(date 1708365759287)
@@ -0,0 +1,286 @@
+import 'dart:convert';
+
+import 'package:flutter/material.dart';
+import 'package:from_css_color/from_css_color.dart';
+
+import '/backend/backend.dart';
+import '/backend/schema/structs/index.dart';
+
+import '../../flutter_flow/lat_lng.dart';
+import '../../flutter_flow/place.dart';
+import '../../flutter_flow/uploaded_file.dart';
+
+/// SERIALIZATION HELPERS
+
+String dateTimeRangeToString(DateTimeRange dateTimeRange) {
+  final startStr = dateTimeRange.start.millisecondsSinceEpoch.toString();
+  final endStr = dateTimeRange.end.millisecondsSinceEpoch.toString();
+  return '$startStr|$endStr';
+}
+
+String placeToString(FFPlace place) => jsonEncode({
+      'latLng': place.latLng.serialize(),
+      'name': place.name,
+      'address': place.address,
+      'city': place.city,
+      'state': place.state,
+      'country': place.country,
+      'zipCode': place.zipCode,
+    });
+
+String uploadedFileToString(FFUploadedFile uploadedFile) =>
+    uploadedFile.serialize();
+
+const _kDocIdDelimeter = '|';
+String _serializeDocumentReference(DocumentReference ref) {
+  final docIds = <String>[];
+  DocumentReference? currentRef = ref;
+  while (currentRef != null) {
+    docIds.add(currentRef.id);
+    // Get the parent document (catching any errors that arise).
+    currentRef = safeGet<DocumentReference?>(() => currentRef?.parent.parent);
+  }
+  // Reverse the list to get the correct ordering.
+  return docIds.reversed.join(_kDocIdDelimeter);
+}
+
+String? serializeParam(
+  dynamic param,
+  ParamType paramType, [
+  bool isList = false,
+]) {
+  try {
+    if (param == null) {
+      return null;
+    }
+    if (isList) {
+      final serializedValues = (param as Iterable)
+          .map((p) => serializeParam(p, paramType, false))
+          .where((p) => p != null)
+          .map((p) => p!)
+          .toList();
+      return json.encode(serializedValues);
+    }
+    switch (paramType) {
+      case ParamType.int:
+        return param.toString();
+      case ParamType.double:
+        return param.toString();
+      case ParamType.String:
+        return param;
+      case ParamType.bool:
+        return param ? 'true' : 'false';
+      case ParamType.DateTime:
+        return (param as DateTime).millisecondsSinceEpoch.toString();
+      case ParamType.DateTimeRange:
+        return dateTimeRangeToString(param as DateTimeRange);
+      case ParamType.LatLng:
+        return (param as LatLng).serialize();
+      case ParamType.Color:
+        return (param as Color).toCssString();
+      case ParamType.FFPlace:
+        return placeToString(param as FFPlace);
+      case ParamType.FFUploadedFile:
+        return uploadedFileToString(param as FFUploadedFile);
+      case ParamType.JSON:
+        return json.encode(param);
+      case ParamType.DocumentReference:
+        return _serializeDocumentReference(param as DocumentReference);
+      case ParamType.Document:
+        final reference = (param as FirestoreRecord).reference;
+        return _serializeDocumentReference(reference);
+
+      case ParamType.DataStruct:
+        return param is BaseStruct ? param.serialize() : null;
+
+      default:
+        return null;
+    }
+  } catch (e) {
+    print('Error serializing parameter: $e');
+    return null;
+  }
+}
+
+/// END SERIALIZATION HELPERS
+
+/// DESERIALIZATION HELPERS
+
+DateTimeRange? dateTimeRangeFromString(String dateTimeRangeStr) {
+  final pieces = dateTimeRangeStr.split('|');
+  if (pieces.length != 2) {
+    return null;
+  }
+  return DateTimeRange(
+    start: DateTime.fromMillisecondsSinceEpoch(int.parse(pieces.first)),
+    end: DateTime.fromMillisecondsSinceEpoch(int.parse(pieces.last)),
+  );
+}
+
+LatLng? latLngFromString(String? latLngStr) {
+  final pieces = latLngStr?.split(',');
+  if (pieces == null || pieces.length != 2) {
+    return null;
+  }
+  return LatLng(
+    double.parse(pieces.first.trim()),
+    double.parse(pieces.last.trim()),
+  );
+}
+
+FFPlace placeFromString(String placeStr) {
+  final serializedData = jsonDecode(placeStr) as Map<String, dynamic>;
+  final data = {
+    'latLng': serializedData.containsKey('latLng')
+        ? latLngFromString(serializedData['latLng'] as String)
+        : const LatLng(0.0, 0.0),
+    'name': serializedData['name'] ?? '',
+    'address': serializedData['address'] ?? '',
+    'city': serializedData['city'] ?? '',
+    'state': serializedData['state'] ?? '',
+    'country': serializedData['country'] ?? '',
+    'zipCode': serializedData['zipCode'] ?? '',
+  };
+  return FFPlace(
+    latLng: data['latLng'] as LatLng,
+    name: data['name'] as String,
+    address: data['address'] as String,
+    city: data['city'] as String,
+    state: data['state'] as String,
+    country: data['country'] as String,
+    zipCode: data['zipCode'] as String,
+  );
+}
+
+FFUploadedFile uploadedFileFromString(String uploadedFileStr) =>
+    FFUploadedFile.deserialize(uploadedFileStr);
+
+DocumentReference _deserializeDocumentReference(
+  String refStr,
+  List<String> collectionNamePath,
+) {
+  var path = '';
+  final docIds = refStr.split(_kDocIdDelimeter);
+  for (int i = 0; i < docIds.length && i < collectionNamePath.length; i++) {
+    path += '/${collectionNamePath[i]}/${docIds[i]}';
+  }
+  return FirebaseFirestore.instance.doc(path);
+}
+
+enum ParamType {
+  int,
+  double,
+  String,
+  bool,
+  DateTime,
+  DateTimeRange,
+  LatLng,
+  Color,
+  FFPlace,
+  FFUploadedFile,
+  JSON,
+  Document,
+  DocumentReference,
+  DataStruct,
+}
+
+dynamic deserializeParam<T>(
+  String? param,
+  ParamType paramType,
+  bool isList, {
+  List<String>? collectionNamePath,
+  StructBuilder<T>? structBuilder,
+}) {
+  try {
+    if (param == null) {
+      return null;
+    }
+    if (isList) {
+      final paramValues = json.decode(param);
+      if (paramValues is! Iterable || paramValues.isEmpty) {
+        return null;
+      }
+      return paramValues
+          .where((p) => p is String)
+          .map((p) => p as String)
+          .map((p) => deserializeParam<T>(
+                p,
+                paramType,
+                false,
+                collectionNamePath: collectionNamePath,
+                structBuilder: structBuilder,
+              ))
+          .where((p) => p != null)
+          .map((p) => p! as T)
+          .toList();
+    }
+    switch (paramType) {
+      case ParamType.int:
+        return int.tryParse(param);
+      case ParamType.double:
+        return double.tryParse(param);
+      case ParamType.String:
+        return param;
+      case ParamType.bool:
+        return param == 'true';
+      case ParamType.DateTime:
+        final milliseconds = int.tryParse(param);
+        return milliseconds != null
+            ? DateTime.fromMillisecondsSinceEpoch(milliseconds)
+            : null;
+      case ParamType.DateTimeRange:
+        return dateTimeRangeFromString(param);
+      case ParamType.LatLng:
+        return latLngFromString(param);
+      case ParamType.Color:
+        return fromCssColor(param);
+      case ParamType.FFPlace:
+        return placeFromString(param);
+      case ParamType.FFUploadedFile:
+        return uploadedFileFromString(param);
+      case ParamType.JSON:
+        return json.decode(param);
+      case ParamType.DocumentReference:
+        return _deserializeDocumentReference(param, collectionNamePath ?? []);
+
+      case ParamType.DataStruct:
+        final data = json.decode(param) as Map<String, dynamic>? ?? {};
+        return structBuilder != null ? structBuilder(data) : null;
+
+      default:
+        return null;
+    }
+  } catch (e) {
+    print('Error deserializing parameter: $e');
+    return null;
+  }
+}
+
+Future<dynamic> Function(String) getDoc(
+  List<String> collectionNamePath,
+  RecordBuilder recordBuilder,
+) {
+  return (String ids) => _deserializeDocumentReference(ids, collectionNamePath)
+      .get()
+      .then((s) => recordBuilder(s));
+}
+
+Future<List<T>> Function(String) getDocList<T>(
+  List<String> collectionNamePath,
+  RecordBuilder<T> recordBuilder,
+) {
+  return (String idsList) {
+    List<String> docIds = [];
+    try {
+      final ids = json.decode(idsList) as Iterable;
+      docIds = ids.where((d) => d is String).map((d) => d as String).toList();
+    } catch (_) {}
+    return Future.wait(
+      docIds.map(
+        (ids) => _deserializeDocumentReference(ids, collectionNamePath)
+            .get()
+            .then((s) => recordBuilder(s)),
+      ),
+    ).then((docs) => docs.where((d) => d != null).map((d) => d!).toList());
+  };
+}
Index: lib/nearby_equipment/nearby_equipment_model.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/nearby_equipment/nearby_equipment_model.dart b/lib/nearby_equipment/nearby_equipment_model.dart
new file mode 100644
--- /dev/null	(date 1708365758266)
+++ b/lib/nearby_equipment/nearby_equipment_model.dart	(date 1708365758266)
@@ -0,0 +1,36 @@
+import '/flutter_flow/flutter_flow_data_table.dart';
+import '/flutter_flow/flutter_flow_google_map.dart';
+import '/flutter_flow/flutter_flow_icon_button.dart';
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/flutter_flow_widgets.dart';
+import 'nearby_equipment_widget.dart' show NearbyEquipmentWidget;
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+
+class NearbyEquipmentModel extends FlutterFlowModel<NearbyEquipmentWidget> {
+  ///  State fields for stateful widgets in this page.
+
+  final unfocusNode = FocusNode();
+  // State field(s) for GoogleMap widget.
+  LatLng? googleMapsCenter;
+  final googleMapsController = Completer<GoogleMapController>();
+  // State field(s) for PaginatedDataTable widget.
+  final paginatedDataTableController = FlutterFlowDataTableController<String>();
+
+  /// Initialization and disposal methods.
+
+  @override
+  void initState(BuildContext context) {}
+
+  @override
+  void dispose() {
+    unfocusNode.dispose();
+  }
+
+  /// Action blocks are added here.
+
+  /// Additional helper methods are added here.
+}
Index: lib/book_equipment/book_equipment_model.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/book_equipment/book_equipment_model.dart b/lib/book_equipment/book_equipment_model.dart
new file mode 100644
--- /dev/null	(date 1708365758314)
+++ b/lib/book_equipment/book_equipment_model.dart	(date 1708365758314)
@@ -0,0 +1,30 @@
+import '/flutter_flow/flutter_flow_icon_button.dart';
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/flutter_flow_widgets.dart';
+import 'book_equipment_widget.dart' show BookEquipmentWidget;
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+import 'package:simple_gradient_text/simple_gradient_text.dart';
+
+class BookEquipmentModel extends FlutterFlowModel<BookEquipmentWidget> {
+  ///  State fields for stateful widgets in this page.
+
+  final unfocusNode = FocusNode();
+
+  /// Initialization and disposal methods.
+
+  @override
+  void initState(BuildContext context) {}
+
+  @override
+  void dispose() {
+    unfocusNode.dispose();
+  }
+
+  /// Action blocks are added here.
+
+  /// Additional helper methods are added here.
+}
Index: web/index.html
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/web/index.html b/web/index.html
new file mode 100644
--- /dev/null	(date 1708365756995)
+++ b/web/index.html	(date 1708365756995)
@@ -0,0 +1,81 @@
+<!DOCTYPE html>
+<html>
+<head>
+  <!--
+    If you are serving your web app in a path other than the root, change the
+    href value below to reflect the base path you are serving from.
+
+    The path provided below has to start and end with a slash "/" in order for
+    it to work correctly.
+
+    Fore more details:
+    * https://developer.mozilla.org/en-US/docs/Web/HTML/Element/base
+  -->
+  <base href="/">
+
+  <meta charset="UTF-8">
+  <meta content="IE=Edge" http-equiv="X-UA-Compatible">
+
+  <!-- iOS meta tags & icons -->
+  <meta name="apple-mobile-web-app-capable" content="yes">
+  <meta name="apple-mobile-web-app-status-bar-style" content="black">
+  <meta name="apple-mobile-web-app-title" content="MealPlanner">
+
+  
+
+  <meta name="robots" content="noindex" />
+
+  <!-- Favicon -->
+  <link rel="icon" type="image/png" href="favicon.png" />
+
+  <!-- Open Graph & SEO tags -->
+  <meta property="og:title" content="MealPlanner" />
+  <meta property="og:description" content="Built with FlutterFlow." />
+  <meta property="og:image" content="https://storage.googleapis.com/flutterflow-prod-hosting/og_splash_gradient.png" /> 
+  <meta name="twitter:title" content="MealPlanner" />
+  <meta name="twitter:description" content="Built with FlutterFlow." />
+  <meta name="twitter:image" content="https://storage.googleapis.com/flutterflow-prod-hosting/og_splash_gradient.png" />
+  <meta name="twitter:card" content="summary_large_image" />
+
+  <title> MealPlanner </title>
+  <meta name="description" content="Built with FlutterFlow." />
+    
+
+  <!-- Status Bar color in Safari browser (iOS) and PWA -->
+  <meta name="theme-color" media="(prefers-color-scheme: light)" content="#ffffff">
+  <meta name="theme-color" media="(prefers-color-scheme: dark)"  content="#1a1f24">
+
+  <link rel="manifest" href="manifest.json">
+  <script>
+    // The value below is injected by flutter build, do not touch.
+    var serviceWorkerVersion = null;
+  </script>
+  <!-- This script adds the flutter initialization JS code -->
+  <script src="flutter.js" defer></script>
+</head>
+<body>
+  
+  
+  
+  
+  
+  <script>
+    window.addEventListener('load', function (ev) {
+      // Download main.dart.js
+      _flutter.loader.loadEntrypoint({
+        entrypointUrl: 'main.dart.js',
+        serviceWorker: {
+          serviceWorkerUrl: 'flutter_service_worker.js?v=',
+          serviceWorkerVersion: serviceWorkerVersion,
+        },
+        onEntrypointLoaded: async function(engineInitializer) {
+          // Initialize the Flutter engine
+          let appRunner = await engineInitializer.initializeEngine({});
+          // Run the app
+          await appRunner.runApp();
+        }
+      });
+    });
+  </script>
+</body>
+</html>
Index: lib/nearby_equipment/nearby_equipment_widget.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/nearby_equipment/nearby_equipment_widget.dart b/lib/nearby_equipment/nearby_equipment_widget.dart
new file mode 100644
--- /dev/null	(date 1708365758298)
+++ b/lib/nearby_equipment/nearby_equipment_widget.dart	(date 1708365758298)
@@ -0,0 +1,250 @@
+import '/flutter_flow/flutter_flow_data_table.dart';
+import '/flutter_flow/flutter_flow_google_map.dart';
+import '/flutter_flow/flutter_flow_icon_button.dart';
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/flutter_flow_widgets.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+import 'nearby_equipment_model.dart';
+export 'nearby_equipment_model.dart';
+
+class NearbyEquipmentWidget extends StatefulWidget {
+  const NearbyEquipmentWidget({super.key});
+
+  @override
+  State<NearbyEquipmentWidget> createState() => _NearbyEquipmentWidgetState();
+}
+
+class _NearbyEquipmentWidgetState extends State<NearbyEquipmentWidget> {
+  late NearbyEquipmentModel _model;
+
+  final scaffoldKey = GlobalKey<ScaffoldState>();
+
+  @override
+  void initState() {
+    super.initState();
+    _model = createModel(context, () => NearbyEquipmentModel());
+
+    logFirebaseEvent('screen_view',
+        parameters: {'screen_name': 'Nearby_equipment'});
+    WidgetsBinding.instance.addPostFrameCallback((_) => setState(() {}));
+  }
+
+  @override
+  void dispose() {
+    _model.dispose();
+
+    super.dispose();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    if (isiOS) {
+      SystemChrome.setSystemUIOverlayStyle(
+        SystemUiOverlayStyle(
+          statusBarBrightness: Theme.of(context).brightness,
+          systemStatusBarContrastEnforced: true,
+        ),
+      );
+    }
+
+    context.watch<FFAppState>();
+
+    return GestureDetector(
+      onTap: () => _model.unfocusNode.canRequestFocus
+          ? FocusScope.of(context).requestFocus(_model.unfocusNode)
+          : FocusScope.of(context).unfocus(),
+      child: Scaffold(
+        key: scaffoldKey,
+        resizeToAvoidBottomInset: false,
+        backgroundColor: FlutterFlowTheme.of(context).primaryBackground,
+        appBar: PreferredSize(
+          preferredSize: Size.fromHeight(100.0),
+          child: AppBar(
+            backgroundColor: FlutterFlowTheme.of(context).primary,
+            automaticallyImplyLeading: false,
+            actions: [],
+            flexibleSpace: FlexibleSpaceBar(
+              title: Padding(
+                padding: EdgeInsetsDirectional.fromSTEB(0.0, 0.0, 0.0, 14.0),
+                child: Column(
+                  mainAxisSize: MainAxisSize.max,
+                  mainAxisAlignment: MainAxisAlignment.end,
+                  crossAxisAlignment: CrossAxisAlignment.start,
+                  children: [
+                    Padding(
+                      padding:
+                          EdgeInsetsDirectional.fromSTEB(0.0, 0.0, 0.0, 8.0),
+                      child: Row(
+                        mainAxisSize: MainAxisSize.max,
+                        children: [
+                          Padding(
+                            padding: EdgeInsetsDirectional.fromSTEB(
+                                12.0, 0.0, 0.0, 0.0),
+                            child: FlutterFlowIconButton(
+                              borderColor: Colors.transparent,
+                              borderRadius: 30.0,
+                              borderWidth: 1.0,
+                              buttonSize: 50.0,
+                              icon: Icon(
+                                Icons.arrow_back_rounded,
+                                color: Colors.white,
+                                size: 30.0,
+                              ),
+                              onPressed: () async {
+                                logFirebaseEvent(
+                                    'NEARBY_EQUIPMENT_arrow_back_rounded_ICN_');
+                                logFirebaseEvent('IconButton_navigate_to');
+
+                                context.pushNamed('Book_equipment');
+                              },
+                            ),
+                          ),
+                          Padding(
+                            padding: EdgeInsetsDirectional.fromSTEB(
+                                4.0, 0.0, 0.0, 0.0),
+                            child: Text(
+                              'Back',
+                              style: FlutterFlowTheme.of(context)
+                                  .headlineMedium
+                                  .override(
+                                    fontFamily: 'Outfit',
+                                    color: Colors.white,
+                                    fontSize: 16.0,
+                                  ),
+                            ),
+                          ),
+                        ],
+                      ),
+                    ),
+                    Text(
+                      'Locate & Book',
+                      style:
+                          FlutterFlowTheme.of(context).headlineMedium.override(
+                                fontFamily: 'Outfit',
+                                color: Colors.white,
+                                fontSize: 22.0,
+                              ),
+                    ),
+                  ],
+                ),
+              ),
+              centerTitle: true,
+              expandedTitleScale: 1.0,
+            ),
+            elevation: 2.0,
+          ),
+        ),
+        body: SafeArea(
+          top: true,
+          child: Column(
+            mainAxisSize: MainAxisSize.max,
+            children: [
+              Expanded(
+                child: FlutterFlowGoogleMap(
+                  controller: _model.googleMapsController,
+                  onCameraIdle: (latLng) => _model.googleMapsCenter = latLng,
+                  initialLocation: _model.googleMapsCenter ??=
+                      LatLng(13.106061, -59.613158),
+                  markerColor: GoogleMarkerColor.violet,
+                  mapType: MapType.normal,
+                  style: GoogleMapStyle.standard,
+                  initialZoom: 14.0,
+                  allowInteraction: true,
+                  allowZoom: true,
+                  showZoomControls: true,
+                  showLocation: true,
+                  showCompass: false,
+                  showMapToolbar: false,
+                  showTraffic: false,
+                  centerMapOnMarkerTap: true,
+                ),
+              ),
+              Expanded(
+                child: Builder(
+                  builder: (context) {
+                    final guide =
+                        FFAppState().userAllergens.toList().take(10).toList();
+                    return FlutterFlowDataTable<String>(
+                      controller: _model.paginatedDataTableController,
+                      data: guide,
+                      columnsBuilder: (onSortChanged) => [
+                        DataColumn2(
+                          label: DefaultTextStyle.merge(
+                            softWrap: true,
+                            child: Text(
+                              'Equipment',
+                              style: FlutterFlowTheme.of(context).labelLarge,
+                            ),
+                          ),
+                        ),
+                        DataColumn2(
+                          label: DefaultTextStyle.merge(
+                            softWrap: true,
+                            child: Text(
+                              'Hours',
+                              style: FlutterFlowTheme.of(context).labelLarge,
+                            ),
+                          ),
+                        ),
+                        DataColumn2(
+                          label: DefaultTextStyle.merge(
+                            softWrap: true,
+                            child: Text(
+                              'Cost',
+                              style: FlutterFlowTheme.of(context).labelLarge,
+                            ),
+                          ),
+                        ),
+                      ],
+                      dataRowBuilder:
+                          (guideItem, guideIndex, selected, onSelectChanged) =>
+                              DataRow(
+                        color: MaterialStateProperty.all(
+                          guideIndex % 2 == 0
+                              ? FlutterFlowTheme.of(context).secondaryBackground
+                              : FlutterFlowTheme.of(context).primaryBackground,
+                        ),
+                        cells: [
+                          Text(
+                            'Cultivator',
+                            style: FlutterFlowTheme.of(context).bodyMedium,
+                          ),
+                          Text(
+                            '2',
+                            style: FlutterFlowTheme.of(context).bodyMedium,
+                          ),
+                          Text(
+                            '300',
+                            style: FlutterFlowTheme.of(context).bodyMedium,
+                          ),
+                        ].map((c) => DataCell(c)).toList(),
+                      ),
+                      paginated: true,
+                      selectable: false,
+                      hidePaginator: false,
+                      showFirstLastButtons: false,
+                      headingRowHeight: 56.0,
+                      dataRowHeight: 48.0,
+                      columnSpacing: 20.0,
+                      headingRowColor: FlutterFlowTheme.of(context).alternate,
+                      borderRadius: BorderRadius.circular(8.0),
+                      addHorizontalDivider: true,
+                      horizontalDividerColor:
+                          FlutterFlowTheme.of(context).secondaryBackground,
+                      horizontalDividerThickness: 1.0,
+                      addVerticalDivider: false,
+                    );
+                  },
+                ),
+              ),
+            ],
+          ),
+        ),
+      ),
+    );
+  }
+}
Index: web/manifest.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/web/manifest.json b/web/manifest.json
new file mode 100644
--- /dev/null	(date 1708365757011)
+++ b/web/manifest.json	(date 1708365757011)
@@ -0,0 +1,23 @@
+{
+    "name": "KHETIHARII",
+    "short_name": "KHETIHARII",
+    "start_url": ".",
+    "display": "standalone",
+    "background_color": "#0175C2",
+    "theme_color": "#0175C2",
+    "description": "A new Flutter project.",
+    "orientation": "portrait-primary",
+    "prefer_related_applications": false,
+    "icons": [
+        {
+            "src": "icons/app_launcher_icon.png",
+            "sizes": "192x192",
+            "type": "image/png"
+        },
+        {
+            "src": "icons/app_launcher_icon.png",
+            "sizes": "512x512",
+            "type": "image/png"
+        }
+    ]
+}
Index: test/widget_test.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/test/widget_test.dart b/test/widget_test.dart
new file mode 100644
--- /dev/null	(date 1708365757090)
+++ b/test/widget_test.dart	(date 1708365757090)
@@ -0,0 +1,17 @@
+// This is a basic Flutter widget test.
+//
+// To perform an interaction with a widget in your test, use the WidgetTester
+// utility that Flutter provides. For example, you can send tap and scroll
+// gestures. You can also use WidgetTester to find child widgets in the widget
+// tree, read text, and verify that the values of widget properties are correct.
+
+import 'package:flutter_test/flutter_test.dart';
+
+import 'package:khetiharii/main.dart';
+
+void main() {
+  testWidgets('Counter increments smoke test', (WidgetTester tester) async {
+    // Build our app and trigger a frame.
+    await tester.pumpWidget(MyApp());
+  });
+}
Index: android/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/android/build.gradle b/android/build.gradle
new file mode 100644
--- /dev/null	(date 1708365999696)
+++ b/android/build.gradle	(date 1708365999696)
@@ -0,0 +1,33 @@
+buildscript {
+    ext.kotlin_version = '1.8.10'
+    repositories {
+        google()
+        mavenCentral()
+    }
+
+    dependencies {
+        classpath 'com.android.tools.build:gradle:7.3.0'
+        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
+        classpath 'com.google.gms:google-services:4.3.8'  // Google Services plugin
+        
+    }
+}
+
+allprojects {
+    repositories {
+        google()
+        mavenCentral()
+    }
+}
+
+rootProject.buildDir = '../build'
+subprojects {
+    project.buildDir = "${rootProject.buildDir}/${project.name}"
+}
+subprojects {
+    project.evaluationDependsOn(':app')
+}
+
+tasks.register("clean", Delete) {
+    delete rootProject.buildDir
+}
Index: android/gradle.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/android/gradle.properties b/android/gradle.properties
new file mode 100644
--- /dev/null	(date 1708365760842)
+++ b/android/gradle.properties	(date 1708365760842)
@@ -0,0 +1,4 @@
+org.gradle.jvmargs=-Xmx4608m
+android.useAndroidX=true
+android.enableJetifier=true
+android.enableR8=true
Index: android/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/android/.gitignore b/android/.gitignore
new file mode 100644
--- /dev/null	(date 1708365760889)
+++ b/android/.gitignore	(date 1708365760889)
@@ -0,0 +1,11 @@
+gradle-wrapper.jar
+/.gradle
+/captures/
+/gradlew
+/gradlew.bat
+/local.properties
+GeneratedPluginRegistrant.java
+
+# Remember to never publicly share your keystore.
+# See https://flutter.dev/docs/deployment/android#reference-the-keystore-from-the-app
+key.properties
Index: android/settings.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/android/settings.gradle b/android/settings.gradle
new file mode 100644
--- /dev/null	(date 1708365760873)
+++ b/android/settings.gradle	(date 1708365760873)
@@ -0,0 +1,25 @@
+include ':app'
+
+def localPropertiesFile = new File(rootProject.projectDir, "local.properties")
+def properties = new Properties()
+
+assert localPropertiesFile.exists()
+localPropertiesFile.withReader("UTF-8") { reader -> properties.load(reader) }
+
+def flutterSdkPath = properties.getProperty("flutter.sdk")
+assert flutterSdkPath != null, "flutter.sdk not set in local.properties"
+apply from: "$flutterSdkPath/packages/flutter_tools/gradle/app_plugin_loader.gradle"
+
+def flutterProjectRoot = rootProject.projectDir.parentFile.toPath()
+
+def plugins = new Properties()
+def pluginsFile = new File(flutterProjectRoot.toFile(), '.flutter-plugins')
+if (pluginsFile.exists()) {
+    pluginsFile.withReader('UTF-8') { reader -> plugins.load(reader) }
+}
+
+plugins.each { name, path ->
+    def pluginDirectory = flutterProjectRoot.resolve(path).resolve('android').toFile()
+    include ":$name"
+    project(":$name").projectDir = pluginDirectory
+}
\ No newline at end of file
Index: android/app/build.gradle
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/android/app/build.gradle b/android/app/build.gradle
new file mode 100644
--- /dev/null	(date 1708365760936)
+++ b/android/app/build.gradle	(date 1708365760936)
@@ -0,0 +1,82 @@
+def localProperties = new Properties()
+def localPropertiesFile = rootProject.file('local.properties')
+if (localPropertiesFile.exists()) {
+    localPropertiesFile.withReader('UTF-8') { reader ->
+        localProperties.load(reader)
+    }
+}
+
+def flutterRoot = localProperties.getProperty('flutter.sdk')
+if (flutterRoot == null) {
+    throw new GradleException("Flutter SDK not found. Define location with flutter.sdk in the local.properties file.")
+}
+
+def flutterVersionCode = localProperties.getProperty('flutter.versionCode')
+if (flutterVersionCode == null) {
+    flutterVersionCode = '1'
+}
+
+def flutterVersionName = localProperties.getProperty('flutter.versionName')
+if (flutterVersionName == null) {
+    flutterVersionName = '1.0'
+}
+
+apply plugin: 'com.android.application'
+apply plugin: 'kotlin-android'
+apply from: "$flutterRoot/packages/flutter_tools/gradle/flutter.gradle"
+apply plugin: 'com.google.gms.google-services'  // Google Services plugin
+
+
+def keystoreProperties = new Properties()
+def keystorePropertiesFile = rootProject.file('key.properties')
+if (keystorePropertiesFile.exists()) {
+    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
+}
+
+android {
+    compileSdkVersion 33
+    
+
+    sourceSets {
+        main.java.srcDirs += 'src/main/kotlin'
+    }
+
+    lintOptions {
+        disable 'InvalidPackage'
+        checkReleaseBuilds false
+    }
+
+    defaultConfig {
+        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
+        applicationId "com.khetiharii.app"
+        minSdkVersion 21
+        targetSdkVersion 33
+        versionCode flutterVersionCode.toInteger()
+        versionName flutterVersionName
+    }
+
+   signingConfigs {
+       release {
+           keyAlias keystoreProperties['keyAlias']
+           keyPassword keystoreProperties['keyPassword']
+           storeFile keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
+           storePassword keystoreProperties['storePassword']
+       }
+   }
+
+    buildTypes {
+        release {
+            // TODO: Add your own signing config for the release build.
+            // Signing with the debug keys for now, so `flutter run --release` works.
+            signingConfig signingConfigs.debug
+        }
+    }
+}
+
+flutter {
+    source '../..'
+}
+
+dependencies {
+    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
+}
Index: android/app/google-services.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/android/app/google-services.json b/android/app/google-services.json
new file mode 100644
--- /dev/null	(date 1708365760913)
+++ b/android/app/google-services.json	(date 1708365760913)
@@ -0,0 +1,48 @@
+{
+  "project_info": {
+    "project_number": "745837720735",
+    "project_id": "khetiharii",
+    "storage_bucket": "khetiharii.appspot.com"
+  },
+  "client": [
+    {
+      "client_info": {
+        "mobilesdk_app_id": "1:745837720735:android:47558ab87a185e3d735eaa",
+        "android_client_info": {
+          "package_name": "com.example.aihelper"
+        }
+      },
+      "oauth_client": [],
+      "api_key": [
+        {
+          "current_key": "AIzaSyCh8G4Z8EE_Rf78sPmK_K2xhCxreLirnRA"
+        }
+      ],
+      "services": {
+        "appinvite_service": {
+          "other_platform_oauth_client": []
+        }
+      }
+    },
+    {
+      "client_info": {
+        "mobilesdk_app_id": "1:745837720735:android:a18ce0248fd595f4735eaa",
+        "android_client_info": {
+          "package_name": "com.khetiharii.app"
+        }
+      },
+      "oauth_client": [],
+      "api_key": [
+        {
+          "current_key": "AIzaSyCh8G4Z8EE_Rf78sPmK_K2xhCxreLirnRA"
+        }
+      ],
+      "services": {
+        "appinvite_service": {
+          "other_platform_oauth_client": []
+        }
+      }
+    }
+  ],
+  "configuration_version": "1"
+}
\ No newline at end of file
Index: android/app/src/main/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/android/app/src/main/AndroidManifest.xml b/android/app/src/main/AndroidManifest.xml
new file mode 100644
--- /dev/null	(date 1708367500784)
+++ b/android/app/src/main/AndroidManifest.xml	(date 1708367500784)
@@ -0,0 +1,62 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.khetiharii.app"
+    xmlns:tools="http://schemas.android.com/tools">
+    <uses-permission android:name="android.permission.INTERNET"/>
+
+
+    <application
+        android:label="Khetiharii"
+        tools:replace="android:label"
+        android:icon="@mipmap/ic_launcher"
+        android:requestLegacyExternalStorage="true">
+
+        <activity
+            android:name=".MainActivity"
+            android:exported="true"
+            android:launchMode="singleTop"
+            android:theme="@style/LaunchTheme"
+            android:configChanges="orientation|keyboardHidden|keyboard|screenSize|smallestScreenSize|locale|layoutDirection|fontScale|screenLayout|density|uiMode"
+            android:hardwareAccelerated="true"
+            android:windowSoftInputMode="adjustResize">
+            <!-- Specifies an Android theme to apply to this Activity as soon as
+                 the Android process has started. This theme is visible to the user
+                 while the Flutter UI initializes. After that, this theme continues
+                 to determine the Window background behind the Flutter UI. -->
+            <meta-data
+              android:name="io.flutter.embedding.android.NormalTheme"
+              android:resource="@style/NormalTheme"
+              />
+            <!-- Displays an Android View that continues showing the launch screen
+                 Drawable until Flutter paints its first frame, then this splash
+                 screen fades out. A splash screen is useful to avoid any visual
+                 gap between the end of Android's launch screen and the painting of
+                 Flutter's first frame. -->
+            <meta-data
+              android:name="io.flutter.embedding.android.SplashScreenDrawable"
+              android:resource="@drawable/launch_background"
+              />
+            <intent-filter>
+                <action android:name="android.intent.action.MAIN"/>
+                <category android:name="android.intent.category.LAUNCHER"/>
+            </intent-filter>
+            <!-- Deep linking -->
+            <meta-data android:name="flutter_deeplinking_enabled" android:value="true" />
+            <intent-filter android:autoVerify="true">
+                <action android:name="android.intent.action.VIEW" />
+                <category android:name="android.intent.category.DEFAULT" />
+                <category android:name="android.intent.category.BROWSABLE" />
+                <data android:scheme="khetiharii" android:host="khetiharii.com" />
+            </intent-filter>
+
+        </activity>
+
+        <!-- Don't delete the meta-data below.
+             This is used by the Flutter tool to generate GeneratedPluginRegistrant.java -->
+        <meta-data
+            android:name="flutterEmbedding"
+            android:value="2" />
+        <meta-data android:name="com.google.android.geo.API_KEY" android:value="AIzaSyAe_kAXAl_v4J-g7IaekEnzTvhIQksW2JM"/>
+
+
+    </application>
+</manifest>
Index: analysis_options.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/analysis_options.yaml b/analysis_options.yaml
new file mode 100644
--- /dev/null	(date 1708365756870)
+++ b/analysis_options.yaml	(date 1708365756870)
@@ -0,0 +1,28 @@
+# This file configures the analyzer, which statically analyzes Dart code to
+# check for errors, warnings, and lints.
+#
+# The issues identified by the analyzer are surfaced in the UI of Dart-enabled
+# IDEs (https://dart.dev/tools#ides-and-editors). The analyzer can also be
+# invoked from the command line by running `flutter analyze`.
+
+# The following line activates a set of recommended lints for Flutter apps,
+# packages, and plugins designed to encourage good coding practices.
+include: package:flutter_lints/flutter.yaml
+
+linter:
+  # The lint rules applied to this project can be customized in the
+  # section below to disable rules from the `package:flutter_lints/flutter.yaml`
+  # included above or to enable additional rules. A list of all available lints
+  # and their documentation is published at https://dart.dev/lints.
+  #
+  # Instead of disabling a lint rule for the entire project in the
+  # section below, it can also be suppressed for a single line of code
+  # or a specific dart file by using the `// ignore: name_of_lint` and
+  # `// ignore_for_file: name_of_lint` syntax on the line or in the file
+  # producing the lint.
+  rules:
+    # avoid_print: false  # Uncomment to disable the `avoid_print` rule
+    # prefer_single_quotes: true  # Uncomment to enable the `prefer_single_quotes` rule
+
+# Additional information about this file can be found at
+# https://dart.dev/guides/language/analysis-options
\ No newline at end of file
Index: README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/README.md b/README.md
new file mode 100644
--- /dev/null	(date 1708365756904)
+++ b/README.md	(date 1708365756904)
@@ -0,0 +1,7 @@
+# KHETIHARII
+
+A new Flutter project.
+
+## Getting Started
+
+FlutterFlow projects are built to run on the Flutter _stable_ release.
Index: android/app/src/main/res/values/styles.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/android/app/src/main/res/values/styles.xml b/android/app/src/main/res/values/styles.xml
new file mode 100644
--- /dev/null	(date 1708365761234)
+++ b/android/app/src/main/res/values/styles.xml	(date 1708365761234)
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- Theme applied to the Android Window while the process is starting when the OS's Dark Mode setting is off -->
+    <style name="LaunchTheme" parent="@android:style/Theme.Light.NoTitleBar">
+        <!-- Show a splash screen on the activity. Automatically removed when
+             Flutter draws its first frame -->
+        <item name="android:windowBackground">@drawable/launch_background</item>
+    </style>
+    <!-- Theme applied to the Android Window as soon as the process has started.
+         This theme determines the color of the Android Window while your
+         Flutter UI initializes, as well as behind your Flutter UI while its
+         running.
+         
+         This Theme is only used starting with V2 of Flutter's Android embedding. -->
+    <style name="NormalTheme" parent="@android:style/Theme.Light.NoTitleBar">
+        <item name="android:windowBackground">?android:colorBackground</item>
+    </style>
+</resources>
Index: android/app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/android/app/src/main/res/values/strings.xml b/android/app/src/main/res/values/strings.xml
new file mode 100644
--- /dev/null	(date 1708367163671)
+++ b/android/app/src/main/res/values/strings.xml	(date 1708367163671)
@@ -0,0 +1,5 @@
+<?xml version="1.0" encoding="utf-8" ?>
+<resources>
+    <string name="app_name">Khetiharii</string>
+
+</resources>
\ No newline at end of file
Index: pubspec.yaml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pubspec.yaml b/pubspec.yaml
new file mode 100644
--- /dev/null	(date 1708365971131)
+++ b/pubspec.yaml	(date 1708365971131)
@@ -0,0 +1,167 @@
+name: khetiharii
+description: A new Flutter project.
+
+# The following line prevents the package from being accidentally published to
+# pub.dev using `pub publish`. This is preferred for private packages.
+publish_to: 'none' # Remove this line if you wish to publish to pub.dev
+
+# The following defines the version and build number for your application.
+# A version number is three numbers separated by dots, like 1.2.43
+# followed by an optional build number separated by a +.
+# Both the version and the builder number may be overridden in flutter
+# build by specifying --build-name and --build-number, respectively.
+# In Android, build-name is used as versionName while build-number used as versionCode.
+# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
+# In iOS, build-name is used as CFBundleShortVersionString while build-number used as CFBundleVersion.
+# Read more about iOS versioning at
+# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
+version: 1.0.0+1
+
+environment:
+  sdk: ">=3.0.0 <4.0.0"
+
+dependencies:
+  flutter:
+    sdk: flutter
+  flutter_localizations:
+    sdk: flutter
+  auto_size_text: 3.0.0
+  cached_network_image: 3.2.1
+  cloud_firestore: 4.13.1
+  cloud_firestore_platform_interface: 6.0.5
+  cloud_firestore_web: 3.8.5
+  collection: 1.18.0
+  data_table_2: 2.5.10
+  dropdown_button2: 2.3.9
+  easy_debounce: 2.0.1
+  firebase_analytics: 10.7.4
+  firebase_analytics_platform_interface: 3.8.4
+  firebase_analytics_web: 0.5.5+11
+  firebase_auth: 4.15.2
+  firebase_auth_platform_interface: 7.0.8
+  firebase_auth_web: 5.8.11
+  firebase_core: 2.24.2
+  firebase_core_platform_interface: 5.0.0
+  firebase_core_web: 2.10.0
+  firebase_performance: 0.9.3+8
+  firebase_performance_platform_interface: 0.1.4+16
+  firebase_performance_web: 0.1.4+16
+  flutter_animate: 4.1.1+1
+  flutter_cache_manager: 3.3.1
+  flutter_keyboard_visibility: 5.2.0
+  flutter_plugin_android_lifecycle: 2.0.17
+  flutter_rating_bar: 4.0.1
+  font_awesome_flutter: 10.6.0
+  from_css_color: 2.0.0
+  go_router: 7.1.1
+  google_fonts: 4.0.3
+  google_maps: 6.3.0
+  google_maps_flutter: 2.5.0
+  google_maps_flutter_platform_interface: 2.4.1
+  google_maps_flutter_web: 0.5.4+2
+  google_sign_in: 6.1.5
+  google_sign_in_android: 6.1.20
+  google_sign_in_ios: 5.6.4
+  google_sign_in_platform_interface: 2.4.2
+  google_sign_in_web: 0.12.1
+  intl: 0.18.1
+  json_path: 0.6.2
+  page_transition: 2.1.0
+  path_provider: 2.0.14
+  path_provider_android: 2.0.25
+  path_provider_foundation: 2.2.2
+  path_provider_platform_interface: 2.0.6
+  plugin_platform_interface: 2.1.6
+  provider: 6.0.5
+  rxdart: 0.27.7
+  share_plus: 7.2.1
+  shared_preferences: 2.2.2
+  shared_preferences_android: 2.2.1
+  shared_preferences_foundation: 2.3.4
+  shared_preferences_platform_interface: 2.3.1
+  shared_preferences_web: 2.2.1
+  sign_in_with_apple: 4.3.0
+  sign_in_with_apple_platform_interface: 1.0.0
+  sign_in_with_apple_web: 1.0.1
+  simple_gradient_text: 1.2.3
+  smooth_page_indicator: 1.1.0
+  sqflite: 2.2.6
+  stream_transform: 2.1.0
+  timeago: 3.2.2
+  url_launcher: 6.1.10
+  url_launcher_android: 6.0.27
+  url_launcher_ios: 6.1.4
+  url_launcher_platform_interface: 2.1.2
+
+
+  # The following adds the Cupertino Icons font to your application.
+  # Use with the CupertinoIcons class for iOS style icons.
+  cupertino_icons: ^1.0.0
+
+dev_dependencies:
+  flutter_launcher_icons: 0.13.1
+  flutter_lints: 3.0.0
+  image: 4.0.17
+  lints: 3.0.0
+
+  flutter_test:
+    sdk: flutter
+
+
+flutter_launcher_icons:
+  android: true
+  ios: true
+  remove_alpha_ios: true
+  web:
+    generate: true
+  image_path: 'assets/images/app_launcher_icon.png'
+
+
+# For information on the generic Dart part of this file, see the
+# following page: https://dart.dev/tools/pub/pubspec
+
+# The following section is specific to Flutter.
+flutter:
+
+  # The following line ensures that the Material Icons font is
+  # included with your application, so that you can use the icons in
+  # the material Icons class.
+  uses-material-design: true
+
+  # To add assets to your application, add an assets section, like this:
+  assets:
+    - assets/fonts/
+    - assets/images/
+    - assets/videos/
+    - assets/audios/
+    - assets/lottie_animations/
+    - assets/rive_animations/
+    - assets/pdfs/
+
+  
+  # An image asset can refer to one or more resolution-specific "variants", see
+  # https://flutter.dev/assets-and-images/#resolution-aware.
+
+  # For details regarding adding assets from package dependencies, see
+  # https://flutter.dev/assets-and-images/#from-packages
+
+  # To add custom fonts to your application, add a fonts section here,
+  # in this "flutter" section. Each entry in this list should have a
+  # "family" key with the font family name, and a "fonts" key with a
+  # list giving the asset and other descriptors for the font. For
+  # example:
+  # fonts:
+  #   - family: Schyler
+  #     fonts:
+  #       - asset: fonts/Schyler-Regular.ttf
+  #       - asset: fonts/Schyler-Italic.ttf
+  #         style: italic
+  #   - family: Trajan Pro
+  #     fonts:
+  #       - asset: fonts/TrajanPro.ttf
+  #       - asset: fonts/TrajanPro_Bold.ttf
+  #         weight: 700
+  #
+  # For details regarding fonts from package dependencies,
+  # see https://flutter.dev/custom-fonts/#from-packages
+
Index: android/app/src/main/res/values-v31/styles.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/android/app/src/main/res/values-v31/styles.xml b/android/app/src/main/res/values-v31/styles.xml
new file mode 100644
--- /dev/null	(date 1708365761281)
+++ b/android/app/src/main/res/values-v31/styles.xml	(date 1708365761281)
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- Theme applied to the Android Window while the process is starting when the OS's Dark Mode setting is off -->
+    <style name="LaunchTheme" parent="@android:style/Theme.Light.NoTitleBar">
+        <!-- Show a splash screen on the activity. Automatically removed when
+             Flutter draws its first frame -->
+        <item name="android:windowBackground">@drawable/launch_background</item>
+    </style>
+    <!-- Theme applied to the Android Window as soon as the process has started.
+         This theme determines the color of the Android Window while your
+         Flutter UI initializes, as well as behind your Flutter UI while its
+         running.
+         
+         This Theme is only used starting with V2 of Flutter's Android embedding. -->
+    <style name="NormalTheme" parent="@android:style/Theme.Light.NoTitleBar">
+        <item name="android:windowBackground">?android:colorBackground</item>
+    </style>
+</resources>
Index: ios/Podfile
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Podfile b/ios/Podfile
new file mode 100644
--- /dev/null	(date 1708365759334)
+++ b/ios/Podfile	(date 1708365759334)
@@ -0,0 +1,46 @@
+$FirebaseAnalyticsWithoutAdIdSupport = true
+# Uncomment this line to define a global platform for your project
+platform :ios, '13.0'
+
+# CocoaPods analytics sends network stats synchronously affecting flutter build latency.
+ENV['COCOAPODS_DISABLE_STATS'] = 'true'
+
+project 'Runner', {
+  'Debug' => :debug,
+  'Profile' => :release,
+  'Release' => :release,
+}
+
+def flutter_root
+  generated_xcode_build_settings_path = File.expand_path(File.join('..', 'Flutter', 'Generated.xcconfig'), __FILE__)
+  unless File.exist?(generated_xcode_build_settings_path)
+    raise "#{generated_xcode_build_settings_path} must exist. If you're running pod install manually, make sure flutter pub get is executed first"
+  end
+
+  File.foreach(generated_xcode_build_settings_path) do |line|
+    matches = line.match(/FLUTTER_ROOT\=(.*)/)
+    return matches[1].strip if matches
+  end
+  raise "FLUTTER_ROOT not found in #{generated_xcode_build_settings_path}. Try deleting Generated.xcconfig, then run flutter pub get"
+end
+
+require File.expand_path(File.join('packages', 'flutter_tools', 'bin', 'podhelper'), flutter_root)
+
+flutter_ios_podfile_setup
+
+target 'Runner' do
+  use_frameworks!
+  use_modular_headers!
+
+  flutter_install_all_ios_pods File.dirname(File.realpath(__FILE__))
+end
+
+post_install do |installer|
+  installer.pods_project.targets.each do |target|
+    flutter_additional_ios_build_settings(target)
+    target.build_configurations.each do |config|
+      config.build_settings.delete 'IPHONEOS_DEPLOYMENT_TARGET'
+      
+    end
+  end
+end
Index: android/app/src/main/res/drawable/launch_background.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/android/app/src/main/res/drawable/launch_background.xml b/android/app/src/main/res/drawable/launch_background.xml
new file mode 100644
--- /dev/null	(date 1708365761265)
+++ b/android/app/src/main/res/drawable/launch_background.xml	(date 1708365761265)
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Modify this file to customize your launch splash screen -->
+<layer-list xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:drawable="?android:colorBackground" />
+
+    <!-- You can insert your own image assets here -->
+    <!-- <item>
+        <bitmap
+            android:gravity="center"
+            android:src="@mipmap/launch_image" />
+    </item> -->
+</layer-list>
Index: ios/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/.gitignore b/ios/.gitignore
new file mode 100644
--- /dev/null	(date 1708365759365)
+++ b/ios/.gitignore	(date 1708365759365)
@@ -0,0 +1,33 @@
+*.mode1v3
+*.mode2v3
+*.moved-aside
+*.pbxuser
+*.perspectivev3
+**/*sync/
+.sconsign.dblite
+.tags*
+**/.vagrant/
+**/DerivedData/
+Icon?
+**/Pods/
+**/.symlinks/
+profile
+xcuserdata
+**/.generated/
+build/
+Flutter/App.framework
+Flutter/Flutter.framework
+Flutter/Flutter.podspec
+Flutter/Generated.xcconfig
+Flutter/app.flx
+Flutter/app.zip
+Flutter/flutter_assets/
+Flutter/flutter_export_environment.sh
+ServiceDefinitions.json
+Runner/GeneratedPluginRegistrant.*
+
+# Exceptions to above rules.
+!default.mode1v3
+!default.mode2v3
+!default.pbxuser
+!default.perspectivev3
Index: android/app/src/main/res/values-night/styles.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/android/app/src/main/res/values-night/styles.xml b/android/app/src/main/res/values-night/styles.xml
new file mode 100644
--- /dev/null	(date 1708365761344)
+++ b/android/app/src/main/res/values-night/styles.xml	(date 1708365761344)
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- Theme applied to the Android Window while the process is starting when the OS's Dark Mode setting is on -->
+    <style name="LaunchTheme" parent="@android:style/Theme.Light.NoTitleBar">
+        <!-- Show a splash screen on the activity. Automatically removed when
+             Flutter draws its first frame -->
+        <item name="android:windowBackground">@drawable/launch_background</item>
+    </style>
+    <!-- Theme applied to the Android Window as soon as the process has started.
+         This theme determines the color of the Android Window while your
+         Flutter UI initializes, as well as behind your Flutter UI while its
+         running.
+         
+         This Theme is only used starting with V2 of Flutter's Android embedding. -->
+    <style name="NormalTheme" parent="@android:style/Theme.Light.NoTitleBar">
+        <item name="android:windowBackground">?android:colorBackground</item>
+    </style>
+</resources>
Index: ios/Runner/Info.plist
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Runner/Info.plist b/ios/Runner/Info.plist
new file mode 100644
--- /dev/null	(date 1708365759789)
+++ b/ios/Runner/Info.plist	(date 1708365759789)
@@ -0,0 +1,81 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>CFBundleDevelopmentRegion</key>
+	<string>$(DEVELOPMENT_LANGUAGE)</string>
+	<key>CFBundleDisplayName</key>
+	<string>MealPlanner</string>
+	<key>CFBundleExecutable</key>
+	<string>$(EXECUTABLE_NAME)</string>
+	<key>CFBundleIdentifier</key>
+	<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
+	<key>CFBundleInfoDictionaryVersion</key>
+	<string>6.0</string>
+	<key>CFBundleName</key>
+	<string>KHETIHARII</string>
+	<key>CFBundlePackageType</key>
+	<string>APPL</string>
+
+	<key>CFBundleShortVersionString</key>
+	<string>$(FLUTTER_BUILD_NAME)</string>
+	<key>CFBundleSignature</key>
+	<string>????</string>
+	<key>CFBundleURLTypes</key>
+	<array>
+        <dict>
+            <key>CFBundleTypeRole</key>
+            <string>Editor</string>
+            <key>CFBundleURLSchemes</key>
+            <array>
+                <!--FF_REVERSED_CLIENT_ID-->
+                
+            </array>
+        </dict>
+
+        <dict>
+        <key>CFBundleTypeRole</key>
+        <string>Editor</string>
+        <key>CFBundleURLName</key>
+        <string>khetiharii.com</string>
+        <key>CFBundleURLSchemes</key>
+        <array>
+        <string>khetiharii</string>
+        </array>
+        </dict>
+    </array>
+    <key>FlutterDeepLinkingEnabled</key>
+    <true/>
+
+
+	<key>CFBundleVersion</key>
+	<string>$(FLUTTER_BUILD_NUMBER)</string>
+	<key>LSRequiresIPhoneOS</key>
+	<true/>
+
+
+
+
+
+	<key>UILaunchStoryboardName</key>
+	<string>LaunchScreen</string>
+	<key>UIMainStoryboardFile</key>
+	<string>Main</string>
+	<key>UISupportedInterfaceOrientations</key>
+	<array>
+		<string>UIInterfaceOrientationPortrait</string>
+		<string>UIInterfaceOrientationLandscapeLeft</string>
+		<string>UIInterfaceOrientationLandscapeRight</string>
+	</array>
+	<key>UISupportedInterfaceOrientations~ipad</key>
+	<array>
+		<string>UIInterfaceOrientationPortrait</string>
+		<string>UIInterfaceOrientationPortraitUpsideDown</string>
+		<string>UIInterfaceOrientationLandscapeLeft</string>
+		<string>UIInterfaceOrientationLandscapeRight</string>
+	</array>
+	<key>UIViewControllerBasedStatusBarAppearance</key>
+	<false/>
+
+</dict>
+</plist>
Index: ios/Runner/GoogleService-Info.plist
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Runner/GoogleService-Info.plist b/ios/Runner/GoogleService-Info.plist
new file mode 100644
--- /dev/null	(date 1708365759727)
+++ b/ios/Runner/GoogleService-Info.plist	(date 1708365759727)
@@ -0,0 +1,30 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>API_KEY</key>
+	<string>AIzaSyAwfUfWPyzueiAJMriQ1a-ycz6iUT1CrqI</string>
+	<key>GCM_SENDER_ID</key>
+	<string>745837720735</string>
+	<key>PLIST_VERSION</key>
+	<string>1</string>
+	<key>BUNDLE_ID</key>
+	<string>com.khetiharii.app</string>
+	<key>PROJECT_ID</key>
+	<string>khetiharii</string>
+	<key>STORAGE_BUCKET</key>
+	<string>khetiharii.appspot.com</string>
+	<key>IS_ADS_ENABLED</key>
+	<false></false>
+	<key>IS_ANALYTICS_ENABLED</key>
+	<false></false>
+	<key>IS_APPINVITE_ENABLED</key>
+	<true></true>
+	<key>IS_GCM_ENABLED</key>
+	<true></true>
+	<key>IS_SIGNIN_ENABLED</key>
+	<true></true>
+	<key>GOOGLE_APP_ID</key>
+	<string>1:745837720735:ios:51d85ac7ab1261c8735eaa</string>
+</dict>
+</plist>
\ No newline at end of file
Index: android/app/src/main/res/values-night-v31/styles.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/android/app/src/main/res/values-night-v31/styles.xml b/android/app/src/main/res/values-night-v31/styles.xml
new file mode 100644
--- /dev/null	(date 1708365761140)
+++ b/android/app/src/main/res/values-night-v31/styles.xml	(date 1708365761140)
@@ -0,0 +1,18 @@
+<?xml version="1.0" encoding="utf-8"?>
+<resources>
+    <!-- Theme applied to the Android Window while the process is starting when the OS's Dark Mode setting is on -->
+    <style name="LaunchTheme" parent="@android:style/Theme.Light.NoTitleBar">
+        <!-- Show a splash screen on the activity. Automatically removed when
+             Flutter draws its first frame -->
+        <item name="android:windowBackground">@drawable/launch_background</item>
+    </style>
+    <!-- Theme applied to the Android Window as soon as the process has started.
+         This theme determines the color of the Android Window while your
+         Flutter UI initializes, as well as behind your Flutter UI while its
+         running.
+         
+         This Theme is only used starting with V2 of Flutter's Android embedding. -->
+    <style name="NormalTheme" parent="@android:style/Theme.Light.NoTitleBar">
+        <item name="android:windowBackground">?android:colorBackground</item>
+    </style>
+</resources>
Index: ios/Runner/AppDelegate.swift
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Runner/AppDelegate.swift b/ios/Runner/AppDelegate.swift
new file mode 100644
--- /dev/null	(date 1708365759811)
+++ b/ios/Runner/AppDelegate.swift	(date 1708365759811)
@@ -0,0 +1,16 @@
+import UIKit
+
+import Flutter
+import GoogleMaps
+
+@UIApplicationMain
+@objc class AppDelegate: FlutterAppDelegate {
+  override func application(
+    _ application: UIApplication,
+    didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?
+  ) -> Bool {
+    GMSServices.provideAPIKey("AIzaSyAe_kAXAl_v4J-g7IaekEnzTvhIQksW2JM")
+    GeneratedPluginRegistrant.register(with: self)
+    return super.application(application, didFinishLaunchingWithOptions: launchOptions)
+  }
+}
Index: ios/Runner/Runner.entitlements
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Runner/Runner.entitlements b/ios/Runner/Runner.entitlements
new file mode 100644
--- /dev/null	(date 1708365759743)
+++ b/ios/Runner/Runner.entitlements	(date 1708365759743)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+</dict>
+</plist>
Index: ios/Runner/Base.lproj/Main.storyboard
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Runner/Base.lproj/Main.storyboard b/ios/Runner/Base.lproj/Main.storyboard
new file mode 100644
--- /dev/null	(date 1708365759837)
+++ b/ios/Runner/Base.lproj/Main.storyboard	(date 1708365759837)
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="10117" systemVersion="15F34" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" useTraitCollections="YES" initialViewController="BYZ-38-t0r">
+    <dependencies>
+        <deployment identifier="iOS"/>
+        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="10085"/>
+    </dependencies>
+    <scenes>
+        <!--Flutter View Controller-->
+        <scene sceneID="tne-QT-ifu">
+            <objects>
+                <viewController id="BYZ-38-t0r" customClass="FlutterViewController" sceneMemberID="viewController">
+                    <layoutGuides>
+                        <viewControllerLayoutGuide type="top" id="y3c-jy-aDJ"/>
+                        <viewControllerLayoutGuide type="bottom" id="wfy-db-euE"/>
+                    </layoutGuides>
+                    <view key="view" contentMode="scaleToFill" id="8bC-Xf-vdC">
+                        <rect key="frame" x="0.0" y="0.0" width="600" height="600"/>
+                        <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
+                        <color key="backgroundColor" white="1" alpha="1" colorSpace="custom" customColorSpace="calibratedWhite"/>
+                    </view>
+                </viewController>
+                <placeholder placeholderIdentifier="IBFirstResponder" id="dkx-z0-nzr" sceneMemberID="firstResponder"/>
+            </objects>
+        </scene>
+    </scenes>
+</document>
Index: ios/Runner/Runner-Bridging-Header.h
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Runner/Runner-Bridging-Header.h b/ios/Runner/Runner-Bridging-Header.h
new file mode 100644
--- /dev/null	(date 1708365759758)
+++ b/ios/Runner/Runner-Bridging-Header.h	(date 1708365759758)
@@ -0,0 +1,1 @@
+#import "GeneratedPluginRegistrant.h"
Index: android/app/src/debug/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/android/app/src/debug/AndroidManifest.xml b/android/app/src/debug/AndroidManifest.xml
new file mode 100644
--- /dev/null	(date 1708365760967)
+++ b/android/app/src/debug/AndroidManifest.xml	(date 1708365760967)
@@ -0,0 +1,7 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.khetiharii.app">
+    <!-- Flutter needs it to communicate with the running application
+         to allow setting breakpoints, to provide hot reload, etc.
+    -->
+    <uses-permission android:name="android.permission.INTERNET"/>
+</manifest>
Index: android/app/src/main/kotlin/com/example/my_project/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/android/app/src/main/kotlin/com/example/my_project/MainActivity.kt b/android/app/src/main/kotlin/com/example/my_project/MainActivity.kt
new file mode 100644
--- /dev/null	(date 1708365761093)
+++ b/android/app/src/main/kotlin/com/example/my_project/MainActivity.kt	(date 1708365761093)
@@ -0,0 +1,6 @@
+package com.khetiharii.app
+
+import io.flutter.embedding.android.FlutterActivity
+
+class MainActivity: FlutterActivity() {
+}
Index: ios/Runner/Base.lproj/LaunchScreen.storyboard
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Runner/Base.lproj/LaunchScreen.storyboard b/ios/Runner/Base.lproj/LaunchScreen.storyboard
new file mode 100644
--- /dev/null	(date 1708365759853)
+++ b/ios/Runner/Base.lproj/LaunchScreen.storyboard	(date 1708365759853)
@@ -0,0 +1,37 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<document type="com.apple.InterfaceBuilder3.CocoaTouch.Storyboard.XIB" version="3.0" toolsVersion="12121" systemVersion="16G29" targetRuntime="iOS.CocoaTouch" propertyAccessControl="none" useAutolayout="YES" launchScreen="YES" colorMatched="YES" initialViewController="01J-lp-oVM">
+    <dependencies>
+        <deployment identifier="iOS"/>
+        <plugIn identifier="com.apple.InterfaceBuilder.IBCocoaTouchPlugin" version="12089"/>
+    </dependencies>
+    <scenes>
+        <!--View Controller-->
+        <scene sceneID="EHf-IW-A2E">
+            <objects>
+                <viewController id="01J-lp-oVM" sceneMemberID="viewController">
+                    <layoutGuides>
+                        <viewControllerLayoutGuide type="top" id="Ydg-fD-yQy"/>
+                        <viewControllerLayoutGuide type="bottom" id="xbc-2k-c8Z"/>
+                    </layoutGuides>
+                    <view key="view" contentMode="scaleToFill" id="Ze5-6b-2t3">
+                        <autoresizingMask key="autoresizingMask" widthSizable="YES" heightSizable="YES"/>
+                        <subviews>
+                            <imageView opaque="NO" clipsSubviews="YES" multipleTouchEnabled="YES" contentMode="center" image="LaunchImage" translatesAutoresizingMaskIntoConstraints="NO" id="YRO-k0-Ey4">
+                            </imageView>
+                        </subviews>
+                        <color key="backgroundColor" red="1" green="1" blue="1" alpha="1" colorSpace="custom" customColorSpace="sRGB"/>
+                        <constraints>
+                            <constraint firstItem="YRO-k0-Ey4" firstAttribute="centerX" secondItem="Ze5-6b-2t3" secondAttribute="centerX" id="1a2-6s-vTC"/>
+                            <constraint firstItem="YRO-k0-Ey4" firstAttribute="centerY" secondItem="Ze5-6b-2t3" secondAttribute="centerY" id="4X2-HB-R7a"/>
+                        </constraints>
+                    </view>
+                </viewController>
+                <placeholder placeholderIdentifier="IBFirstResponder" id="iYj-Kq-Ea1" userLabel="First Responder" sceneMemberID="firstResponder"/>
+            </objects>
+            <point key="canvasLocation" x="53" y="375"/>
+        </scene>
+    </scenes>
+    <resources>
+        <image name="LaunchImage" width="168" height="185"/>
+    </resources>
+</document>
Index: android/app/src/profile/AndroidManifest.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/android/app/src/profile/AndroidManifest.xml b/android/app/src/profile/AndroidManifest.xml
new file mode 100644
--- /dev/null	(date 1708365760983)
+++ b/android/app/src/profile/AndroidManifest.xml	(date 1708365760983)
@@ -0,0 +1,7 @@
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="com.khetiharii.app">
+    <!-- Flutter needs it to communicate with the running application
+         to allow setting breakpoints, to provide hot reload, etc.
+    -->
+    <uses-permission android:name="android.permission.INTERNET"/>
+</manifest>
Index: firebase/firestore.indexes.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/firebase/firestore.indexes.json b/firebase/firestore.indexes.json
new file mode 100644
--- /dev/null	(date 1708365760261)
+++ b/firebase/firestore.indexes.json	(date 1708365760261)
@@ -0,0 +1,3 @@
+{
+  "indexes": []
+}
\ No newline at end of file
Index: android/gradle/wrapper/gradle-wrapper.properties
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>ISO-8859-1
===================================================================
diff --git a/android/gradle/wrapper/gradle-wrapper.properties b/android/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
--- /dev/null	(date 1708365761360)
+++ b/android/gradle/wrapper/gradle-wrapper.properties	(date 1708365761360)
@@ -0,0 +1,6 @@
+#Fri Jun 23 08:50:38 CEST 2017
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-7.5-all.zip
Index: firebase/storage.rules
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/firebase/storage.rules b/firebase/storage.rules
new file mode 100644
--- /dev/null	(date 1708365760214)
+++ b/firebase/storage.rules	(date 1708365760214)
@@ -0,0 +1,12 @@
+rules_version = '2';
+service firebase.storage {
+  match /b/{bucket}/o {
+    match /{allPaths=**} {
+      allow read, write: if false;
+    }
+    match /users/{userId}/{allPaths=**} {
+      allow read: if true;
+      allow write: if request.auth.uid == userId;
+    }
+  }
+}
\ No newline at end of file
Index: firebase/firebase.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/firebase/firebase.json b/firebase/firebase.json
new file mode 100644
--- /dev/null	(date 1708365760276)
+++ b/firebase/firebase.json	(date 1708365760276)
@@ -0,0 +1,21 @@
+{
+  "firestore": {
+    "rules": "firestore.rules",
+    "indexes": "firestore.indexes.json"
+  },
+  "functions": [
+    {
+      "source": "functions",
+      "codebase": "functions"
+    }
+  ],
+  "storage": [
+    {
+      "rules": "storage.rules"
+    }
+  ],
+  "hosting": {
+    "public": "public",
+    "ignore": ["firebase.json", "**/.*", "**/node_modules/**"]
+  }
+}
Index: firebase/firestore.rules
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/firebase/firestore.rules b/firebase/firestore.rules
new file mode 100644
--- /dev/null	(date 1708365760245)
+++ b/firebase/firestore.rules	(date 1708365760245)
@@ -0,0 +1,51 @@
+rules_version = '2';
+service cloud.firestore {
+  match /databases/{database}/documents {
+    match /users/{document} {
+      allow create: if request.auth.uid == document;
+      allow read: if request.auth.uid == document;
+      allow write: if request.auth.uid == document;
+      allow delete: if false;
+    }
+
+    match /meals/{document} {
+      allow create: if false;
+      allow read: if request.auth != null;
+      allow write: if request.auth != null;
+      allow delete: if false;
+    }
+
+    match /onboarding_options/{document} {
+      allow create: if false;
+      allow read: if true;
+      allow write: if false;
+      allow delete: if false;
+    }
+
+    match /company_information/{document} {
+      allow create: if false;
+      allow read: if request.auth != null;
+      allow write: if false;
+      allow delete: if false;
+    }
+
+    match /feedback/{document} {
+      allow create: if request.auth != null;
+      allow read: if false;
+      allow write: if false;
+      allow delete: if false;
+    }
+
+    match /meals/{parent}/categoryPage/{document} {
+      allow create: if true;
+      allow read: if true;
+      allow write: if false;
+      allow delete: if false;
+    }
+
+    match /{path=**}/categoryPage/{document} {
+      allow read: if true;
+    }
+
+  }
+}
Index: firebase/functions/package.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/firebase/functions/package.json b/firebase/functions/package.json
new file mode 100644
--- /dev/null	(date 1708365760355)
+++ b/firebase/functions/package.json	(date 1708365760355)
@@ -0,0 +1,31 @@
+{
+  "name": "cloud-functions",
+  "description": "Firebase Cloud Functions",
+  "dependencies": {
+    "firebase-admin": "^11.11.0",
+    "firebase-functions": "^4.4.1",
+    "braintree": "^3.6.0",
+    "@mux/mux-node": "^7.3.3",
+    "stripe": "^8.0.1",
+    "axios": "1.6.0",
+    "razorpay": "^2.8.4",
+    "qs": "^6.7.0",
+    "@onesignal/node-onesignal": "^2.0.1-beta2"
+  },
+  "devDependencies": {
+    "eslint": "^6.8.0",
+    "eslint-plugin-promise": "^4.2.1"
+  },
+  "scripts": {
+    "lint": "./node_modules/.bin/eslint --max-warnings=0 .",
+    "serve": "firebase -P khetiharii emulators:start --only functions",
+    "shell": "firebase -P khetiharii functions:shell",
+    "start": "npm run shell",
+    "logs": "firebase -P khetiharii functions:log",
+    "compile": "cp ../../tsconfig.template.json ./tsconfig-compile.json && tsc --project tsconfig-compile.json"
+  },
+  "engines": {
+    "node": "18"
+  },
+  "private": true
+}
Index: .idea/libraries/Flutter_Plugins.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Flutter_Plugins.xml b/.idea/libraries/Flutter_Plugins.xml
new file mode 100644
--- /dev/null	(date 1708366341432)
+++ b/.idea/libraries/Flutter_Plugins.xml	(date 1708366341432)
@@ -0,0 +1,50 @@
+<component name="libraryTable">
+  <library name="Flutter Plugins" type="FlutterPluginsLibraryType">
+    <CLASSES>
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/shared_preferences_windows-2.3.2" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/sign_in_with_apple_web-1.0.1" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/firebase_performance-0.9.3+8" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/flutter_keyboard_visibility_web-2.0.0" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/firebase_core_web-2.10.0" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/firebase_core-2.24.2" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/url_launcher_android-6.0.27" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/path_provider-2.0.14" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/firebase_performance_web-0.1.4+16" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/share_plus-7.2.1" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/url_launcher_linux-3.0.6" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/cloud_firestore-4.13.1" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/url_launcher-6.1.10" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/firebase_auth-4.15.2" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/google_maps_flutter-2.5.0" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/flutter_keyboard_visibility-5.2.0" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/sqflite-2.2.6" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/url_launcher_macos-3.0.7" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/google_maps_flutter_ios-2.4.2" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/google_maps_flutter_android-2.6.2" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/firebase_analytics-10.7.4" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/cloud_firestore_web-3.8.5" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/google_sign_in_android-6.1.20" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/google_maps_flutter_web-0.5.4+2" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/path_provider_android-2.0.25" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/url_launcher_web-2.1.0" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/google_sign_in-6.1.5" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/shared_preferences_android-2.2.1" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/google_sign_in_web-0.12.1" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/sign_in_with_apple-4.3.0" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/firebase_auth_web-5.8.11" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/firebase_analytics_web-0.5.5+11" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/shared_preferences_foundation-2.3.4" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/shared_preferences-2.2.2" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/shared_preferences_linux-2.3.2" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/path_provider_foundation-2.2.2" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/url_launcher_windows-3.0.8" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/google_sign_in_ios-5.6.4" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/url_launcher_ios-6.1.4" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/path_provider_linux-2.1.11" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/shared_preferences_web-2.2.1" />
+      <root url="file://$USER_HOME$/AppData/Local/Pub/Cache/hosted/pub.dev/path_provider_windows-2.1.7" />
+    </CLASSES>
+    <JAVADOC />
+    <SOURCES />
+  </library>
+</component>
\ No newline at end of file
Index: firebase/functions/api_manager.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/firebase/functions/api_manager.js b/firebase/functions/api_manager.js
new file mode 100644
--- /dev/null	(date 1708365760312)
+++ b/firebase/functions/api_manager.js	(date 1708365760312)
@@ -0,0 +1,77 @@
+const axios = require("axios").default;
+const qs = require("qs");
+
+/// Helper functions to route to the appropriate API Call.
+
+async function makeApiCall(context, data) {
+  var callName = data["callName"] || "";
+  var variables = data["variables"] || {};
+
+  const callMap = {};
+
+  if (!(callName in callMap)) {
+    return {
+      statusCode: 400,
+      error: `API Call "${callName}" not defined as private API.`,
+    };
+  }
+
+  var apiCall = callMap[callName];
+  var response = await apiCall(context, variables);
+  return response;
+}
+
+async function makeApiRequest({
+  method,
+  url,
+  headers,
+  params,
+  body,
+  returnBody,
+}) {
+  return axios
+    .request({
+      method: method,
+      url: url,
+      headers: headers,
+      params: params,
+      ...(body && { data: body }),
+    })
+    .then((response) => {
+      return {
+        statusCode: response.status,
+        headers: response.headers,
+        ...(returnBody && { body: response.data }),
+      };
+    })
+    .catch(function (error) {
+      return {
+        statusCode: error.response.status,
+        headers: error.response.headers,
+        ...(returnBody && { body: error.response.data }),
+        error: error.message,
+      };
+    });
+}
+
+const _unauthenticatedResponse = {
+  statusCode: 401,
+  headers: {},
+  error: "API call requires authentication",
+};
+
+function createBody({ headers, params, body, bodyType }) {
+  switch (bodyType) {
+    case "JSON":
+      headers["Content-Type"] = "application/json";
+      return body;
+    case "TEXT":
+      headers["Content-Type"] = "text/plain";
+      return body;
+    case "X_WWW_FORM_URL_ENCODED":
+      headers["Content-Type"] = "application/x-www-form-urlencoded";
+      return qs.stringify(params);
+  }
+}
+
+module.exports = { makeApiCall };
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
new file mode 100644
--- /dev/null	(date 1708366341498)
+++ b/.idea/misc.xml	(date 1708366341498)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectType">
+    <option name="id" value="io.flutter" />
+  </component>
+</project>
\ No newline at end of file
Index: firebase/functions/index.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/firebase/functions/index.js b/firebase/functions/index.js
new file mode 100644
--- /dev/null	(date 1708365760324)
+++ b/firebase/functions/index.js	(date 1708365760324)
@@ -0,0 +1,3 @@
+const functions = require("firebase-functions");
+const admin = require("firebase-admin");
+admin.initializeApp();
Index: ios/Runner/Assets.xcassets/AppIcon.appiconset/Contents.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Runner/Assets.xcassets/AppIcon.appiconset/Contents.json b/ios/Runner/Assets.xcassets/AppIcon.appiconset/Contents.json
new file mode 100644
--- /dev/null	(date 1708365760111)
+++ b/ios/Runner/Assets.xcassets/AppIcon.appiconset/Contents.json	(date 1708365760111)
@@ -0,0 +1,122 @@
+{
+  "images" : [
+    {
+      "size" : "20x20",
+      "idiom" : "iphone",
+      "filename" : "Icon-App-20x20@2x.png",
+      "scale" : "2x"
+    },
+    {
+      "size" : "20x20",
+      "idiom" : "iphone",
+      "filename" : "Icon-App-20x20@3x.png",
+      "scale" : "3x"
+    },
+    {
+      "size" : "29x29",
+      "idiom" : "iphone",
+      "filename" : "Icon-App-29x29@1x.png",
+      "scale" : "1x"
+    },
+    {
+      "size" : "29x29",
+      "idiom" : "iphone",
+      "filename" : "Icon-App-29x29@2x.png",
+      "scale" : "2x"
+    },
+    {
+      "size" : "29x29",
+      "idiom" : "iphone",
+      "filename" : "Icon-App-29x29@3x.png",
+      "scale" : "3x"
+    },
+    {
+      "size" : "40x40",
+      "idiom" : "iphone",
+      "filename" : "Icon-App-40x40@2x.png",
+      "scale" : "2x"
+    },
+    {
+      "size" : "40x40",
+      "idiom" : "iphone",
+      "filename" : "Icon-App-40x40@3x.png",
+      "scale" : "3x"
+    },
+    {
+      "size" : "60x60",
+      "idiom" : "iphone",
+      "filename" : "Icon-App-60x60@2x.png",
+      "scale" : "2x"
+    },
+    {
+      "size" : "60x60",
+      "idiom" : "iphone",
+      "filename" : "Icon-App-60x60@3x.png",
+      "scale" : "3x"
+    },
+    {
+      "size" : "20x20",
+      "idiom" : "ipad",
+      "filename" : "Icon-App-20x20@1x.png",
+      "scale" : "1x"
+    },
+    {
+      "size" : "20x20",
+      "idiom" : "ipad",
+      "filename" : "Icon-App-20x20@2x.png",
+      "scale" : "2x"
+    },
+    {
+      "size" : "29x29",
+      "idiom" : "ipad",
+      "filename" : "Icon-App-29x29@1x.png",
+      "scale" : "1x"
+    },
+    {
+      "size" : "29x29",
+      "idiom" : "ipad",
+      "filename" : "Icon-App-29x29@2x.png",
+      "scale" : "2x"
+    },
+    {
+      "size" : "40x40",
+      "idiom" : "ipad",
+      "filename" : "Icon-App-40x40@1x.png",
+      "scale" : "1x"
+    },
+    {
+      "size" : "40x40",
+      "idiom" : "ipad",
+      "filename" : "Icon-App-40x40@2x.png",
+      "scale" : "2x"
+    },
+    {
+      "size" : "76x76",
+      "idiom" : "ipad",
+      "filename" : "Icon-App-76x76@1x.png",
+      "scale" : "1x"
+    },
+    {
+      "size" : "76x76",
+      "idiom" : "ipad",
+      "filename" : "Icon-App-76x76@2x.png",
+      "scale" : "2x"
+    },
+    {
+      "size" : "83.5x83.5",
+      "idiom" : "ipad",
+      "filename" : "Icon-App-83.5x83.5@2x.png",
+      "scale" : "2x"
+    },
+    {
+      "size" : "1024x1024",
+      "idiom" : "ios-marketing",
+      "filename" : "Icon-App-1024x1024@1x.png",
+      "scale" : "1x"
+    }
+  ],
+  "info" : {
+    "version" : 1,
+    "author" : "xcode"
+  }
+}
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1708365784875)
+++ b/.idea/modules.xml	(date 1708365784875)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/khetiharii.iml" filepath="$PROJECT_DIR$/.idea/khetiharii.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/khetiharii.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/khetiharii.iml b/.idea/khetiharii.iml
new file mode 100644
--- /dev/null	(date 1708366341318)
+++ b/.idea/khetiharii.iml	(date 1708366341318)
@@ -0,0 +1,15 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" inherit-compiler-output="true">
+    <exclude-output />
+    <content url="file://$MODULE_DIR$">
+      <excludeFolder url="file://$MODULE_DIR$/.dart_tool" />
+      <excludeFolder url="file://$MODULE_DIR$/.pub" />
+      <excludeFolder url="file://$MODULE_DIR$/build" />
+    </content>
+    <orderEntry type="inheritedJdk" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="library" name="Dart SDK" level="project" />
+    <orderEntry type="library" name="Flutter Plugins" level="project" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/libraries/Dart_SDK.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/libraries/Dart_SDK.xml b/.idea/libraries/Dart_SDK.xml
new file mode 100644
--- /dev/null	(date 1708365784890)
+++ b/.idea/libraries/Dart_SDK.xml	(date 1708365784890)
@@ -0,0 +1,29 @@
+<component name="libraryTable">
+  <library name="Dart SDK">
+    <CLASSES>
+      <root url="file://$PROJECT_DIR$/../dev/flutter/bin/cache/dart-sdk/lib/async" />
+      <root url="file://$PROJECT_DIR$/../dev/flutter/bin/cache/dart-sdk/lib/cli" />
+      <root url="file://$PROJECT_DIR$/../dev/flutter/bin/cache/dart-sdk/lib/collection" />
+      <root url="file://$PROJECT_DIR$/../dev/flutter/bin/cache/dart-sdk/lib/convert" />
+      <root url="file://$PROJECT_DIR$/../dev/flutter/bin/cache/dart-sdk/lib/core" />
+      <root url="file://$PROJECT_DIR$/../dev/flutter/bin/cache/dart-sdk/lib/developer" />
+      <root url="file://$PROJECT_DIR$/../dev/flutter/bin/cache/dart-sdk/lib/ffi" />
+      <root url="file://$PROJECT_DIR$/../dev/flutter/bin/cache/dart-sdk/lib/html" />
+      <root url="file://$PROJECT_DIR$/../dev/flutter/bin/cache/dart-sdk/lib/indexed_db" />
+      <root url="file://$PROJECT_DIR$/../dev/flutter/bin/cache/dart-sdk/lib/io" />
+      <root url="file://$PROJECT_DIR$/../dev/flutter/bin/cache/dart-sdk/lib/isolate" />
+      <root url="file://$PROJECT_DIR$/../dev/flutter/bin/cache/dart-sdk/lib/js" />
+      <root url="file://$PROJECT_DIR$/../dev/flutter/bin/cache/dart-sdk/lib/js_interop" />
+      <root url="file://$PROJECT_DIR$/../dev/flutter/bin/cache/dart-sdk/lib/js_interop_unsafe" />
+      <root url="file://$PROJECT_DIR$/../dev/flutter/bin/cache/dart-sdk/lib/js_util" />
+      <root url="file://$PROJECT_DIR$/../dev/flutter/bin/cache/dart-sdk/lib/math" />
+      <root url="file://$PROJECT_DIR$/../dev/flutter/bin/cache/dart-sdk/lib/mirrors" />
+      <root url="file://$PROJECT_DIR$/../dev/flutter/bin/cache/dart-sdk/lib/svg" />
+      <root url="file://$PROJECT_DIR$/../dev/flutter/bin/cache/dart-sdk/lib/typed_data" />
+      <root url="file://$PROJECT_DIR$/../dev/flutter/bin/cache/dart-sdk/lib/web_audio" />
+      <root url="file://$PROJECT_DIR$/../dev/flutter/bin/cache/dart-sdk/lib/web_gl" />
+    </CLASSES>
+    <JAVADOC />
+    <SOURCES />
+  </library>
+</component>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
new file mode 100644
--- /dev/null	(date 1708365790027)
+++ b/.idea/.gitignore	(date 1708365790027)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md b/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md
new file mode 100644
--- /dev/null	(date 1708365759931)
+++ b/ios/Runner/Assets.xcassets/LaunchImage.imageset/README.md	(date 1708365759931)
@@ -0,0 +1,5 @@
+# Launch Screen Assets
+
+You can customize the launch screen with your own desired assets by replacing the image files in this directory.
+
+You can also do it by opening your Flutter project's Xcode project with `open ios/Runner.xcworkspace`, selecting `Runner/Assets.xcassets` in the Project Navigator and dropping in the desired images.
\ No newline at end of file
Index: ios/Runner/Assets.xcassets/LaunchImage.imageset/Contents.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Runner/Assets.xcassets/LaunchImage.imageset/Contents.json b/ios/Runner/Assets.xcassets/LaunchImage.imageset/Contents.json
new file mode 100644
--- /dev/null	(date 1708365759915)
+++ b/ios/Runner/Assets.xcassets/LaunchImage.imageset/Contents.json	(date 1708365759915)
@@ -0,0 +1,23 @@
+{
+  "images" : [
+    {
+      "idiom" : "universal",
+      "filename" : "LaunchImage.png",
+      "scale" : "1x"
+    },
+    {
+      "idiom" : "universal",
+      "filename" : "LaunchImage@2x.png",
+      "scale" : "2x"
+    },
+    {
+      "idiom" : "universal",
+      "filename" : "LaunchImage@3x.png",
+      "scale" : "3x"
+    }
+  ],
+  "info" : {
+    "version" : 1,
+    "author" : "xcode"
+  }
+}
Index: .flutter-plugins
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.flutter-plugins b/.flutter-plugins
new file mode 100644
--- /dev/null	(date 1708369237689)
+++ b/.flutter-plugins	(date 1708369237689)
@@ -0,0 +1,44 @@
+# This is a generated file; do not edit or check into version control.
+cloud_firestore=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\cloud_firestore-4.13.1\\
+cloud_firestore_web=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\cloud_firestore_web-3.8.5\\
+firebase_analytics=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\firebase_analytics-10.7.4\\
+firebase_analytics_web=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\firebase_analytics_web-0.5.5+11\\
+firebase_auth=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\firebase_auth-4.15.2\\
+firebase_auth_web=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\firebase_auth_web-5.8.11\\
+firebase_core=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\firebase_core-2.24.2\\
+firebase_core_web=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\firebase_core_web-2.10.0\\
+firebase_performance=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\firebase_performance-0.9.3+8\\
+firebase_performance_web=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\firebase_performance_web-0.1.4+16\\
+flutter_keyboard_visibility=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\flutter_keyboard_visibility-5.2.0\\
+flutter_keyboard_visibility_web=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\flutter_keyboard_visibility_web-2.0.0\\
+flutter_plugin_android_lifecycle=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\flutter_plugin_android_lifecycle-2.0.17\\
+google_maps_flutter=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\google_maps_flutter-2.5.0\\
+google_maps_flutter_android=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\google_maps_flutter_android-2.6.2\\
+google_maps_flutter_ios=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\google_maps_flutter_ios-2.4.2\\
+google_maps_flutter_web=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\google_maps_flutter_web-0.5.4+2\\
+google_sign_in=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\google_sign_in-6.1.5\\
+google_sign_in_android=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\google_sign_in_android-6.1.20\\
+google_sign_in_ios=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\google_sign_in_ios-5.6.4\\
+google_sign_in_web=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\google_sign_in_web-0.12.1\\
+path_provider=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider-2.0.14\\
+path_provider_android=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_android-2.0.25\\
+path_provider_foundation=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_foundation-2.2.2\\
+path_provider_linux=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_linux-2.1.11\\
+path_provider_windows=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\path_provider_windows-2.1.7\\
+share_plus=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\share_plus-7.2.1\\
+shared_preferences=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\shared_preferences-2.2.2\\
+shared_preferences_android=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\shared_preferences_android-2.2.1\\
+shared_preferences_foundation=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\shared_preferences_foundation-2.3.4\\
+shared_preferences_linux=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\shared_preferences_linux-2.3.2\\
+shared_preferences_web=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\shared_preferences_web-2.2.1\\
+shared_preferences_windows=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\shared_preferences_windows-2.3.2\\
+sign_in_with_apple=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\sign_in_with_apple-4.3.0\\
+sign_in_with_apple_web=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\sign_in_with_apple_web-1.0.1\\
+sqflite=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\sqflite-2.2.6\\
+url_launcher=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\url_launcher-6.1.10\\
+url_launcher_android=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\url_launcher_android-6.0.27\\
+url_launcher_ios=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\url_launcher_ios-6.1.4\\
+url_launcher_linux=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\url_launcher_linux-3.0.6\\
+url_launcher_macos=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\url_launcher_macos-3.0.7\\
+url_launcher_web=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\url_launcher_web-2.1.0\\
+url_launcher_windows=C:\\Users\\st921\\AppData\\Local\\Pub\\Cache\\hosted\\pub.dev\\url_launcher_windows-3.0.8\\
Index: pubspec.lock
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/pubspec.lock b/pubspec.lock
new file mode 100644
--- /dev/null	(date 1708365985319)
+++ b/pubspec.lock	(date 1708365985319)
@@ -0,0 +1,1247 @@
+# Generated by pub
+# See https://dart.dev/tools/pub/glossary#lockfile
+packages:
+  _fe_analyzer_shared:
+    dependency: transitive
+    description:
+      name: _fe_analyzer_shared
+      sha256: ae92f5d747aee634b87f89d9946000c2de774be1d6ac3e58268224348cd0101a
+      url: "https://pub.dev"
+    source: hosted
+    version: "61.0.0"
+  _flutterfire_internals:
+    dependency: transitive
+    description:
+      name: _flutterfire_internals
+      sha256: f5628cd9c92ed11083f425fd1f8f1bc60ecdda458c81d73b143aeda036c35fe7
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.3.16"
+  analyzer:
+    dependency: transitive
+    description:
+      name: analyzer
+      sha256: ea3d8652bda62982addfd92fdc2d0214e5f82e43325104990d4f4c4a2a313562
+      url: "https://pub.dev"
+    source: hosted
+    version: "5.13.0"
+  archive:
+    dependency: transitive
+    description:
+      name: archive
+      sha256: "22600aa1e926be775fa5fe7e6894e7fb3df9efda8891c73f70fb3262399a432d"
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.4.10"
+  args:
+    dependency: transitive
+    description:
+      name: args
+      sha256: eef6c46b622e0494a36c5a12d10d77fb4e855501a91c1b9ef9339326e58f0596
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.4.2"
+  async:
+    dependency: transitive
+    description:
+      name: async
+      sha256: "947bfcf187f74dbc5e146c9eb9c0f10c9f8b30743e341481c1e2ed3ecc18c20c"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.11.0"
+  auto_size_text:
+    dependency: "direct main"
+    description:
+      name: auto_size_text
+      sha256: "3f5261cd3fb5f2a9ab4e2fc3fba84fd9fcaac8821f20a1d4e71f557521b22599"
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.0.0"
+  boolean_selector:
+    dependency: transitive
+    description:
+      name: boolean_selector
+      sha256: "6cfb5af12253eaf2b368f07bacc5a80d1301a071c73360d746b7f2e32d762c66"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.1.1"
+  cached_network_image:
+    dependency: "direct main"
+    description:
+      name: cached_network_image
+      sha256: e764e48ef036cabdf84319ba7b8b5871b6b43266e14de787cb43f77639089ae5
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.2.1"
+  cached_network_image_platform_interface:
+    dependency: transitive
+    description:
+      name: cached_network_image_platform_interface
+      sha256: "8e2b5befefec5063bee8f209fda21751f6328d405d4237c70f21104568b2fee7"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.0.0"
+  cached_network_image_web:
+    dependency: transitive
+    description:
+      name: cached_network_image_web
+      sha256: d4351c7eb16767df129b0474a5ebc4e028870379c063e8ba265a56aa00831e70
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.0.1"
+  characters:
+    dependency: transitive
+    description:
+      name: characters
+      sha256: "04a925763edad70e8443c99234dc3328f442e811f1d8fd1a72f1c8ad0f69a605"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.3.0"
+  checked_yaml:
+    dependency: transitive
+    description:
+      name: checked_yaml
+      sha256: feb6bed21949061731a7a75fc5d2aa727cf160b91af9a3e464c5e3a32e28b5ff
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.0.3"
+  cli_util:
+    dependency: transitive
+    description:
+      name: cli_util
+      sha256: c05b7406fdabc7a49a3929d4af76bcaccbbffcbcdcf185b082e1ae07da323d19
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.4.1"
+  clock:
+    dependency: transitive
+    description:
+      name: clock
+      sha256: cb6d7f03e1de671e34607e909a7213e31d7752be4fb66a86d29fe1eb14bfb5cf
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.1.1"
+  cloud_firestore:
+    dependency: "direct main"
+    description:
+      name: cloud_firestore
+      sha256: fabfa9b20e752ea55841b0177620a817baf3c7cd12854f339f7daadb6969ee5a
+      url: "https://pub.dev"
+    source: hosted
+    version: "4.13.1"
+  cloud_firestore_platform_interface:
+    dependency: "direct main"
+    description:
+      name: cloud_firestore_platform_interface
+      sha256: "32cfa6cebf3408e541f074083fa429505af855896425eeab1c4f13edc3f68450"
+      url: "https://pub.dev"
+    source: hosted
+    version: "6.0.5"
+  cloud_firestore_web:
+    dependency: "direct main"
+    description:
+      name: cloud_firestore_web
+      sha256: d8e36c1a60c69eb6d5bc239e497a1f284627ef8eb42258776bbfc98ce615e869
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.8.5"
+  collection:
+    dependency: "direct main"
+    description:
+      name: collection
+      sha256: ee67cb0715911d28db6bf4af1026078bd6f0128b07a5f66fb2ed94ec6783c09a
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.18.0"
+  convert:
+    dependency: transitive
+    description:
+      name: convert
+      sha256: "0f08b14755d163f6e2134cb58222dd25ea2a2ee8a195e53983d57c075324d592"
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.1.1"
+  cross_file:
+    dependency: transitive
+    description:
+      name: cross_file
+      sha256: fedaadfa3a6996f75211d835aaeb8fede285dae94262485698afd832371b9a5e
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.3.3+8"
+  crypto:
+    dependency: transitive
+    description:
+      name: crypto
+      sha256: ff625774173754681d66daaf4a448684fb04b78f902da9cb3d308c19cc5e8bab
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.0.3"
+  csslib:
+    dependency: transitive
+    description:
+      name: csslib
+      sha256: "706b5707578e0c1b4b7550f64078f0a0f19dec3f50a178ffae7006b0a9ca58fb"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.0.0"
+  cupertino_icons:
+    dependency: "direct main"
+    description:
+      name: cupertino_icons
+      sha256: d57953e10f9f8327ce64a508a355f0b1ec902193f66288e8cb5070e7c47eeb2d
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.0.6"
+  data_table_2:
+    dependency: "direct main"
+    description:
+      name: data_table_2
+      sha256: cec4010dd756bd7d0cc3eb8a30932b8109608132c6c8d643e80ea412d3e51a9c
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.5.10"
+  dropdown_button2:
+    dependency: "direct main"
+    description:
+      name: dropdown_button2
+      sha256: b0fe8d49a030315e9eef6c7ac84ca964250155a6224d491c1365061bc974a9e1
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.3.9"
+  easy_debounce:
+    dependency: "direct main"
+    description:
+      name: easy_debounce
+      sha256: "476ea3a9062023be76d9d3f48188af75137ad0b57bc250a0fb7adcc471923f51"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.0.1"
+  fake_async:
+    dependency: transitive
+    description:
+      name: fake_async
+      sha256: "511392330127add0b769b75a987850d136345d9227c6b94c96a04cf4a391bf78"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.3.1"
+  ffi:
+    dependency: transitive
+    description:
+      name: ffi
+      sha256: "7bf0adc28a23d395f19f3f1eb21dd7cfd1dd9f8e1c50051c069122e6853bc878"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.1.0"
+  file:
+    dependency: transitive
+    description:
+      name: file
+      sha256: "5fc22d7c25582e38ad9a8515372cd9a93834027aacf1801cf01164dac0ffa08c"
+      url: "https://pub.dev"
+    source: hosted
+    version: "7.0.0"
+  firebase_analytics:
+    dependency: "direct main"
+    description:
+      name: firebase_analytics
+      sha256: "5e92d510eacd66c354718fd9cc8f66ffdfa025640b645c4742297fb973770508"
+      url: "https://pub.dev"
+    source: hosted
+    version: "10.7.4"
+  firebase_analytics_platform_interface:
+    dependency: "direct main"
+    description:
+      name: firebase_analytics_platform_interface
+      sha256: "72977325a72af5ebb8e53b5c5533cb2e33eec481cd46210cfe5427f5efba55d8"
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.8.4"
+  firebase_analytics_web:
+    dependency: "direct main"
+    description:
+      name: firebase_analytics_web
+      sha256: "8b9710be7e292e2a5ad34fff449d4b668c5808fb339649e69181727a4534f579"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.5.5+11"
+  firebase_auth:
+    dependency: "direct main"
+    description:
+      name: firebase_auth
+      sha256: a87cfdd16b2bd04ca4a61e8b8d95daafaae487aa4c6533c9497199d631eefe6f
+      url: "https://pub.dev"
+    source: hosted
+    version: "4.15.2"
+  firebase_auth_platform_interface:
+    dependency: "direct main"
+    description:
+      name: firebase_auth_platform_interface
+      sha256: "4ca90755469fd20bf32070a3ff4dcb6256cfafc47230cc021261acced672ed3c"
+      url: "https://pub.dev"
+    source: hosted
+    version: "7.0.8"
+  firebase_auth_web:
+    dependency: "direct main"
+    description:
+      name: firebase_auth_web
+      sha256: "8eb2b4d35ed46405783c135cdf7c4c2d2769abe09cee60fcd8080c0475a9e8b5"
+      url: "https://pub.dev"
+    source: hosted
+    version: "5.8.11"
+  firebase_core:
+    dependency: "direct main"
+    description:
+      name: firebase_core
+      sha256: "96607c0e829a581c2a483c658f04e8b159964c3bae2730f73297070bc85d40bb"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.24.2"
+  firebase_core_platform_interface:
+    dependency: "direct main"
+    description:
+      name: firebase_core_platform_interface
+      sha256: c437ae5d17e6b5cc7981cf6fd458a5db4d12979905f9aafd1fea930428a9fe63
+      url: "https://pub.dev"
+    source: hosted
+    version: "5.0.0"
+  firebase_core_web:
+    dependency: "direct main"
+    description:
+      name: firebase_core_web
+      sha256: d585bdf3c656c3f7821ba1bd44da5f13365d22fcecaf5eb75c4295246aaa83c0
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.10.0"
+  firebase_performance:
+    dependency: "direct main"
+    description:
+      name: firebase_performance
+      sha256: "9df1c993365814ea6e75be9da4e2545afe2c5d4b27fce02af2e7050b04eb3396"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.9.3+8"
+  firebase_performance_platform_interface:
+    dependency: "direct main"
+    description:
+      name: firebase_performance_platform_interface
+      sha256: a2be699e610f684260984cc327cffb43c72a09f75c1f27084c247adef10faa57
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.1.4+16"
+  firebase_performance_web:
+    dependency: "direct main"
+    description:
+      name: firebase_performance_web
+      sha256: "73fa046809a3292c04836d362f568146c344951d641d5582dab57c843955f225"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.1.4+16"
+  fixnum:
+    dependency: transitive
+    description:
+      name: fixnum
+      sha256: "25517a4deb0c03aa0f32fd12db525856438902d9c16536311e76cdc57b31d7d1"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.1.0"
+  flutter:
+    dependency: "direct main"
+    description: flutter
+    source: sdk
+    version: "0.0.0"
+  flutter_animate:
+    dependency: "direct main"
+    description:
+      name: flutter_animate
+      sha256: f611a67082d4c5ff9b8b7737ec7e675a22af70a94c8c3c22109f14b078d4d2bf
+      url: "https://pub.dev"
+    source: hosted
+    version: "4.1.1+1"
+  flutter_blurhash:
+    dependency: transitive
+    description:
+      name: flutter_blurhash
+      sha256: "05001537bd3fac7644fa6558b09ec8c0a3f2eba78c0765f88912882b1331a5c6"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.7.0"
+  flutter_cache_manager:
+    dependency: "direct main"
+    description:
+      name: flutter_cache_manager
+      sha256: "8207f27539deb83732fdda03e259349046a39a4c767269285f449ade355d54ba"
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.3.1"
+  flutter_keyboard_visibility:
+    dependency: "direct main"
+    description:
+      name: flutter_keyboard_visibility
+      sha256: "5c5c2bf049e0f8b61c6bb6c317e3bf6142d238ab6711841f829e7432c568cc00"
+      url: "https://pub.dev"
+    source: hosted
+    version: "5.2.0"
+  flutter_keyboard_visibility_platform_interface:
+    dependency: transitive
+    description:
+      name: flutter_keyboard_visibility_platform_interface
+      sha256: e43a89845873f7be10cb3884345ceb9aebf00a659f479d1c8f4293fcb37022a4
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.0.0"
+  flutter_keyboard_visibility_web:
+    dependency: transitive
+    description:
+      name: flutter_keyboard_visibility_web
+      sha256: d3771a2e752880c79203f8d80658401d0c998e4183edca05a149f5098ce6e3d1
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.0.0"
+  flutter_launcher_icons:
+    dependency: "direct dev"
+    description:
+      name: flutter_launcher_icons
+      sha256: "526faf84284b86a4cb36d20a5e45147747b7563d921373d4ee0559c54fcdbcea"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.13.1"
+  flutter_lints:
+    dependency: "direct dev"
+    description:
+      name: flutter_lints
+      sha256: ad76540d21c066228ee3f9d1dad64a9f7e46530e8bb7c85011a88bc1fd874bc5
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.0.0"
+  flutter_localizations:
+    dependency: "direct main"
+    description: flutter
+    source: sdk
+    version: "0.0.0"
+  flutter_plugin_android_lifecycle:
+    dependency: "direct main"
+    description:
+      name: flutter_plugin_android_lifecycle
+      sha256: b068ffc46f82a55844acfa4fdbb61fad72fa2aef0905548419d97f0f95c456da
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.0.17"
+  flutter_rating_bar:
+    dependency: "direct main"
+    description:
+      name: flutter_rating_bar
+      sha256: d2af03469eac832c591a1eba47c91ecc871fe5708e69967073c043b2d775ed93
+      url: "https://pub.dev"
+    source: hosted
+    version: "4.0.1"
+  flutter_test:
+    dependency: "direct dev"
+    description: flutter
+    source: sdk
+    version: "0.0.0"
+  flutter_web_plugins:
+    dependency: transitive
+    description: flutter
+    source: sdk
+    version: "0.0.0"
+  font_awesome_flutter:
+    dependency: "direct main"
+    description:
+      name: font_awesome_flutter
+      sha256: "52671aea66da73b58d42ec6d0912b727a42248dd9a7c76d6c20f275783c48c08"
+      url: "https://pub.dev"
+    source: hosted
+    version: "10.6.0"
+  from_css_color:
+    dependency: "direct main"
+    description:
+      name: from_css_color
+      sha256: "5e4d1795c8d10af94e51dd97636b2a29170a132be1aceba103e9866028d20823"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.0.0"
+  glob:
+    dependency: transitive
+    description:
+      name: glob
+      sha256: "0e7014b3b7d4dac1ca4d6114f82bf1782ee86745b9b42a92c9289c23d8a0ab63"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.1.2"
+  go_router:
+    dependency: "direct main"
+    description:
+      name: go_router
+      sha256: "00d1b67d6e9fa443331da229084dd3eb04407f5a2dff22940bd7bba6af5722c3"
+      url: "https://pub.dev"
+    source: hosted
+    version: "7.1.1"
+  google_fonts:
+    dependency: "direct main"
+    description:
+      name: google_fonts
+      sha256: "927573f2e8a8d65c17931e21918ad0ab0666b1b636537de7c4932bdb487b190f"
+      url: "https://pub.dev"
+    source: hosted
+    version: "4.0.3"
+  google_identity_services_web:
+    dependency: transitive
+    description:
+      name: google_identity_services_web
+      sha256: "000b7a31e1fa17ee04b6c0553a2b2ea18f9f9352e4dcc0c9fcc785cf10f2484e"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.2.2"
+  google_maps:
+    dependency: "direct main"
+    description:
+      name: google_maps
+      sha256: "555d5d736339b0478e821167ac521c810d7b51c3b2734e6802a9f046b64ea37a"
+      url: "https://pub.dev"
+    source: hosted
+    version: "6.3.0"
+  google_maps_flutter:
+    dependency: "direct main"
+    description:
+      name: google_maps_flutter
+      sha256: d4914cb38b3dcb62c39c085d968d434de0f8050f00f4d9f5ba4a7c7e004934cb
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.5.0"
+  google_maps_flutter_android:
+    dependency: transitive
+    description:
+      name: google_maps_flutter_android
+      sha256: "714530f865f13bb3b9505c58821c3baed5d247a871724acf5d2ea5808fbed02c"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.6.2"
+  google_maps_flutter_ios:
+    dependency: transitive
+    description:
+      name: google_maps_flutter_ios
+      sha256: "29503b5159da2308a66212c3827963998bfb943ba073e2114fb2d486b47fd2c8"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.4.2"
+  google_maps_flutter_platform_interface:
+    dependency: "direct main"
+    description:
+      name: google_maps_flutter_platform_interface
+      sha256: a3e9e6896501e566d902c6c69f010834d410ef4b7b5c18b90c77e871c86b7907
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.4.1"
+  google_maps_flutter_web:
+    dependency: "direct main"
+    description:
+      name: google_maps_flutter_web
+      sha256: f893d1542c6562bc8299ef768fbbe92ade83c220ab3209b9477ec9f81ad585e4
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.5.4+2"
+  google_sign_in:
+    dependency: "direct main"
+    description:
+      name: google_sign_in
+      sha256: f45038d27bcad37498f282295ae97eece23c9349fc16649154067b87b9f1fd03
+      url: "https://pub.dev"
+    source: hosted
+    version: "6.1.5"
+  google_sign_in_android:
+    dependency: "direct main"
+    description:
+      name: google_sign_in_android
+      sha256: "6031f59074a337fdd81be821aba84cee3a41338c6e958499a5cd34d3e1db80ef"
+      url: "https://pub.dev"
+    source: hosted
+    version: "6.1.20"
+  google_sign_in_ios:
+    dependency: "direct main"
+    description:
+      name: google_sign_in_ios
+      sha256: "974944859f9cd40eb8a15b3fe8efb2d47fb7e99438f763f61a1ccd28d74ff4ce"
+      url: "https://pub.dev"
+    source: hosted
+    version: "5.6.4"
+  google_sign_in_platform_interface:
+    dependency: "direct main"
+    description:
+      name: google_sign_in_platform_interface
+      sha256: "35ceee5f0eadc1c07b0b4af7553246e315c901facbb7d3dadf734ba2693ceec4"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.4.2"
+  google_sign_in_web:
+    dependency: "direct main"
+    description:
+      name: google_sign_in_web
+      sha256: "6b08be471f82ff84058d528e1cb01f4f53084fa648b751310cdd1ac39b612d8e"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.12.1"
+  html:
+    dependency: transitive
+    description:
+      name: html
+      sha256: "3a7812d5bcd2894edf53dfaf8cd640876cf6cef50a8f238745c8b8120ea74d3a"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.15.4"
+  http:
+    dependency: transitive
+    description:
+      name: http
+      sha256: "5895291c13fa8a3bd82e76d5627f69e0d85ca6a30dcac95c4ea19a5d555879c2"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.13.6"
+  http_parser:
+    dependency: transitive
+    description:
+      name: http_parser
+      sha256: "2aa08ce0341cc9b354a498388e30986515406668dbcc4f7c950c3e715496693b"
+      url: "https://pub.dev"
+    source: hosted
+    version: "4.0.2"
+  image:
+    dependency: "direct dev"
+    description:
+      name: image
+      sha256: a72242c9a0ffb65d03de1b7113bc4e189686fc07c7147b8b41811d0dd0e0d9bf
+      url: "https://pub.dev"
+    source: hosted
+    version: "4.0.17"
+  intl:
+    dependency: "direct main"
+    description:
+      name: intl
+      sha256: "3bc132a9dbce73a7e4a21a17d06e1878839ffbf975568bc875c60537824b0c4d"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.18.1"
+  iregexp:
+    dependency: transitive
+    description:
+      name: iregexp
+      sha256: "0bab197b31adad22c32eef580cda11338dad24ee0e46187d994baef9acee7564"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.1.1"
+  js:
+    dependency: transitive
+    description:
+      name: js
+      sha256: f2c445dce49627136094980615a031419f7f3eb393237e4ecd97ac15dea343f3
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.6.7"
+  js_wrapping:
+    dependency: transitive
+    description:
+      name: js_wrapping
+      sha256: e385980f7c76a8c1c9a560dfb623b890975841542471eade630b2871d243851c
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.7.4"
+  json_annotation:
+    dependency: transitive
+    description:
+      name: json_annotation
+      sha256: b10a7b2ff83d83c777edba3c6a0f97045ddadd56c944e1a23a3fdf43a1bf4467
+      url: "https://pub.dev"
+    source: hosted
+    version: "4.8.1"
+  json_path:
+    dependency: "direct main"
+    description:
+      name: json_path
+      sha256: "0a38c33d6ab3a71795c4ce1867c6278bf1e87dabbc1f707307a00efc55750d9c"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.6.2"
+  lints:
+    dependency: "direct dev"
+    description:
+      name: lints
+      sha256: cbf8d4b858bb0134ef3ef87841abdf8d63bfc255c266b7bf6b39daa1085c4290
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.0.0"
+  logging:
+    dependency: transitive
+    description:
+      name: logging
+      sha256: "623a88c9594aa774443aa3eb2d41807a48486b5613e67599fb4c41c0ad47c340"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.2.0"
+  matcher:
+    dependency: transitive
+    description:
+      name: matcher
+      sha256: "1803e76e6653768d64ed8ff2e1e67bea3ad4b923eb5c56a295c3e634bad5960e"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.12.16"
+  material_color_utilities:
+    dependency: transitive
+    description:
+      name: material_color_utilities
+      sha256: "9528f2f296073ff54cb9fee677df673ace1218163c3bc7628093e7eed5203d41"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.5.0"
+  maybe_just_nothing:
+    dependency: transitive
+    description:
+      name: maybe_just_nothing
+      sha256: "0c06326e26d08f6ed43247404376366dc4d756cef23a4f1db765f546224c35e0"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.5.3"
+  meta:
+    dependency: transitive
+    description:
+      name: meta
+      sha256: a6e590c838b18133bb482a2745ad77c5bb7715fb0451209e1a7567d416678b8e
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.10.0"
+  mime:
+    dependency: transitive
+    description:
+      name: mime
+      sha256: "2e123074287cc9fd6c09de8336dae606d1ddb88d9ac47358826db698c176a1f2"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.0.5"
+  nested:
+    dependency: transitive
+    description:
+      name: nested
+      sha256: "03bac4c528c64c95c722ec99280375a6f2fc708eec17c7b3f07253b626cd2a20"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.0.0"
+  octo_image:
+    dependency: transitive
+    description:
+      name: octo_image
+      sha256: "107f3ed1330006a3bea63615e81cf637433f5135a52466c7caa0e7152bca9143"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.0.2"
+  package_config:
+    dependency: transitive
+    description:
+      name: package_config
+      sha256: "1c5b77ccc91e4823a5af61ee74e6b972db1ef98c2ff5a18d3161c982a55448bd"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.1.0"
+  page_transition:
+    dependency: "direct main"
+    description:
+      name: page_transition
+      sha256: dee976b1f23de9bbef5cd512fe567e9f6278caee11f5eaca9a2115c19dc49ef6
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.1.0"
+  path:
+    dependency: transitive
+    description:
+      name: path
+      sha256: "8829d8a55c13fc0e37127c29fedf290c102f4e40ae94ada574091fe0ff96c917"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.8.3"
+  path_provider:
+    dependency: "direct main"
+    description:
+      name: path_provider
+      sha256: c7edf82217d4b2952b2129a61d3ad60f1075b9299e629e149a8d2e39c2e6aad4
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.0.14"
+  path_provider_android:
+    dependency: "direct main"
+    description:
+      name: path_provider_android
+      sha256: da97262be945a72270513700a92b39dd2f4a54dad55d061687e2e37a6390366a
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.0.25"
+  path_provider_foundation:
+    dependency: "direct main"
+    description:
+      name: path_provider_foundation
+      sha256: ad4c4d011830462633f03eb34445a45345673dfd4faf1ab0b4735fbd93b19183
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.2.2"
+  path_provider_linux:
+    dependency: transitive
+    description:
+      name: path_provider_linux
+      sha256: ffbb8cc9ed2c9ec0e4b7a541e56fd79b138e8f47d2fb86815f15358a349b3b57
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.1.11"
+  path_provider_platform_interface:
+    dependency: "direct main"
+    description:
+      name: path_provider_platform_interface
+      sha256: "57585299a729335f1298b43245842678cb9f43a6310351b18fb577d6e33165ec"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.0.6"
+  path_provider_windows:
+    dependency: transitive
+    description:
+      name: path_provider_windows
+      sha256: "1cb68ba4cd3a795033de62ba1b7b4564dace301f952de6bfb3cd91b202b6ee96"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.1.7"
+  petitparser:
+    dependency: transitive
+    description:
+      name: petitparser
+      sha256: cb3798bef7fc021ac45b308f4b51208a152792445cce0448c9a4ba5879dd8750
+      url: "https://pub.dev"
+    source: hosted
+    version: "5.4.0"
+  pigeon:
+    dependency: transitive
+    description:
+      name: pigeon
+      sha256: "5a79fd0b10423f6b5705525e32015597f861c31220b522a67d1e6b580da96719"
+      url: "https://pub.dev"
+    source: hosted
+    version: "11.0.1"
+  platform:
+    dependency: transitive
+    description:
+      name: platform
+      sha256: "12220bb4b65720483f8fa9450b4332347737cf8213dd2840d8b2c823e47243ec"
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.1.4"
+  plugin_platform_interface:
+    dependency: "direct main"
+    description:
+      name: plugin_platform_interface
+      sha256: da3fdfeccc4d4ff2da8f8c556704c08f912542c5fb3cf2233ed75372384a034d
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.1.6"
+  pointycastle:
+    dependency: transitive
+    description:
+      name: pointycastle
+      sha256: "43ac87de6e10afabc85c445745a7b799e04de84cebaa4fd7bf55a5e1e9604d29"
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.7.4"
+  provider:
+    dependency: "direct main"
+    description:
+      name: provider
+      sha256: cdbe7530b12ecd9eb455bdaa2fcb8d4dad22e80b8afb4798b41479d5ce26847f
+      url: "https://pub.dev"
+    source: hosted
+    version: "6.0.5"
+  pub_semver:
+    dependency: transitive
+    description:
+      name: pub_semver
+      sha256: "40d3ab1bbd474c4c2328c91e3a7df8c6dd629b79ece4c4bd04bee496a224fb0c"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.1.4"
+  quiver:
+    dependency: transitive
+    description:
+      name: quiver
+      sha256: b1c1ac5ce6688d77f65f3375a9abb9319b3cb32486bdc7a1e0fdf004d7ba4e47
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.2.1"
+  rfc_6901:
+    dependency: transitive
+    description:
+      name: rfc_6901
+      sha256: "8d97680dada633146cf75ab9382f2ce2b7e4bd63ceecd867416cf43b5832b988"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.1.1"
+  rxdart:
+    dependency: "direct main"
+    description:
+      name: rxdart
+      sha256: "0c7c0cedd93788d996e33041ffecda924cc54389199cde4e6a34b440f50044cb"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.27.7"
+  sanitize_html:
+    dependency: transitive
+    description:
+      name: sanitize_html
+      sha256: "12669c4a913688a26555323fb9cec373d8f9fbe091f2d01c40c723b33caa8989"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.1.0"
+  share_plus:
+    dependency: "direct main"
+    description:
+      name: share_plus
+      sha256: f74fc3f1cbd99f39760182e176802f693fa0ec9625c045561cfad54681ea93dd
+      url: "https://pub.dev"
+    source: hosted
+    version: "7.2.1"
+  share_plus_platform_interface:
+    dependency: transitive
+    description:
+      name: share_plus_platform_interface
+      sha256: df08bc3a07d01f5ea47b45d03ffcba1fa9cd5370fb44b3f38c70e42cced0f956
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.3.1"
+  shared_preferences:
+    dependency: "direct main"
+    description:
+      name: shared_preferences
+      sha256: "81429e4481e1ccfb51ede496e916348668fd0921627779233bd24cc3ff6abd02"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.2.2"
+  shared_preferences_android:
+    dependency: "direct main"
+    description:
+      name: shared_preferences_android
+      sha256: "8568a389334b6e83415b6aae55378e158fbc2314e074983362d20c562780fb06"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.2.1"
+  shared_preferences_foundation:
+    dependency: "direct main"
+    description:
+      name: shared_preferences_foundation
+      sha256: "7bf53a9f2d007329ee6f3df7268fd498f8373602f943c975598bbb34649b62a7"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.3.4"
+  shared_preferences_linux:
+    dependency: transitive
+    description:
+      name: shared_preferences_linux
+      sha256: "9f2cbcf46d4270ea8be39fa156d86379077c8a5228d9dfdb1164ae0bb93f1faa"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.3.2"
+  shared_preferences_platform_interface:
+    dependency: "direct main"
+    description:
+      name: shared_preferences_platform_interface
+      sha256: d4ec5fc9ebb2f2e056c617112aa75dcf92fc2e4faaf2ae999caa297473f75d8a
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.3.1"
+  shared_preferences_web:
+    dependency: "direct main"
+    description:
+      name: shared_preferences_web
+      sha256: d762709c2bbe80626ecc819143013cc820fa49ca5e363620ee20a8b15a3e3daf
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.2.1"
+  shared_preferences_windows:
+    dependency: transitive
+    description:
+      name: shared_preferences_windows
+      sha256: "841ad54f3c8381c480d0c9b508b89a34036f512482c407e6df7a9c4aa2ef8f59"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.3.2"
+  sign_in_with_apple:
+    dependency: "direct main"
+    description:
+      name: sign_in_with_apple
+      sha256: ac3b113767dfdd765078c507dad9d4d9fe96b669cc7bd88fc36fc15376fb3400
+      url: "https://pub.dev"
+    source: hosted
+    version: "4.3.0"
+  sign_in_with_apple_platform_interface:
+    dependency: "direct main"
+    description:
+      name: sign_in_with_apple_platform_interface
+      sha256: a5883edee09ed6be19de19e7d9f618a617fe41a6fa03f76d082dfb787e9ea18d
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.0.0"
+  sign_in_with_apple_web:
+    dependency: "direct main"
+    description:
+      name: sign_in_with_apple_web
+      sha256: "44b66528f576e77847c14999d5e881e17e7223b7b0625a185417829e5306f47a"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.0.1"
+  simple_gradient_text:
+    dependency: "direct main"
+    description:
+      name: simple_gradient_text
+      sha256: "0eac61abb431c3c61ec1ea852eb0923e983371737079a9d949310217e13c8c20"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.2.3"
+  sky_engine:
+    dependency: transitive
+    description: flutter
+    source: sdk
+    version: "0.0.99"
+  smooth_page_indicator:
+    dependency: "direct main"
+    description:
+      name: smooth_page_indicator
+      sha256: "725bc638d5e79df0c84658e1291449996943f93bacbc2cec49963dbbab48d8ae"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.1.0"
+  source_span:
+    dependency: transitive
+    description:
+      name: source_span
+      sha256: "53e943d4206a5e30df338fd4c6e7a077e02254531b138a15aec3bd143c1a8b3c"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.10.0"
+  sprintf:
+    dependency: transitive
+    description:
+      name: sprintf
+      sha256: "1fc9ffe69d4df602376b52949af107d8f5703b77cda567c4d7d86a0693120f23"
+      url: "https://pub.dev"
+    source: hosted
+    version: "7.0.0"
+  sqflite:
+    dependency: "direct main"
+    description:
+      name: sqflite
+      sha256: "500d6fec583d2c021f2d25a056d96654f910662c64f836cd2063167b8f1fa758"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.2.6"
+  sqflite_common:
+    dependency: transitive
+    description:
+      name: sqflite_common
+      sha256: "28d8c66baee4968519fb8bd6cdbedad982d6e53359091f0b74544a9f32ec72d5"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.5.3"
+  stack_trace:
+    dependency: transitive
+    description:
+      name: stack_trace
+      sha256: "73713990125a6d93122541237550ee3352a2d84baad52d375a4cad2eb9b7ce0b"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.11.1"
+  stream_channel:
+    dependency: transitive
+    description:
+      name: stream_channel
+      sha256: ba2aa5d8cc609d96bbb2899c28934f9e1af5cddbd60a827822ea467161eb54e7
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.1.2"
+  stream_transform:
+    dependency: "direct main"
+    description:
+      name: stream_transform
+      sha256: "14a00e794c7c11aa145a170587321aedce29769c08d7f58b1d141da75e3b1c6f"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.1.0"
+  string_scanner:
+    dependency: transitive
+    description:
+      name: string_scanner
+      sha256: "556692adab6cfa87322a115640c11f13cb77b3f076ddcc5d6ae3c20242bedcde"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.2.0"
+  synchronized:
+    dependency: transitive
+    description:
+      name: synchronized
+      sha256: "539ef412b170d65ecdafd780f924e5be3f60032a1128df156adad6c5b373d558"
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.1.0+1"
+  term_glyph:
+    dependency: transitive
+    description:
+      name: term_glyph
+      sha256: a29248a84fbb7c79282b40b8c72a1209db169a2e0542bce341da992fe1bc7e84
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.2.1"
+  test_api:
+    dependency: transitive
+    description:
+      name: test_api
+      sha256: "5c2f730018264d276c20e4f1503fd1308dfbbae39ec8ee63c5236311ac06954b"
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.6.1"
+  timeago:
+    dependency: "direct main"
+    description:
+      name: timeago
+      sha256: "3a38963615f1178531afa7177199e37522cf8dcbd93a144b597e32ec6d84bd9f"
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.2.2"
+  typed_data:
+    dependency: transitive
+    description:
+      name: typed_data
+      sha256: facc8d6582f16042dd49f2463ff1bd6e2c9ef9f3d5da3d9b087e244a7b564b3c
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.3.2"
+  url_launcher:
+    dependency: "direct main"
+    description:
+      name: url_launcher
+      sha256: "75f2846facd11168d007529d6cd8fcb2b750186bea046af9711f10b907e1587e"
+      url: "https://pub.dev"
+    source: hosted
+    version: "6.1.10"
+  url_launcher_android:
+    dependency: "direct main"
+    description:
+      name: url_launcher_android
+      sha256: a52628068d282d01a07cd86e6ba99e497aa45ce8c91159015b2416907d78e411
+      url: "https://pub.dev"
+    source: hosted
+    version: "6.0.27"
+  url_launcher_ios:
+    dependency: "direct main"
+    description:
+      name: url_launcher_ios
+      sha256: "9af7ea73259886b92199f9e42c116072f05ff9bea2dcb339ab935dfc957392c2"
+      url: "https://pub.dev"
+    source: hosted
+    version: "6.1.4"
+  url_launcher_linux:
+    dependency: transitive
+    description:
+      name: url_launcher_linux
+      sha256: b651aad005e0cb06a01dbd84b428a301916dc75f0e7ea6165f80057fee2d8e8e
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.0.6"
+  url_launcher_macos:
+    dependency: transitive
+    description:
+      name: url_launcher_macos
+      sha256: b55486791f666e62e0e8ff825e58a023fd6b1f71c49926483f1128d3bbd8fe88
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.0.7"
+  url_launcher_platform_interface:
+    dependency: "direct main"
+    description:
+      name: url_launcher_platform_interface
+      sha256: "6c9ca697a5ae218ce56cece69d46128169a58aa8653c1b01d26fcd4aad8c4370"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.1.2"
+  url_launcher_web:
+    dependency: transitive
+    description:
+      name: url_launcher_web
+      sha256: "043a0d5b83bb7a6f4f0040763dd7b23e75c8e1979cc1109a545054b6dcf56d17"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.1.0"
+  url_launcher_windows:
+    dependency: transitive
+    description:
+      name: url_launcher_windows
+      sha256: "95fef3129dc7cfaba2bc3d5ba2e16063bb561fc6d78e63eee16162bc70029069"
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.0.8"
+  uuid:
+    dependency: transitive
+    description:
+      name: uuid
+      sha256: cd210a09f7c18cbe5a02511718e0334de6559871052c90a90c0cca46a4aa81c8
+      url: "https://pub.dev"
+    source: hosted
+    version: "4.3.3"
+  vector_math:
+    dependency: transitive
+    description:
+      name: vector_math
+      sha256: "80b3257d1492ce4d091729e3a67a60407d227c27241d6927be0130c98e741803"
+      url: "https://pub.dev"
+    source: hosted
+    version: "2.1.4"
+  watcher:
+    dependency: transitive
+    description:
+      name: watcher
+      sha256: "3d2ad6751b3c16cf07c7fca317a1413b3f26530319181b37e3b9039b84fc01d8"
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.1.0"
+  web:
+    dependency: transitive
+    description:
+      name: web
+      sha256: afe077240a270dcfd2aafe77602b4113645af95d0ad31128cc02bce5ac5d5152
+      url: "https://pub.dev"
+    source: hosted
+    version: "0.3.0"
+  win32:
+    dependency: transitive
+    description:
+      name: win32
+      sha256: "464f5674532865248444b4c3daca12bd9bf2d7c47f759ce2617986e7229494a8"
+      url: "https://pub.dev"
+    source: hosted
+    version: "5.2.0"
+  xdg_directories:
+    dependency: transitive
+    description:
+      name: xdg_directories
+      sha256: faea9dee56b520b55a566385b84f2e8de55e7496104adada9962e0bd11bcff1d
+      url: "https://pub.dev"
+    source: hosted
+    version: "1.0.4"
+  xml:
+    dependency: transitive
+    description:
+      name: xml
+      sha256: "5bc72e1e45e941d825fd7468b9b4cc3b9327942649aeb6fc5cdbf135f0a86e84"
+      url: "https://pub.dev"
+    source: hosted
+    version: "6.3.0"
+  yaml:
+    dependency: transitive
+    description:
+      name: yaml
+      sha256: "75769501ea3489fca56601ff33454fe45507ea3bfb014161abc3b43ae25989d5"
+      url: "https://pub.dev"
+    source: hosted
+    version: "3.1.2"
+sdks:
+  dart: ">=3.2.3 <4.0.0"
+  flutter: ">=3.16.6"
Index: ios/Flutter/AppFrameworkInfo.plist
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Flutter/AppFrameworkInfo.plist b/ios/Flutter/AppFrameworkInfo.plist
new file mode 100644
--- /dev/null	(date 1708365759444)
+++ b/ios/Flutter/AppFrameworkInfo.plist	(date 1708365759444)
@@ -0,0 +1,26 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+  <key>CFBundleDevelopmentRegion</key>
+  <string>$(DEVELOPMENT_LANGUAGE)</string>
+  <key>CFBundleExecutable</key>
+  <string>App</string>
+  <key>CFBundleIdentifier</key>
+  <string>io.flutter.flutter.app</string>
+  <key>CFBundleInfoDictionaryVersion</key>
+  <string>6.0</string>
+  <key>CFBundleName</key>
+  <string>App</string>
+  <key>CFBundlePackageType</key>
+  <string>FMWK</string>
+  <key>CFBundleShortVersionString</key>
+  <string>1.0</string>
+  <key>CFBundleSignature</key>
+  <string>????</string>
+  <key>CFBundleVersion</key>
+  <string>1.0</string>
+  <key>MinimumOSVersion</key>
+  <string>13.0</string>
+</dict>
+</plist>
Index: ios/Flutter/Release.xcconfig
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Flutter/Release.xcconfig b/ios/Flutter/Release.xcconfig
new file mode 100644
--- /dev/null	(date 1708365759475)
+++ b/ios/Flutter/Release.xcconfig	(date 1708365759475)
@@ -0,0 +1,2 @@
+#include "Pods/Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig"
+#include "Generated.xcconfig"
Index: .flutter-plugins-dependencies
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.flutter-plugins-dependencies b/.flutter-plugins-dependencies
new file mode 100644
--- /dev/null	(date 1708369237696)
+++ b/.flutter-plugins-dependencies	(date 1708369237696)
@@ -0,0 +1,1 @@
+{"info":"This is a generated file; do not edit or check into version control.","plugins":{"ios":[{"name":"cloud_firestore","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\cloud_firestore-4.13.1\\\\","native_build":true,"dependencies":["firebase_core"]},{"name":"firebase_analytics","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\firebase_analytics-10.7.4\\\\","native_build":true,"dependencies":["firebase_core"]},{"name":"firebase_auth","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\firebase_auth-4.15.2\\\\","native_build":true,"dependencies":["firebase_core"]},{"name":"firebase_core","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\firebase_core-2.24.2\\\\","native_build":true,"dependencies":[]},{"name":"firebase_performance","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\firebase_performance-0.9.3+8\\\\","native_build":true,"dependencies":["firebase_core"]},{"name":"flutter_keyboard_visibility","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\flutter_keyboard_visibility-5.2.0\\\\","native_build":true,"dependencies":[]},{"name":"google_maps_flutter_ios","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\google_maps_flutter_ios-2.4.2\\\\","native_build":true,"dependencies":[]},{"name":"google_sign_in_ios","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\google_sign_in_ios-5.6.4\\\\","native_build":true,"dependencies":[]},{"name":"path_provider_foundation","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\path_provider_foundation-2.2.2\\\\","shared_darwin_source":true,"native_build":true,"dependencies":[]},{"name":"share_plus","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\share_plus-7.2.1\\\\","native_build":true,"dependencies":[]},{"name":"shared_preferences_foundation","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\shared_preferences_foundation-2.3.4\\\\","shared_darwin_source":true,"native_build":true,"dependencies":[]},{"name":"sign_in_with_apple","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\sign_in_with_apple-4.3.0\\\\","native_build":true,"dependencies":[]},{"name":"sqflite","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\sqflite-2.2.6\\\\","native_build":true,"dependencies":[]},{"name":"url_launcher_ios","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\url_launcher_ios-6.1.4\\\\","native_build":true,"dependencies":[]}],"android":[{"name":"cloud_firestore","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\cloud_firestore-4.13.1\\\\","native_build":true,"dependencies":["firebase_core"]},{"name":"firebase_analytics","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\firebase_analytics-10.7.4\\\\","native_build":true,"dependencies":["firebase_core"]},{"name":"firebase_auth","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\firebase_auth-4.15.2\\\\","native_build":true,"dependencies":["firebase_core"]},{"name":"firebase_core","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\firebase_core-2.24.2\\\\","native_build":true,"dependencies":[]},{"name":"firebase_performance","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\firebase_performance-0.9.3+8\\\\","native_build":true,"dependencies":["firebase_core"]},{"name":"flutter_keyboard_visibility","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\flutter_keyboard_visibility-5.2.0\\\\","native_build":true,"dependencies":[]},{"name":"flutter_plugin_android_lifecycle","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\flutter_plugin_android_lifecycle-2.0.17\\\\","native_build":true,"dependencies":[]},{"name":"google_maps_flutter_android","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\google_maps_flutter_android-2.6.2\\\\","native_build":true,"dependencies":["flutter_plugin_android_lifecycle"]},{"name":"google_sign_in_android","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\google_sign_in_android-6.1.20\\\\","native_build":true,"dependencies":[]},{"name":"path_provider_android","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\path_provider_android-2.0.25\\\\","native_build":true,"dependencies":[]},{"name":"share_plus","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\share_plus-7.2.1\\\\","native_build":true,"dependencies":[]},{"name":"shared_preferences_android","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\shared_preferences_android-2.2.1\\\\","native_build":true,"dependencies":[]},{"name":"sign_in_with_apple","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\sign_in_with_apple-4.3.0\\\\","native_build":true,"dependencies":[]},{"name":"sqflite","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\sqflite-2.2.6\\\\","native_build":true,"dependencies":[]},{"name":"url_launcher_android","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\url_launcher_android-6.0.27\\\\","native_build":true,"dependencies":[]}],"macos":[{"name":"cloud_firestore","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\cloud_firestore-4.13.1\\\\","native_build":true,"dependencies":["firebase_core"]},{"name":"firebase_analytics","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\firebase_analytics-10.7.4\\\\","native_build":true,"dependencies":["firebase_core"]},{"name":"firebase_auth","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\firebase_auth-4.15.2\\\\","native_build":true,"dependencies":["firebase_core"]},{"name":"firebase_core","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\firebase_core-2.24.2\\\\","native_build":true,"dependencies":[]},{"name":"path_provider_foundation","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\path_provider_foundation-2.2.2\\\\","shared_darwin_source":true,"native_build":true,"dependencies":[]},{"name":"share_plus","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\share_plus-7.2.1\\\\","native_build":true,"dependencies":[]},{"name":"shared_preferences_foundation","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\shared_preferences_foundation-2.3.4\\\\","shared_darwin_source":true,"native_build":true,"dependencies":[]},{"name":"sign_in_with_apple","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\sign_in_with_apple-4.3.0\\\\","native_build":true,"dependencies":[]},{"name":"sqflite","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\sqflite-2.2.6\\\\","native_build":true,"dependencies":[]},{"name":"url_launcher_macos","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\url_launcher_macos-3.0.7\\\\","native_build":true,"dependencies":[]}],"linux":[{"name":"path_provider_linux","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\path_provider_linux-2.1.11\\\\","native_build":false,"dependencies":[]},{"name":"share_plus","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\share_plus-7.2.1\\\\","native_build":false,"dependencies":["url_launcher_linux"]},{"name":"shared_preferences_linux","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\shared_preferences_linux-2.3.2\\\\","native_build":false,"dependencies":["path_provider_linux"]},{"name":"url_launcher_linux","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\url_launcher_linux-3.0.6\\\\","native_build":true,"dependencies":[]}],"windows":[{"name":"cloud_firestore","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\cloud_firestore-4.13.1\\\\","native_build":true,"dependencies":["firebase_core"]},{"name":"firebase_auth","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\firebase_auth-4.15.2\\\\","native_build":true,"dependencies":["firebase_core"]},{"name":"firebase_core","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\firebase_core-2.24.2\\\\","native_build":true,"dependencies":[]},{"name":"path_provider_windows","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\path_provider_windows-2.1.7\\\\","native_build":false,"dependencies":[]},{"name":"share_plus","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\share_plus-7.2.1\\\\","native_build":true,"dependencies":["url_launcher_windows"]},{"name":"shared_preferences_windows","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\shared_preferences_windows-2.3.2\\\\","native_build":false,"dependencies":["path_provider_windows"]},{"name":"url_launcher_windows","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\url_launcher_windows-3.0.8\\\\","native_build":true,"dependencies":[]}],"web":[{"name":"cloud_firestore_web","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\cloud_firestore_web-3.8.5\\\\","dependencies":["firebase_core_web"]},{"name":"firebase_analytics_web","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\firebase_analytics_web-0.5.5+11\\\\","dependencies":["firebase_core_web"]},{"name":"firebase_auth_web","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\firebase_auth_web-5.8.11\\\\","dependencies":["firebase_core_web"]},{"name":"firebase_core_web","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\firebase_core_web-2.10.0\\\\","dependencies":[]},{"name":"firebase_performance_web","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\firebase_performance_web-0.1.4+16\\\\","dependencies":["firebase_core_web"]},{"name":"flutter_keyboard_visibility_web","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\flutter_keyboard_visibility_web-2.0.0\\\\","dependencies":[]},{"name":"google_maps_flutter_web","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\google_maps_flutter_web-0.5.4+2\\\\","dependencies":[]},{"name":"google_sign_in_web","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\google_sign_in_web-0.12.1\\\\","dependencies":[]},{"name":"share_plus","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\share_plus-7.2.1\\\\","dependencies":["url_launcher_web"]},{"name":"shared_preferences_web","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\shared_preferences_web-2.2.1\\\\","dependencies":[]},{"name":"sign_in_with_apple_web","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\sign_in_with_apple_web-1.0.1\\\\","dependencies":[]},{"name":"url_launcher_web","path":"C:\\\\Users\\\\st921\\\\AppData\\\\Local\\\\Pub\\\\Cache\\\\hosted\\\\pub.dev\\\\url_launcher_web-2.1.0\\\\","dependencies":[]}]},"dependencyGraph":[{"name":"cloud_firestore","dependencies":["cloud_firestore_web","firebase_core"]},{"name":"cloud_firestore_web","dependencies":["firebase_core","firebase_core_web"]},{"name":"firebase_analytics","dependencies":["firebase_analytics_web","firebase_core"]},{"name":"firebase_analytics_web","dependencies":["firebase_core","firebase_core_web"]},{"name":"firebase_auth","dependencies":["firebase_auth_web","firebase_core"]},{"name":"firebase_auth_web","dependencies":["firebase_core","firebase_core_web"]},{"name":"firebase_core","dependencies":["firebase_core_web"]},{"name":"firebase_core_web","dependencies":[]},{"name":"firebase_performance","dependencies":["firebase_core","firebase_performance_web"]},{"name":"firebase_performance_web","dependencies":["firebase_core","firebase_core_web"]},{"name":"flutter_keyboard_visibility","dependencies":["flutter_keyboard_visibility_web"]},{"name":"flutter_keyboard_visibility_web","dependencies":[]},{"name":"flutter_plugin_android_lifecycle","dependencies":[]},{"name":"google_maps_flutter","dependencies":["google_maps_flutter_android","google_maps_flutter_ios","google_maps_flutter_web"]},{"name":"google_maps_flutter_android","dependencies":["flutter_plugin_android_lifecycle"]},{"name":"google_maps_flutter_ios","dependencies":[]},{"name":"google_maps_flutter_web","dependencies":[]},{"name":"google_sign_in","dependencies":["google_sign_in_android","google_sign_in_ios","google_sign_in_web"]},{"name":"google_sign_in_android","dependencies":[]},{"name":"google_sign_in_ios","dependencies":[]},{"name":"google_sign_in_web","dependencies":[]},{"name":"path_provider","dependencies":["path_provider_android","path_provider_foundation","path_provider_linux","path_provider_windows"]},{"name":"path_provider_android","dependencies":[]},{"name":"path_provider_foundation","dependencies":[]},{"name":"path_provider_linux","dependencies":[]},{"name":"path_provider_windows","dependencies":[]},{"name":"share_plus","dependencies":["url_launcher_web","url_launcher_windows","url_launcher_linux"]},{"name":"shared_preferences","dependencies":["shared_preferences_android","shared_preferences_foundation","shared_preferences_linux","shared_preferences_web","shared_preferences_windows"]},{"name":"shared_preferences_android","dependencies":[]},{"name":"shared_preferences_foundation","dependencies":[]},{"name":"shared_preferences_linux","dependencies":["path_provider_linux"]},{"name":"shared_preferences_web","dependencies":[]},{"name":"shared_preferences_windows","dependencies":["path_provider_windows"]},{"name":"sign_in_with_apple","dependencies":["sign_in_with_apple_web"]},{"name":"sign_in_with_apple_web","dependencies":[]},{"name":"sqflite","dependencies":[]},{"name":"url_launcher","dependencies":["url_launcher_android","url_launcher_ios","url_launcher_linux","url_launcher_macos","url_launcher_web","url_launcher_windows"]},{"name":"url_launcher_android","dependencies":[]},{"name":"url_launcher_ios","dependencies":[]},{"name":"url_launcher_linux","dependencies":[]},{"name":"url_launcher_macos","dependencies":[]},{"name":"url_launcher_web","dependencies":[]},{"name":"url_launcher_windows","dependencies":[]}],"date_created":"2024-02-20 00:30:37.693457","version":"3.16.9"}
\ No newline at end of file
Index: ios/Runner.xcodeproj/project.pbxproj
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Runner.xcodeproj/project.pbxproj b/ios/Runner.xcodeproj/project.pbxproj
new file mode 100644
--- /dev/null	(date 1708365759585)
+++ b/ios/Runner.xcodeproj/project.pbxproj	(date 1708365759585)
@@ -0,0 +1,614 @@
+// !$*UTF8*$!
+{
+	archiveVersion = 1;
+	classes = {
+	};
+	objectVersion = 50;
+	objects = {
+
+/* Begin PBXBuildFile section */
+		1498D2341E8E89220040F4C2 /* GeneratedPluginRegistrant.m in Sources */ = {isa = PBXBuildFile; fileRef = 1498D2331E8E89220040F4C2 /* GeneratedPluginRegistrant.m */; };
+		3B3967161E833CAA004F5970 /* AppFrameworkInfo.plist in Resources */ = {isa = PBXBuildFile; fileRef = 3B3967151E833CAA004F5970 /* AppFrameworkInfo.plist */; };
+		60CEEDB492F577A653BC6E45 /* Pods_Runner.framework in Frameworks */ = {isa = PBXBuildFile; fileRef = B8285832C7E7A3262A5A897C /* Pods_Runner.framework */; };
+		6426BE1225AC0EBD0080CC2A /* GoogleService-Info.plist in Resources */ = {isa = PBXBuildFile; fileRef = 6426BE1125AC0EBD0080CC2A /* GoogleService-Info.plist */; };
+		74858FAF1ED2DC5600515810 /* AppDelegate.swift in Sources */ = {isa = PBXBuildFile; fileRef = 74858FAE1ED2DC5600515810 /* AppDelegate.swift */; };
+		97C146FC1CF9000F007C117D /* Main.storyboard in Resources */ = {isa = PBXBuildFile; fileRef = 97C146FA1CF9000F007C117D /* Main.storyboard */; };
+		6436409A27A31CD800820AF7 /* InfoPlist.strings in Resources */ = {isa = PBXBuildFile; fileRef = 6436409C27A31CD800820AF7 /* InfoPlist.strings */; };
+		97C146FE1CF9000F007C117D /* Assets.xcassets in Resources */ = {isa = PBXBuildFile; fileRef = 97C146FD1CF9000F007C117D /* Assets.xcassets */; };
+		97C147011CF9000F007C117D /* LaunchScreen.storyboard in Resources */ = {isa = PBXBuildFile; fileRef = 97C146FF1CF9000F007C117D /* LaunchScreen.storyboard */; };
+/* End PBXBuildFile section */
+
+/* Begin PBXCopyFilesBuildPhase section */
+		9705A1C41CF9048500538489 /* Embed Frameworks */ = {
+			isa = PBXCopyFilesBuildPhase;
+			buildActionMask = 2147483647;
+			dstPath = "";
+			dstSubfolderSpec = 10;
+			files = (
+			);
+			name = "Embed Frameworks";
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXCopyFilesBuildPhase section */
+
+/* Begin PBXFileReference section */
+		1498D2321E8E86230040F4C2 /* GeneratedPluginRegistrant.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = GeneratedPluginRegistrant.h; sourceTree = "<group>"; };
+		1498D2331E8E89220040F4C2 /* GeneratedPluginRegistrant.m */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.c.objc; path = GeneratedPluginRegistrant.m; sourceTree = "<group>"; };
+		3B3967151E833CAA004F5970 /* AppFrameworkInfo.plist */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.plist.xml; name = AppFrameworkInfo.plist; path = Flutter/AppFrameworkInfo.plist; sourceTree = "<group>"; };
+		64E3CA8B26FC10FF0070C5E0 /* Runner.entitlements */ = {isa = PBXFileReference; lastKnownFileType = text.plist.entitlements; path = Runner.entitlements; sourceTree = "<group>"; };
+		3DCE399542E9B8C63BEA38E6 /* Pods-Runner.profile.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-Runner.profile.xcconfig"; path = "Target Support Files/Pods-Runner/Pods-Runner.profile.xcconfig"; sourceTree = "<group>"; };
+		6426BE1125AC0EBD0080CC2A /* GoogleService-Info.plist */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.plist.xml; path = "GoogleService-Info.plist"; sourceTree = "<group>"; };
+		74858FAD1ED2DC5600515810 /* Runner-Bridging-Header.h */ = {isa = PBXFileReference; lastKnownFileType = sourcecode.c.h; path = "Runner-Bridging-Header.h"; sourceTree = "<group>"; };
+		74858FAE1ED2DC5600515810 /* AppDelegate.swift */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = sourcecode.swift; path = AppDelegate.swift; sourceTree = "<group>"; };
+		7AFA3C8E1D35360C0083082E /* Release.xcconfig */ = {isa = PBXFileReference; lastKnownFileType = text.xcconfig; name = Release.xcconfig; path = Flutter/Release.xcconfig; sourceTree = "<group>"; };
+		9740EEB21CF90195004384FC /* Debug.xcconfig */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.xcconfig; name = Debug.xcconfig; path = Flutter/Debug.xcconfig; sourceTree = "<group>"; };
+		9740EEB31CF90195004384FC /* Generated.xcconfig */ = {isa = PBXFileReference; fileEncoding = 4; lastKnownFileType = text.xcconfig; name = Generated.xcconfig; path = Flutter/Generated.xcconfig; sourceTree = "<group>"; };
+		97C146EE1CF9000F007C117D /* Runner.app */ = {isa = PBXFileReference; explicitFileType = wrapper.application; includeInIndex = 0; path = Runner.app; sourceTree = BUILT_PRODUCTS_DIR; };
+		97C146FB1CF9000F007C117D /* Base */ = {isa = PBXFileReference; lastKnownFileType = file.storyboard; name = Base; path = Base.lproj/Main.storyboard; sourceTree = "<group>"; };
+		97C146FD1CF9000F007C117D /* Assets.xcassets */ = {isa = PBXFileReference; lastKnownFileType = folder.assetcatalog; path = Assets.xcassets; sourceTree = "<group>"; };
+		97C147001CF9000F007C117D /* Base */ = {isa = PBXFileReference; lastKnownFileType = file.storyboard; name = Base; path = Base.lproj/LaunchScreen.storyboard; sourceTree = "<group>"; };
+		97C147021CF9000F007C117D /* Info.plist */ = {isa = PBXFileReference; lastKnownFileType = text.plist.xml; path = Info.plist; sourceTree = "<group>"; };
+		A9C17DEFA21738E5FBD7F54A /* Pods-Runner.release.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-Runner.release.xcconfig"; path = "Target Support Files/Pods-Runner/Pods-Runner.release.xcconfig"; sourceTree = "<group>"; };
+		B8285832C7E7A3262A5A897C /* Pods_Runner.framework */ = {isa = PBXFileReference; explicitFileType = wrapper.framework; includeInIndex = 0; path = Pods_Runner.framework; sourceTree = BUILT_PRODUCTS_DIR; };
+		FA9015B13AC8FF8CBD8DD673 /* Pods-Runner.debug.xcconfig */ = {isa = PBXFileReference; includeInIndex = 1; lastKnownFileType = text.xcconfig; name = "Pods-Runner.debug.xcconfig"; path = "Target Support Files/Pods-Runner/Pods-Runner.debug.xcconfig"; sourceTree = "<group>"; };
+/* End PBXFileReference section */
+
+/* Begin PBXFrameworksBuildPhase section */
+		97C146EB1CF9000F007C117D /* Frameworks */ = {
+			isa = PBXFrameworksBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+				60CEEDB492F577A653BC6E45 /* Pods_Runner.framework in Frameworks */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXFrameworksBuildPhase section */
+
+/* Begin PBXGroup section */
+		33098FC5D2106DCB44CAEA79 /* Pods */ = {
+			isa = PBXGroup;
+			children = (
+				FA9015B13AC8FF8CBD8DD673 /* Pods-Runner.debug.xcconfig */,
+				A9C17DEFA21738E5FBD7F54A /* Pods-Runner.release.xcconfig */,
+				3DCE399542E9B8C63BEA38E6 /* Pods-Runner.profile.xcconfig */,
+			);
+			name = Pods;
+			path = Pods;
+			sourceTree = "<group>";
+		};
+		9740EEB11CF90186004384FC /* Flutter */ = {
+			isa = PBXGroup;
+			children = (
+				3B3967151E833CAA004F5970 /* AppFrameworkInfo.plist */,
+				9740EEB21CF90195004384FC /* Debug.xcconfig */,
+				7AFA3C8E1D35360C0083082E /* Release.xcconfig */,
+				9740EEB31CF90195004384FC /* Generated.xcconfig */,
+			);
+			name = Flutter;
+			sourceTree = "<group>";
+		};
+		97C146E51CF9000F007C117D = {
+			isa = PBXGroup;
+			children = (
+				9740EEB11CF90186004384FC /* Flutter */,
+				97C146F01CF9000F007C117D /* Runner */,
+				97C146EF1CF9000F007C117D /* Products */,
+				33098FC5D2106DCB44CAEA79 /* Pods */,
+				CC79BB5F4B7E86C62E930C2C /* Frameworks */,
+			);
+			sourceTree = "<group>";
+		};
+		97C146EF1CF9000F007C117D /* Products */ = {
+			isa = PBXGroup;
+			children = (
+				97C146EE1CF9000F007C117D /* Runner.app */,
+			);
+			name = Products;
+			sourceTree = "<group>";
+		};
+		97C146F01CF9000F007C117D /* Runner */ = {
+			isa = PBXGroup;
+			children = (
+				64E3CA8B26FC10FF0070C5E0 /* Runner.entitlements */,
+				6426BE1125AC0EBD0080CC2A /* GoogleService-Info.plist */,
+				97C146FA1CF9000F007C117D /* Main.storyboard */,
+				97C146FD1CF9000F007C117D /* Assets.xcassets */,
+				97C146FF1CF9000F007C117D /* LaunchScreen.storyboard */,
+				97C147021CF9000F007C117D /* Info.plist */,
+				1498D2321E8E86230040F4C2 /* GeneratedPluginRegistrant.h */,
+				1498D2331E8E89220040F4C2 /* GeneratedPluginRegistrant.m */,
+				74858FAE1ED2DC5600515810 /* AppDelegate.swift */,
+				74858FAD1ED2DC5600515810 /* Runner-Bridging-Header.h */,
+				6436409C27A31CD800820AF7 /* InfoPlist.strings */,
+			);
+			path = Runner;
+			sourceTree = "<group>";
+		};
+		CC79BB5F4B7E86C62E930C2C /* Frameworks */ = {
+			isa = PBXGroup;
+			children = (
+				B8285832C7E7A3262A5A897C /* Pods_Runner.framework */,
+			);
+			name = Frameworks;
+			sourceTree = "<group>";
+		};
+/* End PBXGroup section */
+
+/* Begin PBXNativeTarget section */
+		97C146ED1CF9000F007C117D /* Runner */ = {
+			isa = PBXNativeTarget;
+			buildConfigurationList = 97C147051CF9000F007C117D /* Build configuration list for PBXNativeTarget "Runner" */;
+			buildPhases = (
+				3EA46EF11B42FC3BFF6A4BBC /* [CP] Check Pods Manifest.lock */,
+				9705A1C41CF9048500538489 /* Embed Frameworks */,
+				55067970987309DE09E9DE72 /* [CP] Copy Pods Resources */,
+				2838A0ADC44730F0A2303575 /* [CP] Embed Pods Frameworks */,
+				9740EEB61CF901F6004384FC /* Run Script */,
+				97C146EA1CF9000F007C117D /* Sources */,
+				97C146EB1CF9000F007C117D /* Frameworks */,
+				97C146EC1CF9000F007C117D /* Resources */,
+				3B06AD1E1E4923F5004D2608 /* Thin Binary */,
+			);
+			buildRules = (
+			);
+			dependencies = (
+			);
+			name = Runner;
+			productName = Runner;
+			productReference = 97C146EE1CF9000F007C117D /* Runner.app */;
+			productType = "com.apple.product-type.application";
+		};
+/* End PBXNativeTarget section */
+
+/* Begin PBXProject section */
+		97C146E61CF9000F007C117D /* Project object */ = {
+			isa = PBXProject;
+			attributes = {
+				LastUpgradeCheck = 1020;
+				ORGANIZATIONNAME = "";
+				TargetAttributes = {
+					97C146ED1CF9000F007C117D = {
+						CreatedOnToolsVersion = 7.3.1;
+						LastSwiftMigration = 1100;
+					};
+				};
+			};
+			buildConfigurationList = 97C146E91CF9000F007C117D /* Build configuration list for PBXProject "Runner" */;
+			compatibilityVersion = "Xcode 9.3";
+			developmentRegion = en;
+			hasScannedForEncodings = 0;
+			knownRegions = (
+				en,
+				Base,
+			);
+			mainGroup = 97C146E51CF9000F007C117D;
+			productRefGroup = 97C146EF1CF9000F007C117D /* Products */;
+			projectDirPath = "";
+			projectRoot = "";
+			targets = (
+				97C146ED1CF9000F007C117D /* Runner */,
+			);
+		};
+/* End PBXProject section */
+
+/* Begin PBXResourcesBuildPhase section */
+		97C146EC1CF9000F007C117D /* Resources */ = {
+			isa = PBXResourcesBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+				97C147011CF9000F007C117D /* LaunchScreen.storyboard in Resources */,
+				6436409A27A31CD800820AF7 /* InfoPlist.strings in Resources */,
+				3B3967161E833CAA004F5970 /* AppFrameworkInfo.plist in Resources */,
+				6426BE1225AC0EBD0080CC2A /* GoogleService-Info.plist in Resources */,
+				97C146FE1CF9000F007C117D /* Assets.xcassets in Resources */,
+				97C146FC1CF9000F007C117D /* Main.storyboard in Resources */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXResourcesBuildPhase section */
+
+/* Begin PBXShellScriptBuildPhase section */
+		2838A0ADC44730F0A2303575 /* [CP] Embed Pods Frameworks */ = {
+			isa = PBXShellScriptBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+			);
+			inputFileListPaths = (
+				"${PODS_ROOT}/Target Support Files/Pods-Runner/Pods-Runner-frameworks-${CONFIGURATION}-input-files.xcfilelist",
+			);
+			name = "[CP] Embed Pods Frameworks";
+			outputFileListPaths = (
+				"${PODS_ROOT}/Target Support Files/Pods-Runner/Pods-Runner-frameworks-${CONFIGURATION}-output-files.xcfilelist",
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+			shellPath = /bin/sh;
+			shellScript = "\"${PODS_ROOT}/Target Support Files/Pods-Runner/Pods-Runner-frameworks.sh\"\n";
+			showEnvVarsInLog = 0;
+		};
+		3B06AD1E1E4923F5004D2608 /* Thin Binary */ = {
+			isa = PBXShellScriptBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+			);
+			inputPaths = (
+			);
+			name = "Thin Binary";
+			outputPaths = (
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+			shellPath = /bin/sh;
+			shellScript = "/bin/sh \"$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh\" embed_and_thin";
+		};
+		3EA46EF11B42FC3BFF6A4BBC /* [CP] Check Pods Manifest.lock */ = {
+			isa = PBXShellScriptBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+			);
+			inputFileListPaths = (
+			);
+			inputPaths = (
+				"${PODS_PODFILE_DIR_PATH}/Podfile.lock",
+				"${PODS_ROOT}/Manifest.lock",
+			);
+			name = "[CP] Check Pods Manifest.lock";
+			outputFileListPaths = (
+			);
+			outputPaths = (
+				"$(DERIVED_FILE_DIR)/Pods-Runner-checkManifestLockResult.txt",
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+			shellPath = /bin/sh;
+			shellScript = "diff \"${PODS_PODFILE_DIR_PATH}/Podfile.lock\" \"${PODS_ROOT}/Manifest.lock\" > /dev/null\nif [ $? != 0 ] ; then\n    # print error to STDERR\n    echo \"error: The sandbox is not in sync with the Podfile.lock. Run 'pod install' or update your CocoaPods installation.\" >&2\n    exit 1\nfi\n# This output is used by Xcode 'outputs' to avoid re-running this script phase.\necho \"SUCCESS\" > \"${SCRIPT_OUTPUT_FILE_0}\"\n";
+			showEnvVarsInLog = 0;
+		};
+		55067970987309DE09E9DE72 /* [CP] Copy Pods Resources */ = {
+			isa = PBXShellScriptBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+			);
+			inputFileListPaths = (
+				"${PODS_ROOT}/Target Support Files/Pods-Runner/Pods-Runner-resources-${CONFIGURATION}-input-files.xcfilelist",
+			);
+			name = "[CP] Copy Pods Resources";
+			outputFileListPaths = (
+				"${PODS_ROOT}/Target Support Files/Pods-Runner/Pods-Runner-resources-${CONFIGURATION}-output-files.xcfilelist",
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+			shellPath = /bin/sh;
+			shellScript = "\"${PODS_ROOT}/Target Support Files/Pods-Runner/Pods-Runner-resources.sh\"\n";
+			showEnvVarsInLog = 0;
+		};
+		9740EEB61CF901F6004384FC /* Run Script */ = {
+			isa = PBXShellScriptBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+			);
+			inputPaths = (
+			);
+			name = "Run Script";
+			outputPaths = (
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+			shellPath = /bin/sh;
+			shellScript = "/bin/sh \"$FLUTTER_ROOT/packages/flutter_tools/bin/xcode_backend.sh\" build";
+		};
+/* End PBXShellScriptBuildPhase section */
+
+/* Begin PBXSourcesBuildPhase section */
+		97C146EA1CF9000F007C117D /* Sources */ = {
+			isa = PBXSourcesBuildPhase;
+			buildActionMask = 2147483647;
+			files = (
+				74858FAF1ED2DC5600515810 /* AppDelegate.swift in Sources */,
+				1498D2341E8E89220040F4C2 /* GeneratedPluginRegistrant.m in Sources */,
+			);
+			runOnlyForDeploymentPostprocessing = 0;
+		};
+/* End PBXSourcesBuildPhase section */
+
+/* Begin PBXVariantGroup section */
+		6436409C27A31CD800820AF7 /* InfoPlist.strings */ = {
+			isa = PBXVariantGroup;
+			children = (
+
+			);
+			name = InfoPlist.strings;
+			sourceTree = "<group>";
+		};
+		97C146FA1CF9000F007C117D /* Main.storyboard */ = {
+			isa = PBXVariantGroup;
+			children = (
+				97C146FB1CF9000F007C117D /* Base */,
+			);
+			name = Main.storyboard;
+			sourceTree = "<group>";
+		};
+		97C146FF1CF9000F007C117D /* LaunchScreen.storyboard */ = {
+			isa = PBXVariantGroup;
+			children = (
+				97C147001CF9000F007C117D /* Base */,
+			);
+			name = LaunchScreen.storyboard;
+			sourceTree = "<group>";
+		};
+/* End PBXVariantGroup section */
+
+/* Begin XCBuildConfiguration section */
+		249021D3217E4FDB00AE95B9 /* Profile */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "iPhone Developer";
+				COPY_PHASE_STRIP = NO;
+				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
+				ENABLE_NS_ASSERTIONS = NO;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				GCC_C_LANGUAGE_STANDARD = gnu99;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				IPHONEOS_DEPLOYMENT_TARGET = 13.0;
+				MTL_ENABLE_DEBUG_INFO = NO;
+				SDKROOT = iphoneos;
+				SUPPORTED_PLATFORMS = iphoneos;
+				TARGETED_DEVICE_FAMILY = "1,2";
+				VALIDATE_PRODUCT = YES;
+			};
+			name = Profile;
+		};
+		249021D4217E4FDB00AE95B9 /* Profile */ = {
+			isa = XCBuildConfiguration;
+			baseConfigurationReference = 7AFA3C8E1D35360C0083082E /* Release.xcconfig */;
+			buildSettings = {
+				ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES = YES;
+				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
+				CLANG_ENABLE_MODULES = YES;
+				CODE_SIGN_ENTITLEMENTS = Runner/Runner.entitlements;
+				CURRENT_PROJECT_VERSION = "$(FLUTTER_BUILD_NUMBER)";
+				ENABLE_BITCODE = NO;
+				FRAMEWORK_SEARCH_PATHS = (
+					"$(inherited)",
+					"$(PROJECT_DIR)/Flutter",
+				);
+				INFOPLIST_FILE = Runner/Info.plist;
+				LD_RUNPATH_SEARCH_PATHS = (
+					"$(inherited)",
+					"@executable_path/Frameworks",
+				);
+				LIBRARY_SEARCH_PATHS = (
+					"$(inherited)",
+					"$(PROJECT_DIR)/Flutter",
+				);
+				PRODUCT_BUNDLE_IDENTIFIER = com.khetiharii.app;
+				PRODUCT_NAME = "$(TARGET_NAME)";
+				SWIFT_OBJC_BRIDGING_HEADER = "Runner/Runner-Bridging-Header.h";
+				SWIFT_VERSION = 5.0;
+				VERSIONING_SYSTEM = "apple-generic";
+			};
+			name = Profile;
+		};
+		97C147031CF9000F007C117D /* Debug */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "iPhone Developer";
+				COPY_PHASE_STRIP = NO;
+				DEBUG_INFORMATION_FORMAT = dwarf;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				ENABLE_TESTABILITY = YES;
+				GCC_C_LANGUAGE_STANDARD = gnu99;
+				GCC_DYNAMIC_NO_PIC = NO;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_OPTIMIZATION_LEVEL = 0;
+				GCC_PREPROCESSOR_DEFINITIONS = (
+					"DEBUG=1",
+					"$(inherited)",
+				);
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				IPHONEOS_DEPLOYMENT_TARGET = 13.0;
+				MTL_ENABLE_DEBUG_INFO = YES;
+				ONLY_ACTIVE_ARCH = YES;
+				SDKROOT = iphoneos;
+				TARGETED_DEVICE_FAMILY = "1,2";
+			};
+			name = Debug;
+		};
+		97C147041CF9000F007C117D /* Release */ = {
+			isa = XCBuildConfiguration;
+			buildSettings = {
+				ALWAYS_SEARCH_USER_PATHS = NO;
+				CLANG_ANALYZER_NONNULL = YES;
+				CLANG_CXX_LANGUAGE_STANDARD = "gnu++0x";
+				CLANG_CXX_LIBRARY = "libc++";
+				CLANG_ENABLE_MODULES = YES;
+				CLANG_ENABLE_OBJC_ARC = YES;
+				CLANG_WARN_BLOCK_CAPTURE_AUTORELEASING = YES;
+				CLANG_WARN_BOOL_CONVERSION = YES;
+				CLANG_WARN_COMMA = YES;
+				CLANG_WARN_CONSTANT_CONVERSION = YES;
+				CLANG_WARN_DEPRECATED_OBJC_IMPLEMENTATIONS = YES;
+				CLANG_WARN_DIRECT_OBJC_ISA_USAGE = YES_ERROR;
+				CLANG_WARN_EMPTY_BODY = YES;
+				CLANG_WARN_ENUM_CONVERSION = YES;
+				CLANG_WARN_INFINITE_RECURSION = YES;
+				CLANG_WARN_INT_CONVERSION = YES;
+				CLANG_WARN_NON_LITERAL_NULL_CONVERSION = YES;
+				CLANG_WARN_OBJC_IMPLICIT_RETAIN_SELF = YES;
+				CLANG_WARN_OBJC_LITERAL_CONVERSION = YES;
+				CLANG_WARN_OBJC_ROOT_CLASS = YES_ERROR;
+				CLANG_WARN_RANGE_LOOP_ANALYSIS = YES;
+				CLANG_WARN_STRICT_PROTOTYPES = YES;
+				CLANG_WARN_SUSPICIOUS_MOVE = YES;
+				CLANG_WARN_UNREACHABLE_CODE = YES;
+				CLANG_WARN__DUPLICATE_METHOD_MATCH = YES;
+				"CODE_SIGN_IDENTITY[sdk=iphoneos*]" = "iPhone Developer";
+				COPY_PHASE_STRIP = NO;
+				DEBUG_INFORMATION_FORMAT = "dwarf-with-dsym";
+				ENABLE_NS_ASSERTIONS = NO;
+				ENABLE_STRICT_OBJC_MSGSEND = YES;
+				GCC_C_LANGUAGE_STANDARD = gnu99;
+				GCC_NO_COMMON_BLOCKS = YES;
+				GCC_WARN_64_TO_32_BIT_CONVERSION = YES;
+				GCC_WARN_ABOUT_RETURN_TYPE = YES_ERROR;
+				GCC_WARN_UNDECLARED_SELECTOR = YES;
+				GCC_WARN_UNINITIALIZED_AUTOS = YES_AGGRESSIVE;
+				GCC_WARN_UNUSED_FUNCTION = YES;
+				GCC_WARN_UNUSED_VARIABLE = YES;
+				IPHONEOS_DEPLOYMENT_TARGET = 13.0;
+				MTL_ENABLE_DEBUG_INFO = NO;
+				SDKROOT = iphoneos;
+				SUPPORTED_PLATFORMS = iphoneos;
+				SWIFT_COMPILATION_MODE = wholemodule;
+				SWIFT_OPTIMIZATION_LEVEL = "-O";
+				TARGETED_DEVICE_FAMILY = "1,2";
+				VALIDATE_PRODUCT = YES;
+			};
+			name = Release;
+		};
+		97C147061CF9000F007C117D /* Debug */ = {
+			isa = XCBuildConfiguration;
+			baseConfigurationReference = 9740EEB21CF90195004384FC /* Debug.xcconfig */;
+			buildSettings = {
+				ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES = YES;
+				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
+				CLANG_ENABLE_MODULES = YES;
+				CODE_SIGN_ENTITLEMENTS = Runner/Runner.entitlements;
+				CURRENT_PROJECT_VERSION = "$(FLUTTER_BUILD_NUMBER)";
+				ENABLE_BITCODE = NO;
+				FRAMEWORK_SEARCH_PATHS = (
+					"$(inherited)",
+					"$(PROJECT_DIR)/Flutter",
+				);
+				INFOPLIST_FILE = Runner/Info.plist;
+				LD_RUNPATH_SEARCH_PATHS = (
+					"$(inherited)",
+					"@executable_path/Frameworks",
+				);
+				LIBRARY_SEARCH_PATHS = (
+					"$(inherited)",
+					"$(PROJECT_DIR)/Flutter",
+				);
+				PRODUCT_BUNDLE_IDENTIFIER = com.khetiharii.app;
+				PRODUCT_NAME = "$(TARGET_NAME)";
+				SWIFT_OBJC_BRIDGING_HEADER = "Runner/Runner-Bridging-Header.h";
+				SWIFT_OPTIMIZATION_LEVEL = "-Onone";
+				SWIFT_VERSION = 5.0;
+				VERSIONING_SYSTEM = "apple-generic";
+			};
+			name = Debug;
+		};
+		97C147071CF9000F007C117D /* Release */ = {
+			isa = XCBuildConfiguration;
+			baseConfigurationReference = 7AFA3C8E1D35360C0083082E /* Release.xcconfig */;
+			buildSettings = {
+				ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES = YES;
+				ASSETCATALOG_COMPILER_APPICON_NAME = AppIcon;
+				CLANG_ENABLE_MODULES = YES;
+				CODE_SIGN_ENTITLEMENTS = Runner/Runner.entitlements;
+				CURRENT_PROJECT_VERSION = "$(FLUTTER_BUILD_NUMBER)";
+				ENABLE_BITCODE = NO;
+				FRAMEWORK_SEARCH_PATHS = (
+					"$(inherited)",
+					"$(PROJECT_DIR)/Flutter",
+				);
+				INFOPLIST_FILE = Runner/Info.plist;
+				LD_RUNPATH_SEARCH_PATHS = (
+					"$(inherited)",
+					"@executable_path/Frameworks",
+				);
+				LIBRARY_SEARCH_PATHS = (
+					"$(inherited)",
+					"$(PROJECT_DIR)/Flutter",
+				);
+				PRODUCT_BUNDLE_IDENTIFIER = com.khetiharii.app;
+				PRODUCT_NAME = "$(TARGET_NAME)";
+				SWIFT_OBJC_BRIDGING_HEADER = "Runner/Runner-Bridging-Header.h";
+				SWIFT_VERSION = 5.0;
+				VERSIONING_SYSTEM = "apple-generic";
+			};
+			name = Release;
+		};
+/* End XCBuildConfiguration section */
+
+/* Begin XCConfigurationList section */
+		97C146E91CF9000F007C117D /* Build configuration list for PBXProject "Runner" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				97C147031CF9000F007C117D /* Debug */,
+				97C147041CF9000F007C117D /* Release */,
+				249021D3217E4FDB00AE95B9 /* Profile */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+		97C147051CF9000F007C117D /* Build configuration list for PBXNativeTarget "Runner" */ = {
+			isa = XCConfigurationList;
+			buildConfigurations = (
+				97C147061CF9000F007C117D /* Debug */,
+				97C147071CF9000F007C117D /* Release */,
+				249021D4217E4FDB00AE95B9 /* Profile */,
+			);
+			defaultConfigurationIsVisible = 0;
+			defaultConfigurationName = Release;
+		};
+/* End XCConfigurationList section */
+	};
+	rootObject = 97C146E61CF9000F007C117D /* Project object */;
+}
Index: ios/Flutter/Debug.xcconfig
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Flutter/Debug.xcconfig b/ios/Flutter/Debug.xcconfig
new file mode 100644
--- /dev/null	(date 1708365759460)
+++ b/ios/Flutter/Debug.xcconfig	(date 1708365759460)
@@ -0,0 +1,2 @@
+#include "Pods/Target Support Files/Pods-Runner/Pods-Runner.debug.xcconfig"
+#include "Generated.xcconfig"
Index: ios/Runner.xcodeproj/xcshareddata/xcschemes/Runner.xcscheme
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Runner.xcodeproj/xcshareddata/xcschemes/Runner.xcscheme b/ios/Runner.xcodeproj/xcshareddata/xcschemes/Runner.xcscheme
new file mode 100644
--- /dev/null	(date 1708365759617)
+++ b/ios/Runner.xcodeproj/xcshareddata/xcschemes/Runner.xcscheme	(date 1708365759617)
@@ -0,0 +1,91 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Scheme
+   LastUpgradeVersion = "1020"
+   version = "1.3">
+   <BuildAction
+      parallelizeBuildables = "YES"
+      buildImplicitDependencies = "YES">
+      <BuildActionEntries>
+         <BuildActionEntry
+            buildForTesting = "YES"
+            buildForRunning = "YES"
+            buildForProfiling = "YES"
+            buildForArchiving = "YES"
+            buildForAnalyzing = "YES">
+            <BuildableReference
+               BuildableIdentifier = "primary"
+               BlueprintIdentifier = "97C146ED1CF9000F007C117D"
+               BuildableName = "Runner.app"
+               BlueprintName = "Runner"
+               ReferencedContainer = "container:Runner.xcodeproj">
+            </BuildableReference>
+         </BuildActionEntry>
+      </BuildActionEntries>
+   </BuildAction>
+   <TestAction
+      buildConfiguration = "Debug"
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      shouldUseLaunchSchemeArgsEnv = "YES">
+      <Testables>
+      </Testables>
+      <MacroExpansion>
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "97C146ED1CF9000F007C117D"
+            BuildableName = "Runner.app"
+            BlueprintName = "Runner"
+            ReferencedContainer = "container:Runner.xcodeproj">
+         </BuildableReference>
+      </MacroExpansion>
+      <AdditionalOptions>
+      </AdditionalOptions>
+   </TestAction>
+   <LaunchAction
+      buildConfiguration = "Debug"
+      selectedDebuggerIdentifier = "Xcode.DebuggerFoundation.Debugger.LLDB"
+      selectedLauncherIdentifier = "Xcode.DebuggerFoundation.Launcher.LLDB"
+      launchStyle = "0"
+      useCustomWorkingDirectory = "NO"
+      ignoresPersistentStateOnLaunch = "NO"
+      debugDocumentVersioning = "YES"
+      debugServiceExtension = "internal"
+      allowLocationSimulation = "YES">
+      <BuildableProductRunnable
+         runnableDebuggingMode = "0">
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "97C146ED1CF9000F007C117D"
+            BuildableName = "Runner.app"
+            BlueprintName = "Runner"
+            ReferencedContainer = "container:Runner.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+      <AdditionalOptions>
+      </AdditionalOptions>
+   </LaunchAction>
+   <ProfileAction
+      buildConfiguration = "Profile"
+      shouldUseLaunchSchemeArgsEnv = "YES"
+      savedToolIdentifier = ""
+      useCustomWorkingDirectory = "NO"
+      debugDocumentVersioning = "YES">
+      <BuildableProductRunnable
+         runnableDebuggingMode = "0">
+         <BuildableReference
+            BuildableIdentifier = "primary"
+            BlueprintIdentifier = "97C146ED1CF9000F007C117D"
+            BuildableName = "Runner.app"
+            BlueprintName = "Runner"
+            ReferencedContainer = "container:Runner.xcodeproj">
+         </BuildableReference>
+      </BuildableProductRunnable>
+   </ProfileAction>
+   <AnalyzeAction
+      buildConfiguration = "Debug">
+   </AnalyzeAction>
+   <ArchiveAction
+      buildConfiguration = "Release"
+      revealArchiveInOrganizer = "YES">
+   </ArchiveAction>
+</Scheme>
Index: ios/Runner.xcodeproj/project.xcworkspace/contents.xcworkspacedata
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Runner.xcodeproj/project.xcworkspace/contents.xcworkspacedata b/ios/Runner.xcodeproj/project.xcworkspace/contents.xcworkspacedata
new file mode 100644
--- /dev/null	(date 1708365759633)
+++ b/ios/Runner.xcodeproj/project.xcworkspace/contents.xcworkspacedata	(date 1708365759633)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Workspace
+   version = "1.0">
+   <FileRef
+      location = "group:Runner.xcodeproj">
+   </FileRef>
+</Workspace>
Index: ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings b/ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings
new file mode 100644
--- /dev/null	(date 1708365759664)
+++ b/ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings	(date 1708365759664)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>PreviewsEnabled</key>
+	<false/>
+</dict>
+</plist>
Index: ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist b/ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
new file mode 100644
--- /dev/null	(date 1708365759648)
+++ b/ios/Runner.xcodeproj/project.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist	(date 1708365759648)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>IDEDidComputeMac32BitWarning</key>
+	<true/>
+</dict>
+</plist>
Index: ios/ImageNotification/NotificationService.swift
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/ImageNotification/NotificationService.swift b/ios/ImageNotification/NotificationService.swift
new file mode 100644
--- /dev/null	(date 1708365759397)
+++ b/ios/ImageNotification/NotificationService.swift	(date 1708365759397)
@@ -0,0 +1,27 @@
+import FirebaseMessaging
+import UserNotifications
+
+class NotificationService: UNNotificationServiceExtension {
+
+    var contentHandler: ((UNNotificationContent) -> Void)?
+    var bestAttemptContent: UNMutableNotificationContent?
+
+    override func didReceive(_ request: UNNotificationRequest, withContentHandler contentHandler: @escaping (UNNotificationContent) -> Void) {
+        self.contentHandler = contentHandler
+        bestAttemptContent = request.content
+          .mutableCopy() as? UNMutableNotificationContent
+        guard let bestAttemptContent = bestAttemptContent else { return }
+        FIRMessagingExtensionHelper().populateNotificationContent(
+          bestAttemptContent,
+          withContentHandler: contentHandler)
+    }
+    
+    override func serviceExtensionTimeWillExpire() {
+        // Called just before the extension will be terminated by the system.
+        // Use this as an opportunity to deliver your "best attempt" at modified content, otherwise the original push payload will be used.
+        if let contentHandler = contentHandler, let bestAttemptContent =  bestAttemptContent {
+            contentHandler(bestAttemptContent)
+        }
+    }
+
+}
Index: ios/ImageNotification/Info.plist
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/ImageNotification/Info.plist b/ios/ImageNotification/Info.plist
new file mode 100644
--- /dev/null	(date 1708365759413)
+++ b/ios/ImageNotification/Info.plist	(date 1708365759413)
@@ -0,0 +1,31 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>CFBundleDevelopmentRegion</key>
+	<string>$(DEVELOPMENT_LANGUAGE)</string>
+	<key>CFBundleDisplayName</key>
+	<string>ImageNotification</string>
+	<key>CFBundleExecutable</key>
+	<string>$(EXECUTABLE_NAME)</string>
+	<key>CFBundleIdentifier</key>
+	<string>$(PRODUCT_BUNDLE_IDENTIFIER)</string>
+	<key>CFBundleInfoDictionaryVersion</key>
+	<string>6.0</string>
+	<key>CFBundleName</key>
+	<string>$(PRODUCT_NAME)</string>
+	<key>CFBundlePackageType</key>
+	<string>$(PRODUCT_BUNDLE_PACKAGE_TYPE)</string>
+	<key>CFBundleShortVersionString</key>
+	<string>1.0</string>
+	<key>CFBundleVersion</key>
+	<string>1</string>
+	<key>NSExtension</key>
+	<dict>
+		<key>NSExtensionPointIdentifier</key>
+		<string>com.apple.usernotifications.service</string>
+		<key>NSExtensionPrincipalClass</key>
+		<string>$(PRODUCT_MODULE_NAME).NotificationService</string>
+	</dict>
+</dict>
+</plist>
Index: ios/Runner.xcworkspace/contents.xcworkspacedata
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Runner.xcworkspace/contents.xcworkspacedata b/ios/Runner.xcworkspace/contents.xcworkspacedata
new file mode 100644
--- /dev/null	(date 1708365759510)
+++ b/ios/Runner.xcworkspace/contents.xcworkspacedata	(date 1708365759510)
@@ -0,0 +1,7 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<Workspace
+   version = "1.0">
+   <FileRef
+      location = "group:Runner.xcodeproj">
+   </FileRef>
+</Workspace>
Index: ios/Runner.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Runner.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings b/ios/Runner.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings
new file mode 100644
--- /dev/null	(date 1708365759554)
+++ b/ios/Runner.xcworkspace/xcshareddata/WorkspaceSettings.xcsettings	(date 1708365759554)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>PreviewsEnabled</key>
+	<false/>
+</dict>
+</plist>
Index: ios/Runner.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/ios/Runner.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist b/ios/Runner.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist
new file mode 100644
--- /dev/null	(date 1708365759538)
+++ b/ios/Runner.xcworkspace/xcshareddata/IDEWorkspaceChecks.plist	(date 1708365759538)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
+<plist version="1.0">
+<dict>
+	<key>IDEDidComputeMac32BitWarning</key>
+	<true/>
+</dict>
+</plist>
Index: lib/app_state.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/app_state.dart b/lib/app_state.dart
new file mode 100644
--- /dev/null	(date 1708365757121)
+++ b/lib/app_state.dart	(date 1708365757121)
@@ -0,0 +1,90 @@
+import 'package:flutter/material.dart';
+import '/backend/backend.dart';
+import '/backend/schema/structs/index.dart';
+import 'package:shared_preferences/shared_preferences.dart';
+import 'flutter_flow/flutter_flow_util.dart';
+
+class FFAppState extends ChangeNotifier {
+  static FFAppState _instance = FFAppState._internal();
+
+  factory FFAppState() {
+    return _instance;
+  }
+
+  FFAppState._internal();
+
+  static void reset() {
+    _instance = FFAppState._internal();
+  }
+
+  Future initializePersistedState() async {}
+
+  void update(VoidCallback callback) {
+    callback();
+    notifyListeners();
+  }
+
+  String _userDiet = '';
+  String get userDiet => _userDiet;
+  set userDiet(String _value) {
+    _userDiet = _value;
+  }
+
+  List<String> _userAllergens = [];
+  List<String> get userAllergens => _userAllergens;
+  set userAllergens(List<String> _value) {
+    _userAllergens = _value;
+  }
+
+  void addToUserAllergens(String _value) {
+    _userAllergens.add(_value);
+  }
+
+  void removeFromUserAllergens(String _value) {
+    _userAllergens.remove(_value);
+  }
+
+  void removeAtIndexFromUserAllergens(int _index) {
+    _userAllergens.removeAt(_index);
+  }
+
+  void updateUserAllergensAtIndex(
+    int _index,
+    String Function(String) updateFn,
+  ) {
+    _userAllergens[_index] = updateFn(_userAllergens[_index]);
+  }
+
+  void insertAtIndexInUserAllergens(int _index, String _value) {
+    _userAllergens.insert(_index, _value);
+  }
+
+  List<String> _userIngredientDislikes = [];
+  List<String> get userIngredientDislikes => _userIngredientDislikes;
+  set userIngredientDislikes(List<String> _value) {
+    _userIngredientDislikes = _value;
+  }
+
+  void addToUserIngredientDislikes(String _value) {
+    _userIngredientDislikes.add(_value);
+  }
+
+  void removeFromUserIngredientDislikes(String _value) {
+    _userIngredientDislikes.remove(_value);
+  }
+
+  void removeAtIndexFromUserIngredientDislikes(int _index) {
+    _userIngredientDislikes.removeAt(_index);
+  }
+
+  void updateUserIngredientDislikesAtIndex(
+    int _index,
+    String Function(String) updateFn,
+  ) {
+    _userIngredientDislikes[_index] = updateFn(_userIngredientDislikes[_index]);
+  }
+
+  void insertAtIndexInUserIngredientDislikes(int _index, String _value) {
+    _userIngredientDislikes.insert(_index, _value);
+  }
+}
Index: lib/main.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/main.dart b/lib/main.dart
new file mode 100644
--- /dev/null	(date 1708368401428)
+++ b/lib/main.dart	(date 1708368401428)
@@ -0,0 +1,174 @@
+import 'package:provider/provider.dart';
+import 'package:flutter/gestures.dart';
+import 'package:flutter/material.dart';
+
+import 'package:flutter_localizations/flutter_localizations.dart';
+import 'package:flutter_web_plugins/url_strategy.dart';
+import 'package:firebase_core/firebase_core.dart';
+import 'auth/firebase_auth/firebase_user_provider.dart';
+import 'auth/firebase_auth/auth_util.dart';
+
+import 'backend/firebase/firebase_config.dart';
+import 'flutter_flow/flutter_flow_theme.dart';
+import 'flutter_flow/flutter_flow_util.dart';
+import 'flutter_flow/internationalization.dart';
+import 'package:font_awesome_flutter/font_awesome_flutter.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'flutter_flow/nav/nav.dart';
+import 'index.dart';
+
+void main() async {
+  WidgetsFlutterBinding.ensureInitialized();
+  usePathUrlStrategy();
+  await initFirebase();
+
+  await FlutterFlowTheme.initialize();
+
+  final appState = FFAppState(); // Initialize FFAppState
+  await appState.initializePersistedState();
+
+  runApp(ChangeNotifierProvider(
+    create: (context) => appState,
+    child: MyApp(),
+  ));
+}
+
+class MyApp extends StatefulWidget {
+  // This widget is the root of your application.
+  @override
+  State<MyApp> createState() => _MyAppState();
+
+  static _MyAppState of(BuildContext context) =>
+      context.findAncestorStateOfType<_MyAppState>()!;
+}
+
+class _MyAppState extends State<MyApp> {
+  Locale? _locale;
+  ThemeMode _themeMode = FlutterFlowTheme.themeMode;
+
+  late Stream<BaseAuthUser> userStream;
+
+  late AppStateNotifier _appStateNotifier;
+  late GoRouter _router;
+
+  @override
+  void initState() {
+    super.initState();
+
+    _appStateNotifier = AppStateNotifier.instance;
+    _router = createRouter(_appStateNotifier);
+    userStream = khetihariiFirebaseUserStream()
+      ..listen((user) => _appStateNotifier.update(user));
+    jwtTokenStream.listen((_) {});
+    Future.delayed(
+      Duration(milliseconds: 1000),
+      () => _appStateNotifier.stopShowingSplashImage(),
+    );
+  }
+
+  void setLocale(String language) {
+    setState(() => _locale = createLocale(language));
+  }
+
+  void setThemeMode(ThemeMode mode) => setState(() {
+        _themeMode = mode;
+        FlutterFlowTheme.saveThemeMode(mode);
+      });
+
+  @override
+  Widget build(BuildContext context) {
+    return MaterialApp.router(
+      debugShowCheckedModeBanner: false,
+      title: 'Khetiharii',
+      localizationsDelegates: [
+        FFLocalizationsDelegate(),
+        GlobalMaterialLocalizations.delegate,
+        GlobalWidgetsLocalizations.delegate,
+        GlobalCupertinoLocalizations.delegate,
+      ],
+      locale: _locale,
+      supportedLocales: const [
+        Locale('en'),
+      ],
+      theme: ThemeData(
+        brightness: Brightness.light,
+      ),
+      darkTheme: ThemeData(
+        brightness: Brightness.dark,
+      ),
+      themeMode: _themeMode,
+      routerConfig: _router,
+    );
+  }
+}
+
+class NavBarPage extends StatefulWidget {
+  NavBarPage({Key? key, this.initialPage, this.page}) : super(key: key);
+
+  final String? initialPage;
+  final Widget? page;
+
+  @override
+  _NavBarPageState createState() => _NavBarPageState();
+}
+
+/// This is the private State class that goes with NavBarPage.
+class _NavBarPageState extends State<NavBarPage> {
+  String _currentPageName = 'Dashboard';
+  late Widget? _currentPage;
+
+  @override
+  void initState() {
+    super.initState();
+    _currentPageName = widget.initialPage ?? _currentPageName;
+    _currentPage = widget.page;
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    final tabs = {
+      'Dashboard': DashboardWidget(),
+      'Profile': ProfileWidget(),
+    };
+    final currentIndex = tabs.keys.toList().indexOf(_currentPageName);
+
+    return Scaffold(
+      body: _currentPage ?? tabs[_currentPageName],
+      bottomNavigationBar: BottomNavigationBar(
+        currentIndex: currentIndex,
+        onTap: (i) => setState(() {
+          _currentPage = null;
+          _currentPageName = tabs.keys.toList()[i];
+        }),
+        backgroundColor: FlutterFlowTheme.of(context).primaryBackground,
+        selectedItemColor: FlutterFlowTheme.of(context).primary,
+        unselectedItemColor: FlutterFlowTheme.of(context).secondaryText,
+        showSelectedLabels: true,
+        showUnselectedLabels: true,
+        type: BottomNavigationBarType.fixed,
+        items: <BottomNavigationBarItem>[
+          BottomNavigationBarItem(
+            icon: FaIcon(
+              FontAwesomeIcons.borderAll,
+              size: 24.0,
+            ),
+            label: 'Dashboard',
+            tooltip: '',
+          ),
+          BottomNavigationBarItem(
+            icon: Icon(
+              Icons.person_outline_rounded,
+              size: 24.0,
+            ),
+            activeIcon: Icon(
+              Icons.person_rounded,
+              size: 24.0,
+            ),
+            label: 'Profile',
+            tooltip: '',
+          )
+        ],
+      ),
+    );
+  }
+}
Index: lib/index.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/index.dart b/lib/index.dart
new file mode 100644
--- /dev/null	(date 1708365757168)
+++ b/lib/index.dart	(date 1708365757168)
@@ -0,0 +1,23 @@
+// Export pages
+export '/pages/onboarding/splash/splash_widget.dart' show SplashWidget;
+export '/pages/onboarding/sign_in/sign_in_widget.dart' show SignInWidget;
+export '/pages/onboarding/onboarding_slideshow/onboarding_slideshow_widget.dart'
+    show OnboardingSlideshowWidget;
+export '/pages/onboarding/onboarding_create_account/onboarding_create_account_widget.dart'
+    show OnboardingCreateAccountWidget;
+export '/pages/home/dashboard/dashboard_widget.dart' show DashboardWidget;
+export '/pages/profile/profile/profile_widget.dart' show ProfileWidget;
+export '/pages/profile/edit_profile/edit_profile_widget.dart'
+    show EditProfileWidget;
+export '/pages/profile/about_us/about_us_widget.dart' show AboutUsWidget;
+export '/pages/profile/personal_assistance/personal_assistance_widget.dart'
+    show PersonalAssistanceWidget;
+export '/pages/profile/support_center/support_center_widget.dart'
+    show SupportCenterWidget;
+export '/pages/onboarding/forgot_password/forgot_password_widget.dart'
+    show ForgotPasswordWidget;
+export '/pages/profile/edit_preferences/edit_preferences_widget.dart'
+    show EditPreferencesWidget;
+export '/book_equipment/book_equipment_widget.dart' show BookEquipmentWidget;
+export '/nearby_equipment/nearby_equipment_widget.dart'
+    show NearbyEquipmentWidget;
Index: .gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.gitignore b/.gitignore
new file mode 100644
--- /dev/null	(date 1708369757329)
+++ b/.gitignore	(date 1708369757329)
@@ -0,0 +1,3 @@
+# Project exclude paths
+/.dart_tool/
+/build/
\ No newline at end of file
Index: lib/auth/base_auth_user_provider.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/auth/base_auth_user_provider.dart b/lib/auth/base_auth_user_provider.dart
new file mode 100644
--- /dev/null	(date 1708365757216)
+++ b/lib/auth/base_auth_user_provider.dart	(date 1708365757216)
@@ -0,0 +1,36 @@
+class AuthUserInfo {
+  const AuthUserInfo({
+    this.uid,
+    this.email,
+    this.displayName,
+    this.photoUrl,
+    this.phoneNumber,
+  });
+
+  final String? uid;
+  final String? email;
+  final String? displayName;
+  final String? photoUrl;
+  final String? phoneNumber;
+}
+
+abstract class BaseAuthUser {
+  bool get loggedIn;
+  bool get emailVerified;
+
+  AuthUserInfo get authUserInfo;
+
+  Future? delete();
+  Future? updateEmail(String email);
+  Future? sendEmailVerification();
+  Future refreshUser() async {}
+
+  String? get uid => authUserInfo.uid;
+  String? get email => authUserInfo.email;
+  String? get displayName => authUserInfo.displayName;
+  String? get photoUrl => authUserInfo.photoUrl;
+  String? get phoneNumber => authUserInfo.phoneNumber;
+}
+
+BaseAuthUser? currentUser;
+bool get loggedIn => currentUser?.loggedIn ?? false;
Index: lib/auth/firebase_auth/jwt_token_auth.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/auth/firebase_auth/jwt_token_auth.dart b/lib/auth/firebase_auth/jwt_token_auth.dart
new file mode 100644
--- /dev/null	(date 1708365757309)
+++ b/lib/auth/firebase_auth/jwt_token_auth.dart	(date 1708365757309)
@@ -0,0 +1,4 @@
+import 'package:firebase_auth/firebase_auth.dart';
+
+Future<UserCredential?> jwtTokenSignIn(String jwtToken) =>
+    FirebaseAuth.instance.signInWithCustomToken(jwtToken);
Index: lib/auth/auth_manager.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/auth/auth_manager.dart b/lib/auth/auth_manager.dart
new file mode 100644
--- /dev/null	(date 1708365757184)
+++ b/lib/auth/auth_manager.dart	(date 1708365757184)
@@ -0,0 +1,74 @@
+import 'package:flutter/material.dart';
+
+import 'base_auth_user_provider.dart';
+
+abstract class AuthManager {
+  Future signOut();
+  Future deleteUser(BuildContext context);
+  Future updateEmail({required String email, required BuildContext context});
+  Future resetPassword({required String email, required BuildContext context});
+  Future sendEmailVerification() async => currentUser?.sendEmailVerification();
+  Future refreshUser() async => currentUser?.refreshUser();
+}
+
+mixin EmailSignInManager on AuthManager {
+  Future<BaseAuthUser?> signInWithEmail(
+    BuildContext context,
+    String email,
+    String password,
+  );
+
+  Future<BaseAuthUser?> createAccountWithEmail(
+    BuildContext context,
+    String email,
+    String password,
+  );
+}
+
+mixin AnonymousSignInManager on AuthManager {
+  Future<BaseAuthUser?> signInAnonymously(BuildContext context);
+}
+
+mixin AppleSignInManager on AuthManager {
+  Future<BaseAuthUser?> signInWithApple(BuildContext context);
+}
+
+mixin GoogleSignInManager on AuthManager {
+  Future<BaseAuthUser?> signInWithGoogle(BuildContext context);
+}
+
+mixin JwtSignInManager on AuthManager {
+  Future<BaseAuthUser?> signInWithJwtToken(
+    BuildContext context,
+    String jwtToken,
+  );
+}
+
+mixin PhoneSignInManager on AuthManager {
+  Future beginPhoneAuth({
+    required BuildContext context,
+    required String phoneNumber,
+    required void Function(BuildContext) onCodeSent,
+  });
+
+  Future verifySmsCode({
+    required BuildContext context,
+    required String smsCode,
+  });
+}
+
+mixin FacebookSignInManager on AuthManager {
+  Future<BaseAuthUser?> signInWithFacebook(BuildContext context);
+}
+
+mixin MicrosoftSignInManager on AuthManager {
+  Future<BaseAuthUser?> signInWithMicrosoft(
+    BuildContext context,
+    List<String> scopes,
+    String tenantId,
+  );
+}
+
+mixin GithubSignInManager on AuthManager {
+  Future<BaseAuthUser?> signInWithGithub(BuildContext context);
+}
Index: lib/auth/firebase_auth/apple_auth.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/auth/firebase_auth/apple_auth.dart b/lib/auth/firebase_auth/apple_auth.dart
new file mode 100644
--- /dev/null	(date 1708365757388)
+++ b/lib/auth/firebase_auth/apple_auth.dart	(date 1708365757388)
@@ -0,0 +1,72 @@
+import 'dart:convert';
+import 'dart:math';
+
+import 'package:crypto/crypto.dart';
+import 'package:firebase_auth/firebase_auth.dart';
+import 'package:flutter/foundation.dart';
+import 'package:sign_in_with_apple/sign_in_with_apple.dart';
+
+/// Generates a cryptographically secure random nonce, to be included in a
+/// credential request.
+String generateNonce([int length = 32]) {
+  final charset =
+      '0123456789ABCDEFGHIJKLMNOPQRSTUVXYZabcdefghijklmnopqrstuvwxyz-._';
+  final random = Random.secure();
+  return List.generate(length, (_) => charset[random.nextInt(charset.length)])
+      .join();
+}
+
+/// Returns the sha256 hash of [input] in hex notation.
+String sha256ofString(String input) {
+  final bytes = utf8.encode(input);
+  final digest = sha256.convert(bytes);
+  return digest.toString();
+}
+
+Future<UserCredential> appleSignIn() async {
+  if (kIsWeb) {
+    final provider = OAuthProvider("apple.com")
+      ..addScope('email')
+      ..addScope('name');
+
+    // Sign in the user with Firebase.
+    return await FirebaseAuth.instance.signInWithPopup(provider);
+  }
+  // To prevent replay attacks with the credential returned from Apple, we
+  // include a nonce in the credential request. When signing in in with
+  // Firebase, the nonce in the id token returned by Apple, is expected to
+  // match the sha256 hash of `rawNonce`.
+  final rawNonce = generateNonce();
+  final nonce = sha256ofString(rawNonce);
+
+  // Request credential for the currently signed in Apple account.
+  final appleCredential = await SignInWithApple.getAppleIDCredential(
+    scopes: [
+      AppleIDAuthorizationScopes.email,
+      AppleIDAuthorizationScopes.fullName,
+    ],
+    nonce: nonce,
+  );
+
+  // Create an `OAuthCredential` from the credential returned by Apple.
+  final oauthCredential = OAuthProvider("apple.com").credential(
+    idToken: appleCredential.identityToken,
+    rawNonce: rawNonce,
+  );
+
+  // Sign in the user with Firebase. If the nonce we generated earlier does
+  // not match the nonce in `appleCredential.identityToken`, sign in will fail.
+  final user =
+      await FirebaseAuth.instance.signInWithCredential(oauthCredential);
+
+  final displayName = [appleCredential.givenName, appleCredential.familyName]
+      .where((name) => name != null)
+      .join(' ');
+
+  // The display name does not automatically come with the user.
+  if (displayName.isNotEmpty) {
+    await user.user?.updateDisplayName(displayName);
+  }
+
+  return user;
+}
Index: lib/auth/firebase_auth/google_auth.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/auth/firebase_auth/google_auth.dart b/lib/auth/firebase_auth/google_auth.dart
new file mode 100644
--- /dev/null	(date 1708365757356)
+++ b/lib/auth/firebase_auth/google_auth.dart	(date 1708365757356)
@@ -0,0 +1,23 @@
+import 'package:firebase_auth/firebase_auth.dart';
+import 'package:flutter/foundation.dart';
+import 'package:google_sign_in/google_sign_in.dart';
+
+final _googleSignIn = GoogleSignIn();
+
+Future<UserCredential?> googleSignInFunc() async {
+  if (kIsWeb) {
+    // Once signed in, return the UserCredential
+    return await FirebaseAuth.instance.signInWithPopup(GoogleAuthProvider());
+  }
+
+  await signOutWithGoogle().catchError((_) => null);
+  final auth = await (await _googleSignIn.signIn())?.authentication;
+  if (auth == null) {
+    return null;
+  }
+  final credential = GoogleAuthProvider.credential(
+      idToken: auth.idToken, accessToken: auth.accessToken);
+  return FirebaseAuth.instance.signInWithCredential(credential);
+}
+
+Future signOutWithGoogle() => _googleSignIn.signOut();
Index: lib/auth/firebase_auth/firebase_user_provider.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/auth/firebase_auth/firebase_user_provider.dart b/lib/auth/firebase_auth/firebase_user_provider.dart
new file mode 100644
--- /dev/null	(date 1708365757294)
+++ b/lib/auth/firebase_auth/firebase_user_provider.dart	(date 1708365757294)
@@ -0,0 +1,70 @@
+import 'package:firebase_auth/firebase_auth.dart';
+import 'package:rxdart/rxdart.dart';
+
+import '../base_auth_user_provider.dart';
+
+export '../base_auth_user_provider.dart';
+
+class KhetihariiFirebaseUser extends BaseAuthUser {
+  KhetihariiFirebaseUser(this.user);
+  User? user;
+  bool get loggedIn => user != null;
+
+  @override
+  AuthUserInfo get authUserInfo => AuthUserInfo(
+        uid: user?.uid,
+        email: user?.email,
+        displayName: user?.displayName,
+        photoUrl: user?.photoURL,
+        phoneNumber: user?.phoneNumber,
+      );
+
+  @override
+  Future? delete() => user?.delete();
+
+  @override
+  Future? updateEmail(String email) async {
+    try {
+      await user?.updateEmail(email);
+    } catch (_) {
+      await user?.verifyBeforeUpdateEmail(email);
+    }
+  }
+
+  @override
+  Future? sendEmailVerification() => user?.sendEmailVerification();
+
+  @override
+  bool get emailVerified {
+    // Reloads the user when checking in order to get the most up to date
+    // email verified status.
+    if (loggedIn && !user!.emailVerified) {
+      refreshUser();
+    }
+    return user?.emailVerified ?? false;
+  }
+
+  @override
+  Future refreshUser() async {
+    await FirebaseAuth.instance.currentUser
+        ?.reload()
+        .then((_) => user = FirebaseAuth.instance.currentUser);
+  }
+
+  static BaseAuthUser fromUserCredential(UserCredential userCredential) =>
+      fromFirebaseUser(userCredential.user);
+  static BaseAuthUser fromFirebaseUser(User? user) =>
+      KhetihariiFirebaseUser(user);
+}
+
+Stream<BaseAuthUser> khetihariiFirebaseUserStream() => FirebaseAuth.instance
+        .authStateChanges()
+        .debounce((user) => user == null && !loggedIn
+            ? TimerStream(true, const Duration(seconds: 1))
+            : Stream.value(user))
+        .map<BaseAuthUser>(
+      (user) {
+        currentUser = KhetihariiFirebaseUser(user);
+        return currentUser!;
+      },
+    );
Index: lib/auth/firebase_auth/email_auth.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/auth/firebase_auth/email_auth.dart b/lib/auth/firebase_auth/email_auth.dart
new file mode 100644
--- /dev/null	(date 1708365757372)
+++ b/lib/auth/firebase_auth/email_auth.dart	(date 1708365757372)
@@ -0,0 +1,17 @@
+import 'package:firebase_auth/firebase_auth.dart';
+
+Future<UserCredential?> emailSignInFunc(
+  String email,
+  String password,
+) =>
+    FirebaseAuth.instance
+        .signInWithEmailAndPassword(email: email.trim(), password: password);
+
+Future<UserCredential?> emailCreateAccountFunc(
+  String email,
+  String password,
+) =>
+    FirebaseAuth.instance.createUserWithEmailAndPassword(
+      email: email.trim(),
+      password: password,
+    );
Index: lib/auth/firebase_auth/auth_util.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/auth/firebase_auth/auth_util.dart b/lib/auth/firebase_auth/auth_util.dart
new file mode 100644
--- /dev/null	(date 1708365757263)
+++ b/lib/auth/firebase_auth/auth_util.dart	(date 1708365757263)
@@ -0,0 +1,37 @@
+import 'dart:async';
+
+import 'package:flutter/foundation.dart' show kIsWeb;
+import 'package:firebase_auth/firebase_auth.dart';
+import 'package:flutter/material.dart';
+import '../auth_manager.dart';
+import '../base_auth_user_provider.dart';
+import '../../flutter_flow/flutter_flow_util.dart';
+
+import 'firebase_auth_manager.dart';
+
+export 'firebase_auth_manager.dart';
+
+final _authManager = FirebaseAuthManager();
+FirebaseAuthManager get authManager => _authManager;
+
+String get currentUserEmail => currentUser?.email ?? '';
+
+String get currentUserUid => currentUser?.uid ?? '';
+
+String get currentUserDisplayName => currentUser?.displayName ?? '';
+
+String get currentUserPhoto => currentUser?.photoUrl ?? '';
+
+String get currentPhoneNumber => currentUser?.phoneNumber ?? '';
+
+String get currentJwtToken => _currentJwtToken ?? '';
+
+bool get currentUserEmailVerified => currentUser?.emailVerified ?? false;
+
+/// Create a Stream that listens to the current user's JWT Token, since Firebase
+/// generates a new token every hour.
+String? _currentJwtToken;
+final jwtTokenStream = FirebaseAuth.instance
+    .idTokenChanges()
+    .map((user) async => _currentJwtToken = await user?.getIdToken())
+    .asBroadcastStream();
Index: lib/auth/firebase_auth/github_auth.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/auth/firebase_auth/github_auth.dart b/lib/auth/firebase_auth/github_auth.dart
new file mode 100644
--- /dev/null	(date 1708365757325)
+++ b/lib/auth/firebase_auth/github_auth.dart	(date 1708365757325)
@@ -0,0 +1,11 @@
+import 'package:firebase_auth/firebase_auth.dart';
+import 'package:flutter/foundation.dart';
+
+// https://firebase.flutter.dev/docs/auth/social/#github
+Future<UserCredential?> githubSignInFunc() async {
+  // Create a new provider
+  GithubAuthProvider githubProvider = GithubAuthProvider();
+
+  // Once signed in, return the UserCredential
+  return await FirebaseAuth.instance.signInWithPopup(githubProvider);
+}
Index: lib/auth/firebase_auth/anonymous_auth.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/auth/firebase_auth/anonymous_auth.dart b/lib/auth/firebase_auth/anonymous_auth.dart
new file mode 100644
--- /dev/null	(date 1708365757419)
+++ b/lib/auth/firebase_auth/anonymous_auth.dart	(date 1708365757419)
@@ -0,0 +1,4 @@
+import 'package:firebase_auth/firebase_auth.dart';
+
+Future<UserCredential?> anonymousSignInFunc() =>
+    FirebaseAuth.instance.signInAnonymously();
Index: lib/auth/firebase_auth/firebase_auth_manager.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/auth/firebase_auth/firebase_auth_manager.dart b/lib/auth/firebase_auth/firebase_auth_manager.dart
new file mode 100644
--- /dev/null	(date 1708365757231)
+++ b/lib/auth/firebase_auth/firebase_auth_manager.dart	(date 1708365757231)
@@ -0,0 +1,306 @@
+import 'dart:async';
+
+import 'package:flutter/foundation.dart' show kIsWeb;
+import 'package:firebase_auth/firebase_auth.dart';
+import 'package:flutter/material.dart';
+import '../auth_manager.dart';
+import '../base_auth_user_provider.dart';
+import '../../flutter_flow/flutter_flow_util.dart';
+
+import 'anonymous_auth.dart';
+import 'apple_auth.dart';
+import 'email_auth.dart';
+import 'firebase_user_provider.dart';
+import 'google_auth.dart';
+import 'jwt_token_auth.dart';
+import 'github_auth.dart';
+
+export '../base_auth_user_provider.dart';
+
+class FirebasePhoneAuthManager extends ChangeNotifier {
+  bool? _triggerOnCodeSent;
+  FirebaseAuthException? phoneAuthError;
+  // Set when using phone verification (after phone number is provided).
+  String? phoneAuthVerificationCode;
+  // Set when using phone sign in in web mode (ignored otherwise).
+  ConfirmationResult? webPhoneAuthConfirmationResult;
+  // Used for handling verification codes for phone sign in.
+  void Function(BuildContext)? _onCodeSent;
+
+  bool get triggerOnCodeSent => _triggerOnCodeSent ?? false;
+  set triggerOnCodeSent(bool val) => _triggerOnCodeSent = val;
+
+  void Function(BuildContext) get onCodeSent =>
+      _onCodeSent == null ? (_) {} : _onCodeSent!;
+  set onCodeSent(void Function(BuildContext) func) => _onCodeSent = func;
+
+  void update(VoidCallback callback) {
+    callback();
+    notifyListeners();
+  }
+}
+
+class FirebaseAuthManager extends AuthManager
+    with
+        EmailSignInManager,
+        GoogleSignInManager,
+        AppleSignInManager,
+        AnonymousSignInManager,
+        JwtSignInManager,
+        GithubSignInManager,
+        PhoneSignInManager {
+  // Set when using phone verification (after phone number is provided).
+  String? _phoneAuthVerificationCode;
+  // Set when using phone sign in in web mode (ignored otherwise).
+  ConfirmationResult? _webPhoneAuthConfirmationResult;
+  FirebasePhoneAuthManager phoneAuthManager = FirebasePhoneAuthManager();
+
+  @override
+  Future signOut() {
+    logFirebaseEvent("SIGN_OUT");
+    return FirebaseAuth.instance.signOut();
+  }
+
+  @override
+  Future deleteUser(BuildContext context) async {
+    try {
+      if (!loggedIn) {
+        print('Error: delete user attempted with no logged in user!');
+        return;
+      }
+      logFirebaseEvent("DELETE_USER");
+      await currentUser?.delete();
+    } on FirebaseAuthException catch (e) {
+      if (e.code == 'requires-recent-login') {
+        ScaffoldMessenger.of(context).hideCurrentSnackBar();
+        ScaffoldMessenger.of(context).showSnackBar(
+          SnackBar(
+              content: Text(
+                  'Too long since most recent sign in. Sign in again before deleting your account.')),
+        );
+      }
+    }
+  }
+
+  @override
+  Future updateEmail({
+    required String email,
+    required BuildContext context,
+  }) async {
+    try {
+      if (!loggedIn) {
+        print('Error: update email attempted with no logged in user!');
+        return;
+      }
+      await currentUser?.updateEmail(email);
+    } on FirebaseAuthException catch (e) {
+      if (e.code == 'requires-recent-login') {
+        ScaffoldMessenger.of(context).hideCurrentSnackBar();
+        ScaffoldMessenger.of(context).showSnackBar(
+          SnackBar(
+              content: Text(
+                  'Too long since most recent sign in. Sign in again before updating your email.')),
+        );
+      }
+    }
+  }
+
+  @override
+  Future resetPassword({
+    required String email,
+    required BuildContext context,
+  }) async {
+    try {
+      await FirebaseAuth.instance.sendPasswordResetEmail(email: email);
+    } on FirebaseAuthException catch (e) {
+      ScaffoldMessenger.of(context).hideCurrentSnackBar();
+      ScaffoldMessenger.of(context).showSnackBar(
+        SnackBar(content: Text('Error: ${e.message!}')),
+      );
+      return null;
+    }
+    ScaffoldMessenger.of(context).showSnackBar(
+      SnackBar(content: Text('Password reset email sent')),
+    );
+  }
+
+  @override
+  Future<BaseAuthUser?> signInWithEmail(
+    BuildContext context,
+    String email,
+    String password,
+  ) =>
+      _signInOrCreateAccount(
+        context,
+        () => emailSignInFunc(email, password),
+        'EMAIL',
+      );
+
+  @override
+  Future<BaseAuthUser?> createAccountWithEmail(
+    BuildContext context,
+    String email,
+    String password,
+  ) =>
+      _signInOrCreateAccount(
+        context,
+        () => emailCreateAccountFunc(email, password),
+        'EMAIL',
+      );
+
+  @override
+  Future<BaseAuthUser?> signInAnonymously(
+    BuildContext context,
+  ) =>
+      _signInOrCreateAccount(context, anonymousSignInFunc, 'ANONYMOUS');
+
+  @override
+  Future<BaseAuthUser?> signInWithApple(BuildContext context) =>
+      _signInOrCreateAccount(context, appleSignIn, 'APPLE');
+
+  @override
+  Future<BaseAuthUser?> signInWithGoogle(BuildContext context) =>
+      _signInOrCreateAccount(context, googleSignInFunc, 'GOOGLE');
+
+  @override
+  Future<BaseAuthUser?> signInWithGithub(BuildContext context) =>
+      _signInOrCreateAccount(context, githubSignInFunc, 'GITHUB');
+
+  @override
+  Future<BaseAuthUser?> signInWithJwtToken(
+    BuildContext context,
+    String jwtToken,
+  ) =>
+      _signInOrCreateAccount(context, () => jwtTokenSignIn(jwtToken), 'JWT');
+
+  void handlePhoneAuthStateChanges(BuildContext context) {
+    phoneAuthManager.addListener(() {
+      if (!context.mounted) {
+        return;
+      }
+
+      if (phoneAuthManager.triggerOnCodeSent) {
+        phoneAuthManager.onCodeSent(context);
+        phoneAuthManager
+            .update(() => phoneAuthManager.triggerOnCodeSent = false);
+      } else if (phoneAuthManager.phoneAuthError != null) {
+        final e = phoneAuthManager.phoneAuthError!;
+        ScaffoldMessenger.of(context).showSnackBar(SnackBar(
+          content: Text('Error: ${e.message!}'),
+        ));
+        phoneAuthManager.update(() => phoneAuthManager.phoneAuthError = null);
+      }
+    });
+  }
+
+  @override
+  Future beginPhoneAuth({
+    required BuildContext context,
+    required String phoneNumber,
+    required void Function(BuildContext) onCodeSent,
+  }) async {
+    phoneAuthManager.update(() => phoneAuthManager.onCodeSent = onCodeSent);
+    if (kIsWeb) {
+      phoneAuthManager.webPhoneAuthConfirmationResult =
+          await FirebaseAuth.instance.signInWithPhoneNumber(phoneNumber);
+      phoneAuthManager.update(() => phoneAuthManager.triggerOnCodeSent = true);
+      return;
+    }
+    final completer = Completer<bool>();
+    // If you'd like auto-verification, without the user having to enter the SMS
+    // code manually. Follow these instructions:
+    // * For Android: https://firebase.google.com/docs/auth/android/phone-auth?authuser=0#enable-app-verification (SafetyNet set up)
+    // * For iOS: https://firebase.google.com/docs/auth/ios/phone-auth?authuser=0#start-receiving-silent-notifications
+    // * Finally modify verificationCompleted below as instructed.
+    await FirebaseAuth.instance.verifyPhoneNumber(
+      phoneNumber: phoneNumber,
+      timeout:
+          Duration(seconds: 0), // Skips Android's default auto-verification
+      verificationCompleted: (phoneAuthCredential) async {
+        await FirebaseAuth.instance.signInWithCredential(phoneAuthCredential);
+        phoneAuthManager.update(() {
+          phoneAuthManager.triggerOnCodeSent = false;
+          phoneAuthManager.phoneAuthError = null;
+        });
+        // If you've implemented auto-verification, navigate to home page or
+        // onboarding page here manually. Uncomment the lines below and replace
+        // DestinationPage() with the desired widget.
+        // await Navigator.push(
+        //   context,
+        //   MaterialPageRoute(builder: (_) => DestinationPage()),
+        // );
+      },
+      verificationFailed: (e) {
+        phoneAuthManager.update(() {
+          phoneAuthManager.triggerOnCodeSent = false;
+          phoneAuthManager.phoneAuthError = e;
+        });
+        completer.complete(false);
+      },
+      codeSent: (verificationId, _) {
+        phoneAuthManager.update(() {
+          phoneAuthManager.phoneAuthVerificationCode = verificationId;
+          phoneAuthManager.triggerOnCodeSent = true;
+          phoneAuthManager.phoneAuthError = null;
+        });
+        completer.complete(true);
+      },
+      codeAutoRetrievalTimeout: (_) {},
+    );
+
+    return completer.future;
+  }
+
+  @override
+  Future verifySmsCode({
+    required BuildContext context,
+    required String smsCode,
+  }) {
+    if (kIsWeb) {
+      return _signInOrCreateAccount(
+        context,
+        () => phoneAuthManager.webPhoneAuthConfirmationResult!.confirm(smsCode),
+        'PHONE',
+      );
+    } else {
+      final authCredential = PhoneAuthProvider.credential(
+        verificationId: phoneAuthManager.phoneAuthVerificationCode!,
+        smsCode: smsCode,
+      );
+      return _signInOrCreateAccount(
+        context,
+        () => FirebaseAuth.instance.signInWithCredential(authCredential),
+        'PHONE',
+      );
+    }
+  }
+
+  /// Tries to sign in or create an account using Firebase Auth.
+  /// Returns the User object if sign in was successful.
+  Future<BaseAuthUser?> _signInOrCreateAccount(
+    BuildContext context,
+    Future<UserCredential?> Function() signInFunc,
+    String authProvider,
+  ) async {
+    try {
+      final userCredential = await signInFunc();
+      logFirebaseAuthEvent(userCredential?.user, authProvider);
+      return userCredential == null
+          ? null
+          : KhetihariiFirebaseUser.fromUserCredential(userCredential);
+    } on FirebaseAuthException catch (e) {
+      final errorMsg = switch (e.code) {
+        'email-already-in-use' =>
+          'Error: The email is already in use by a different account',
+        'INVALID_LOGIN_CREDENTIALS' =>
+          'Error: The supplied auth credential is incorrect, malformed or has expired',
+        _ => 'Error: ${e.message!}',
+      };
+      ScaffoldMessenger.of(context).hideCurrentSnackBar();
+      ScaffoldMessenger.of(context).showSnackBar(
+        SnackBar(content: Text(errorMsg)),
+      );
+      return null;
+    }
+  }
+}
Index: lib/pages/home/dashboard/dashboard_widget.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/home/dashboard/dashboard_widget.dart b/lib/pages/home/dashboard/dashboard_widget.dart
new file mode 100644
--- /dev/null	(date 1708366736594)
+++ b/lib/pages/home/dashboard/dashboard_widget.dart	(date 1708366736594)
@@ -0,0 +1,361 @@
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/flutter_flow_widgets.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter/scheduler.dart';
+import 'package:flutter/services.dart';
+import 'package:font_awesome_flutter/font_awesome_flutter.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+import 'package:simple_gradient_text/simple_gradient_text.dart';
+import 'dashboard_model.dart';
+export 'dashboard_model.dart';
+
+class DashboardWidget extends StatefulWidget {
+  const DashboardWidget({super.key});
+
+  @override
+  State<DashboardWidget> createState() => _DashboardWidgetState();
+}
+
+class _DashboardWidgetState extends State<DashboardWidget> {
+  late DashboardModel _model;
+
+  final scaffoldKey = GlobalKey<ScaffoldState>();
+
+  @override
+  void initState() {
+    super.initState();
+    _model = createModel(context, () => DashboardModel());
+
+    logFirebaseEvent('screen_view', parameters: {'screen_name': 'Dashboard'});
+    // On page load action.
+    SchedulerBinding.instance.addPostFrameCallback((_) async {
+      logFirebaseEvent('DASHBOARD_PAGE_Dashboard_ON_INIT_STATE');
+      logFirebaseEvent('Dashboard_haptic_feedback');
+      HapticFeedback.mediumImpact();
+    });
+
+    WidgetsBinding.instance.addPostFrameCallback((_) => setState(() {}));
+  }
+
+  @override
+  void dispose() {
+    _model.dispose();
+
+    super.dispose();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    if (isiOS) {
+      SystemChrome.setSystemUIOverlayStyle(
+        SystemUiOverlayStyle(
+          statusBarBrightness: Theme.of(context).brightness,
+          systemStatusBarContrastEnforced: true,
+        ),
+      );
+    }
+
+    context.watch<FFAppState>();
+
+    return GestureDetector(
+      onTap: () => _model.unfocusNode.canRequestFocus
+          ? FocusScope.of(context).requestFocus(_model.unfocusNode)
+          : FocusScope.of(context).unfocus(),
+      child: Scaffold(
+        key: scaffoldKey,
+        backgroundColor: FlutterFlowTheme.of(context).alternate,
+        appBar: AppBar(
+          backgroundColor: FlutterFlowTheme.of(context).primary,
+          automaticallyImplyLeading: false,
+          title: GradientText(
+            'HELLO FARMER',
+            style: FlutterFlowTheme.of(context).headlineMedium.override(
+                  fontFamily: 'Outfit',
+                  color: Colors.white,
+                  fontSize: 22.0,
+                ),
+            colors: [
+              FlutterFlowTheme.of(context).secondaryBackground,
+              FlutterFlowTheme.of(context).tertiary
+            ],
+            gradientDirection: GradientDirection.ltr,
+            gradientType: GradientType.linear,
+          ),
+          actions: [],
+          centerTitle: false,
+          elevation: 2.0,
+        ),
+        body: SafeArea(
+          top: true,
+          child: Stack(
+            children: [
+              Column(
+                mainAxisSize: MainAxisSize.max,
+                children: [
+                  ClipRRect(
+                    borderRadius: BorderRadius.only(
+                      bottomLeft: Radius.circular(100.0),
+                      bottomRight: Radius.circular(100.0),
+                      topLeft: Radius.circular(100.0),
+                      topRight: Radius.circular(100.0),
+                    ),
+                    child: Image.asset(
+                      'assets/images/Screenshot_2024-02-09_150631.png',
+                      width: 150.0,
+                      height: 142.0,
+                      fit: BoxFit.cover,
+                    ),
+                  ),
+                  FFButtonWidget(
+                    onPressed: () {
+                      print('Button pressed ...');
+                    },
+                    text: 'Veterinary Care',
+                    options: FFButtonOptions(
+                      height: 40.0,
+                      padding:
+                          EdgeInsetsDirectional.fromSTEB(24.0, 0.0, 24.0, 0.0),
+                      iconPadding:
+                          EdgeInsetsDirectional.fromSTEB(0.0, 0.0, 0.0, 0.0),
+                      color: FlutterFlowTheme.of(context).primary,
+                      textStyle:
+                          FlutterFlowTheme.of(context).titleSmall.override(
+                                fontFamily: 'Plus Jakarta Sans',
+                                color: Colors.white,
+                              ),
+                      elevation: 3.0,
+                      borderSide: BorderSide(
+                        color: Colors.transparent,
+                        width: 1.0,
+                      ),
+                      borderRadius: BorderRadius.circular(8.0),
+                    ),
+                  ),
+                  ClipRRect(
+                    borderRadius: BorderRadius.only(
+                      bottomLeft: Radius.circular(100.0),
+                      bottomRight: Radius.circular(100.0),
+                      topLeft: Radius.circular(100.0),
+                      topRight: Radius.circular(100.0),
+                    ),
+                    child: Image.asset(
+                      'assets/images/Screenshot_2024-02-09_150638.png',
+                      width: 178.0,
+                      height: 190.0,
+                      fit: BoxFit.cover,
+                    ),
+                  ),
+                  FFButtonWidget(
+                    onPressed: () {
+                      print('Button pressed ...');
+                    },
+                    text: 'Sell Crop ',
+                    options: FFButtonOptions(
+                      height: 40.0,
+                      padding:
+                          EdgeInsetsDirectional.fromSTEB(24.0, 0.0, 24.0, 0.0),
+                      iconPadding:
+                          EdgeInsetsDirectional.fromSTEB(0.0, 0.0, 0.0, 0.0),
+                      color: FlutterFlowTheme.of(context).primary,
+                      textStyle:
+                          FlutterFlowTheme.of(context).titleSmall.override(
+                                fontFamily: 'Plus Jakarta Sans',
+                                color: Colors.white,
+                              ),
+                      elevation: 3.0,
+                      borderSide: BorderSide(
+                        color: Colors.transparent,
+                        width: 1.0,
+                      ),
+                      borderRadius: BorderRadius.circular(8.0),
+                    ),
+                  ),
+                  ClipRRect(
+                    borderRadius: BorderRadius.only(
+                      bottomLeft: Radius.circular(100.0),
+                      bottomRight: Radius.circular(100.0),
+                      topLeft: Radius.circular(100.0),
+                      topRight: Radius.circular(100.0),
+                    ),
+                    child: Image.asset(
+                      'assets/images/Screenshot_2024-02-09_150651.png',
+                      width: 190.0,
+                      height: 213.0,
+                      fit: BoxFit.cover,
+                    ),
+                  ),
+                  FFButtonWidget(
+                    onPressed: () {
+                      print('Button pressed ...');
+                    },
+                    text: 'Leaf Scanner',
+                    options: FFButtonOptions(
+                      height: 20.0,
+                      padding:
+                          EdgeInsetsDirectional.fromSTEB(24.0, 0.0, 24.0, 0.0),
+                      iconPadding:
+                          EdgeInsetsDirectional.fromSTEB(0.0, 0.0, 0.0, 0.0),
+                      color: FlutterFlowTheme.of(context).primary,
+                      textStyle:
+                          FlutterFlowTheme.of(context).titleSmall.override(
+                                fontFamily: 'Plus Jakarta Sans',
+                                color: Colors.white,
+                              ),
+                      elevation: 3.0,
+                      borderSide: BorderSide(
+                        color: Colors.transparent,
+                        width: 1.0,
+                      ),
+                      borderRadius: BorderRadius.circular(8.0),
+                    ),
+                  ),
+                ],
+              ),
+              Padding(
+                padding: EdgeInsetsDirectional.fromSTEB(220.0, 0.0, 0.0, 0.0),
+                child: ClipRRect(
+                  borderRadius: BorderRadius.only(
+                    bottomLeft: Radius.circular(100.0),
+                    bottomRight: Radius.circular(100.0),
+                    topLeft: Radius.circular(100.0),
+                    topRight: Radius.circular(100.0),
+                  ),
+                  child: Image.asset(
+                    'assets/images/Screenshot_2024-02-09_150646.png',
+                    width: 252.0,
+                    height: 139.0,
+                    fit: BoxFit.cover,
+                  ),
+                ),
+              ),
+              Align(
+                alignment: AlignmentDirectional(0.79, -0.51),
+                child: FFButtonWidget(
+                  onPressed: () {
+                    print('Button pressed ...');
+                  },
+                  text: 'Fertilizer Shop',
+                  options: FFButtonOptions(
+                    height: 40.0,
+                    padding:
+                        EdgeInsetsDirectional.fromSTEB(24.0, 0.0, 24.0, 0.0),
+                    iconPadding:
+                        EdgeInsetsDirectional.fromSTEB(0.0, 0.0, 0.0, 0.0),
+                    color: FlutterFlowTheme.of(context).primary,
+                    textStyle: FlutterFlowTheme.of(context).titleSmall.override(
+                          fontFamily: 'Plus Jakarta Sans',
+                          color: Colors.white,
+                        ),
+                    elevation: 3.0,
+                    borderSide: BorderSide(
+                      color: Colors.transparent,
+                      width: 1.0,
+                    ),
+                    borderRadius: BorderRadius.circular(8.0),
+                  ),
+                ),
+              ),
+              Align(
+                alignment: AlignmentDirectional(0.0, -0.2),
+                child: Padding(
+                  padding: EdgeInsetsDirectional.fromSTEB(200.0, 0.0, 0.0, 0.0),
+                  child: ClipRRect(
+                    borderRadius: BorderRadius.only(
+                      bottomLeft: Radius.circular(100.0),
+                      bottomRight: Radius.circular(100.0),
+                      topLeft: Radius.circular(100.0),
+                      topRight: Radius.circular(100.0),
+                    ),
+                    child: Image.asset(
+                      'assets/images/Screenshot_2024-02-09_150625.png',
+                      width: 302.0,
+                      height: 178.0,
+                      fit: BoxFit.cover,
+                    ),
+                  ),
+                ),
+              ),
+              Align(
+                alignment: AlignmentDirectional(0.77, 0.2),
+                child: FFButtonWidget(
+                  onPressed: () async {
+                    logFirebaseEvent(
+                        'DASHBOARD_PAGE_BOOK_EQUIPMENT_BTN_ON_TAP');
+                    logFirebaseEvent('Button_navigate_to');
+
+                    context.pushNamed('Book_equipment');
+                  },
+                  text: 'Book Equipment',
+                  options: FFButtonOptions(
+                    height: 40.0,
+                    padding:
+                        EdgeInsetsDirectional.fromSTEB(24.0, 0.0, 24.0, 0.0),
+                    iconPadding:
+                        EdgeInsetsDirectional.fromSTEB(0.0, 0.0, 0.0, 0.0),
+                    color: FlutterFlowTheme.of(context).primary,
+                    textStyle: FlutterFlowTheme.of(context).titleSmall.override(
+                          fontFamily: 'Plus Jakarta Sans',
+                          color: Colors.white,
+                        ),
+                    elevation: 3.0,
+                    borderSide: BorderSide(
+                      color: Colors.transparent,
+                      width: 1.0,
+                    ),
+                    borderRadius: BorderRadius.circular(8.0),
+                  ),
+                ),
+              ),
+              Align(
+                alignment: AlignmentDirectional(1.04, 0.79),
+                child: ClipRRect(
+                  borderRadius: BorderRadius.only(
+                    bottomLeft: Radius.circular(100.0),
+                    bottomRight: Radius.circular(100.0),
+                    topLeft: Radius.circular(100.0),
+                    topRight: Radius.circular(100.0),
+                  ),
+                  child: Image.asset(
+                    'assets/images/Screenshot_2024-02-09_150656.png',
+                    width: 183.0,
+                    height: 183.0,
+                    fit: BoxFit.cover,
+                  ),
+                ),
+              ),
+              Align(
+                alignment: AlignmentDirectional(0.83, 0.98),
+                child: FFButtonWidget(
+                  onPressed: () {
+                    print('Button pressed ...');
+                  },
+                  text: 'KHETIBOT AI',
+                  options: FFButtonOptions(
+                    height: 40.0,
+                    padding:
+                        EdgeInsetsDirectional.fromSTEB(24.0, 0.0, 24.0, 0.0),
+                    iconPadding:
+                        EdgeInsetsDirectional.fromSTEB(0.0, 0.0, 0.0, 0.0),
+                    color: FlutterFlowTheme.of(context).primary,
+                    textStyle: FlutterFlowTheme.of(context).titleSmall.override(
+                          fontFamily: 'Plus Jakarta Sans',
+                          color: Colors.white,
+                        ),
+                    elevation: 3.0,
+                    borderSide: BorderSide(
+                      color: Colors.transparent,
+                      width: 1.0,
+                    ),
+                    borderRadius: BorderRadius.circular(8.0),
+                  ),
+                ),
+              ),
+            ],
+          ),
+        ),
+      ),
+    );
+  }
+}
Index: lib/pages/home/dashboard/dashboard_model.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/home/dashboard/dashboard_model.dart b/lib/pages/home/dashboard/dashboard_model.dart
new file mode 100644
--- /dev/null	(date 1708365758644)
+++ b/lib/pages/home/dashboard/dashboard_model.dart	(date 1708365758644)
@@ -0,0 +1,31 @@
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/flutter_flow_widgets.dart';
+import 'dashboard_widget.dart' show DashboardWidget;
+import 'package:flutter/material.dart';
+import 'package:flutter/scheduler.dart';
+import 'package:flutter/services.dart';
+import 'package:font_awesome_flutter/font_awesome_flutter.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+import 'package:simple_gradient_text/simple_gradient_text.dart';
+
+class DashboardModel extends FlutterFlowModel<DashboardWidget> {
+  ///  State fields for stateful widgets in this page.
+
+  final unfocusNode = FocusNode();
+
+  /// Initialization and disposal methods.
+
+  @override
+  void initState(BuildContext context) {}
+
+  @override
+  void dispose() {
+    unfocusNode.dispose();
+  }
+
+  /// Action blocks are added here.
+
+  /// Additional helper methods are added here.
+}
Index: lib/pages/profile/profile/profile_widget.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/profile/profile/profile_widget.dart b/lib/pages/profile/profile/profile_widget.dart
new file mode 100644
--- /dev/null	(date 1708365758612)
+++ b/lib/pages/profile/profile/profile_widget.dart	(date 1708365758612)
@@ -0,0 +1,921 @@
+import '/auth/firebase_auth/auth_util.dart';
+import '/backend/backend.dart';
+import '/flutter_flow/flutter_flow_icon_button.dart';
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/flutter_flow_widgets.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter/scheduler.dart';
+import 'package:flutter/services.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+import 'package:share_plus/share_plus.dart';
+import 'package:url_launcher/url_launcher.dart';
+import 'profile_model.dart';
+export 'profile_model.dart';
+
+class ProfileWidget extends StatefulWidget {
+  const ProfileWidget({super.key});
+
+  @override
+  State<ProfileWidget> createState() => _ProfileWidgetState();
+}
+
+class _ProfileWidgetState extends State<ProfileWidget> {
+  late ProfileModel _model;
+
+  final scaffoldKey = GlobalKey<ScaffoldState>();
+
+  @override
+  void initState() {
+    super.initState();
+    _model = createModel(context, () => ProfileModel());
+
+    logFirebaseEvent('screen_view', parameters: {'screen_name': 'Profile'});
+    // On page load action.
+    SchedulerBinding.instance.addPostFrameCallback((_) async {
+      logFirebaseEvent('PROFILE_PAGE_Profile_ON_INIT_STATE');
+      logFirebaseEvent('Profile_haptic_feedback');
+      HapticFeedback.mediumImpact();
+    });
+
+    WidgetsBinding.instance.addPostFrameCallback((_) => setState(() {}));
+  }
+
+  @override
+  void dispose() {
+    _model.dispose();
+
+    super.dispose();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    if (isiOS) {
+      SystemChrome.setSystemUIOverlayStyle(
+        SystemUiOverlayStyle(
+          statusBarBrightness: Theme.of(context).brightness,
+          systemStatusBarContrastEnforced: true,
+        ),
+      );
+    }
+
+    context.watch<FFAppState>();
+
+    return GestureDetector(
+      onTap: () => _model.unfocusNode.canRequestFocus
+          ? FocusScope.of(context).requestFocus(_model.unfocusNode)
+          : FocusScope.of(context).unfocus(),
+      child: Scaffold(
+        key: scaffoldKey,
+        backgroundColor: FlutterFlowTheme.of(context).primaryBackground,
+        appBar: PreferredSize(
+          preferredSize: Size.fromHeight(100.0),
+          child: AppBar(
+            backgroundColor: FlutterFlowTheme.of(context).primary,
+            automaticallyImplyLeading: false,
+            actions: [],
+            flexibleSpace: FlexibleSpaceBar(
+              title: Padding(
+                padding: EdgeInsetsDirectional.fromSTEB(0.0, 0.0, 0.0, 14.0),
+                child: Column(
+                  mainAxisSize: MainAxisSize.max,
+                  mainAxisAlignment: MainAxisAlignment.end,
+                  crossAxisAlignment: CrossAxisAlignment.start,
+                  children: [
+                    Padding(
+                      padding:
+                          EdgeInsetsDirectional.fromSTEB(0.0, 0.0, 0.0, 8.0),
+                      child: Row(
+                        mainAxisSize: MainAxisSize.max,
+                        children: [
+                          Padding(
+                            padding: EdgeInsetsDirectional.fromSTEB(
+                                12.0, 0.0, 0.0, 0.0),
+                            child: FlutterFlowIconButton(
+                              borderColor: Colors.transparent,
+                              borderRadius: 30.0,
+                              borderWidth: 1.0,
+                              buttonSize: 50.0,
+                              icon: Icon(
+                                Icons.arrow_back_rounded,
+                                color: Colors.white,
+                                size: 30.0,
+                              ),
+                              onPressed: () async {
+                                logFirebaseEvent(
+                                    'PROFILE_arrow_back_rounded_ICN_ON_TAP');
+                                logFirebaseEvent('IconButton_navigate_to');
+
+                                context.pushNamed('Dashboard');
+                              },
+                            ),
+                          ),
+                          Padding(
+                            padding: EdgeInsetsDirectional.fromSTEB(
+                                4.0, 0.0, 0.0, 0.0),
+                            child: Text(
+                              'Back',
+                              style: FlutterFlowTheme.of(context)
+                                  .headlineMedium
+                                  .override(
+                                    fontFamily: 'Outfit',
+                                    color: Colors.white,
+                                    fontSize: 16.0,
+                                  ),
+                            ),
+                          ),
+                        ],
+                      ),
+                    ),
+                    Padding(
+                      padding:
+                          EdgeInsetsDirectional.fromSTEB(24.0, 0.0, 0.0, 0.0),
+                      child: Text(
+                        'Settings',
+                        style: FlutterFlowTheme.of(context)
+                            .headlineMedium
+                            .override(
+                              fontFamily: 'Outfit',
+                              color: Colors.white,
+                              fontSize: 22.0,
+                            ),
+                      ),
+                    ),
+                  ],
+                ),
+              ),
+              centerTitle: true,
+              expandedTitleScale: 1.0,
+            ),
+            elevation: 2.0,
+          ),
+        ),
+        body: SafeArea(
+          top: true,
+          child: SingleChildScrollView(
+            child: Column(
+              mainAxisSize: MainAxisSize.max,
+              children: [
+                Align(
+                  alignment: AlignmentDirectional(0.0, 0.0),
+                  child: Padding(
+                    padding:
+                        EdgeInsetsDirectional.fromSTEB(24.0, 24.0, 24.0, 0.0),
+                    child: Column(
+                      mainAxisSize: MainAxisSize.min,
+                      mainAxisAlignment: MainAxisAlignment.start,
+                      crossAxisAlignment: CrossAxisAlignment.start,
+                      children: [
+                        Text(
+                          'Divyanshu Tiwari',
+                          style: FlutterFlowTheme.of(context).displaySmall,
+                        ),
+                        Padding(
+                          padding: EdgeInsetsDirectional.fromSTEB(
+                              0.0, 24.0, 0.0, 0.0),
+                          child: Container(
+                            width: double.infinity,
+                            decoration: BoxDecoration(
+                              color: FlutterFlowTheme.of(context).primary,
+                              borderRadius: BorderRadius.circular(8.0),
+                              border: Border.all(
+                                color: FlutterFlowTheme.of(context).accent1,
+                              ),
+                            ),
+                            child: Padding(
+                              padding: EdgeInsets.all(18.0),
+                              child: Column(
+                                mainAxisSize: MainAxisSize.max,
+                                crossAxisAlignment: CrossAxisAlignment.start,
+                                children: [
+                                  Text(
+                                    'Thank you for supporting us!',
+                                    style: FlutterFlowTheme.of(context)
+                                        .titleMedium,
+                                  ),
+                                  Padding(
+                                    padding: EdgeInsetsDirectional.fromSTEB(
+                                        0.0, 6.0, 0.0, 0.0),
+                                    child: Text(
+                                      'As a local business, we thank you for supporting us and hope you enjoy.',
+                                      style: FlutterFlowTheme.of(context)
+                                          .labelLarge
+                                          .override(
+                                            fontFamily: 'Outfit',
+                                            color: FlutterFlowTheme.of(context)
+                                                .info,
+                                          ),
+                                    ),
+                                  ),
+                                ],
+                              ),
+                            ),
+                          ),
+                        ),
+                        Padding(
+                          padding: EdgeInsetsDirectional.fromSTEB(
+                              0.0, 12.0, 0.0, 0.0),
+                          child: StreamBuilder<List<CompanyInformationRecord>>(
+                            stream: queryCompanyInformationRecord(
+                              singleRecord: true,
+                            ),
+                            builder: (context, snapshot) {
+                              // Customize what your widget looks like when it's loading.
+                              if (!snapshot.hasData) {
+                                return Center(
+                                  child: SizedBox(
+                                    width: 50.0,
+                                    height: 50.0,
+                                    child: CircularProgressIndicator(
+                                      valueColor: AlwaysStoppedAnimation<Color>(
+                                        FlutterFlowTheme.of(context).primary,
+                                      ),
+                                    ),
+                                  ),
+                                );
+                              }
+                              List<CompanyInformationRecord>
+                                  columnCompanyInformationRecordList =
+                                  snapshot.data!;
+                              // Return an empty Container when the item does not exist.
+                              if (snapshot.data!.isEmpty) {
+                                return Container();
+                              }
+                              final columnCompanyInformationRecord =
+                                  columnCompanyInformationRecordList.isNotEmpty
+                                      ? columnCompanyInformationRecordList.first
+                                      : null;
+                              return Column(
+                                mainAxisSize: MainAxisSize.max,
+                                children: [
+                                  InkWell(
+                                    splashColor: Colors.transparent,
+                                    focusColor: Colors.transparent,
+                                    hoverColor: Colors.transparent,
+                                    highlightColor: Colors.transparent,
+                                    onTap: () async {
+                                      logFirebaseEvent(
+                                          'PROFILE_PAGE_EditProfileTile_ON_TAP');
+                                      logFirebaseEvent(
+                                          'EditProfileTile_navigate_to');
+
+                                      context.pushNamed('EditProfile');
+                                    },
+                                    child: Column(
+                                      mainAxisSize: MainAxisSize.max,
+                                      children: [
+                                        Padding(
+                                          padding:
+                                              EdgeInsetsDirectional.fromSTEB(
+                                                  0.0, 12.0, 0.0, 12.0),
+                                          child: InkWell(
+                                            splashColor: Colors.transparent,
+                                            focusColor: Colors.transparent,
+                                            hoverColor: Colors.transparent,
+                                            highlightColor: Colors.transparent,
+                                            onTap: () async {
+                                              logFirebaseEvent(
+                                                  'PROFILE_PAGE_Row_ya8doloq_ON_TAP');
+                                              logFirebaseEvent(
+                                                  'Row_navigate_to');
+
+                                              context.pushNamed('EditProfile');
+                                            },
+                                            child: Row(
+                                              mainAxisSize: MainAxisSize.max,
+                                              children: [
+                                                Container(
+                                                  width: 40.0,
+                                                  height: 40.0,
+                                                  decoration: BoxDecoration(
+                                                    color: FlutterFlowTheme.of(
+                                                            context)
+                                                        .accent1,
+                                                    shape: BoxShape.circle,
+                                                  ),
+                                                  child: Padding(
+                                                    padding:
+                                                        EdgeInsets.all(4.0),
+                                                    child: Icon(
+                                                      Icons
+                                                          .person_outline_rounded,
+                                                      color:
+                                                          FlutterFlowTheme.of(
+                                                                  context)
+                                                              .primary,
+                                                      size: 20.0,
+                                                    ),
+                                                  ),
+                                                ),
+                                                Padding(
+                                                  padding: EdgeInsetsDirectional
+                                                      .fromSTEB(
+                                                          18.0, 0.0, 0.0, 0.0),
+                                                  child: Text(
+                                                    'Edit Profile',
+                                                    style: FlutterFlowTheme.of(
+                                                            context)
+                                                        .bodyLarge,
+                                                  ),
+                                                ),
+                                              ],
+                                            ),
+                                          ),
+                                        ),
+                                        Divider(
+                                          thickness: 1.0,
+                                          color: FlutterFlowTheme.of(context)
+                                              .accent4,
+                                        ),
+                                      ],
+                                    ),
+                                  ),
+                                  InkWell(
+                                    splashColor: Colors.transparent,
+                                    focusColor: Colors.transparent,
+                                    hoverColor: Colors.transparent,
+                                    highlightColor: Colors.transparent,
+                                    onTap: () async {
+                                      logFirebaseEvent(
+                                          'PROFILE_PAGE_EatingPrefsTile_ON_TAP');
+                                      logFirebaseEvent(
+                                          'EatingPrefsTile_navigate_to');
+
+                                      context.pushNamed('PersonalAssistance');
+                                    },
+                                    child: Column(
+                                      mainAxisSize: MainAxisSize.max,
+                                      children: [
+                                        Padding(
+                                          padding:
+                                              EdgeInsetsDirectional.fromSTEB(
+                                                  0.0, 12.0, 0.0, 12.0),
+                                          child: Row(
+                                            mainAxisSize: MainAxisSize.max,
+                                            children: [
+                                              Container(
+                                                width: 40.0,
+                                                height: 40.0,
+                                                decoration: BoxDecoration(
+                                                  color: FlutterFlowTheme.of(
+                                                          context)
+                                                      .accent1,
+                                                  shape: BoxShape.circle,
+                                                ),
+                                                child: Padding(
+                                                  padding: EdgeInsets.all(4.0),
+                                                  child: Icon(
+                                                    Icons.assistant,
+                                                    color: FlutterFlowTheme.of(
+                                                            context)
+                                                        .primary,
+                                                    size: 20.0,
+                                                  ),
+                                                ),
+                                              ),
+                                              Padding(
+                                                padding: EdgeInsetsDirectional
+                                                    .fromSTEB(
+                                                        18.0, 0.0, 0.0, 0.0),
+                                                child: Text(
+                                                  'Personal Assistance',
+                                                  style: FlutterFlowTheme.of(
+                                                          context)
+                                                      .bodyLarge,
+                                                ),
+                                              ),
+                                            ],
+                                          ),
+                                        ),
+                                        Divider(
+                                          thickness: 1.0,
+                                          color: FlutterFlowTheme.of(context)
+                                              .accent4,
+                                        ),
+                                      ],
+                                    ),
+                                  ),
+                                  if ((columnCompanyInformationRecord?.name !=
+                                              null &&
+                                          columnCompanyInformationRecord
+                                                  ?.name !=
+                                              '') &&
+                                      (columnCompanyInformationRecord
+                                                  ?.companyBio !=
+                                              null &&
+                                          columnCompanyInformationRecord
+                                                  ?.companyBio !=
+                                              ''))
+                                    InkWell(
+                                      splashColor: Colors.transparent,
+                                      focusColor: Colors.transparent,
+                                      hoverColor: Colors.transparent,
+                                      highlightColor: Colors.transparent,
+                                      onTap: () async {
+                                        logFirebaseEvent(
+                                            'PROFILE_PAGE_AboutUsTile_ON_TAP');
+                                        logFirebaseEvent(
+                                            'AboutUsTile_navigate_to');
+
+                                        context.pushNamed('AboutUs');
+                                      },
+                                      child: Column(
+                                        mainAxisSize: MainAxisSize.max,
+                                        children: [
+                                          Padding(
+                                            padding:
+                                                EdgeInsetsDirectional.fromSTEB(
+                                                    0.0, 12.0, 0.0, 12.0),
+                                            child: Row(
+                                              mainAxisSize: MainAxisSize.max,
+                                              children: [
+                                                Container(
+                                                  width: 40.0,
+                                                  height: 40.0,
+                                                  decoration: BoxDecoration(
+                                                    color: FlutterFlowTheme.of(
+                                                            context)
+                                                        .accent1,
+                                                    shape: BoxShape.circle,
+                                                  ),
+                                                  child: Padding(
+                                                    padding:
+                                                        EdgeInsets.all(4.0),
+                                                    child: Icon(
+                                                      Icons.info_outlined,
+                                                      color:
+                                                          FlutterFlowTheme.of(
+                                                                  context)
+                                                              .primary,
+                                                      size: 20.0,
+                                                    ),
+                                                  ),
+                                                ),
+                                                Padding(
+                                                  padding: EdgeInsetsDirectional
+                                                      .fromSTEB(
+                                                          18.0, 0.0, 0.0, 0.0),
+                                                  child: Text(
+                                                    'About Us',
+                                                    style: FlutterFlowTheme.of(
+                                                            context)
+                                                        .bodyLarge,
+                                                  ),
+                                                ),
+                                              ],
+                                            ),
+                                          ),
+                                          Divider(
+                                            thickness: 1.0,
+                                            color: FlutterFlowTheme.of(context)
+                                                .accent4,
+                                          ),
+                                        ],
+                                      ),
+                                    ),
+                                  InkWell(
+                                    splashColor: Colors.transparent,
+                                    focusColor: Colors.transparent,
+                                    hoverColor: Colors.transparent,
+                                    highlightColor: Colors.transparent,
+                                    onTap: () async {
+                                      logFirebaseEvent(
+                                          'PROFILE_PAGE_SupportCenterTile_ON_TAP');
+                                      logFirebaseEvent(
+                                          'SupportCenterTile_navigate_to');
+
+                                      context.pushNamed('SupportCenter');
+                                    },
+                                    child: Column(
+                                      mainAxisSize: MainAxisSize.max,
+                                      children: [
+                                        Padding(
+                                          padding:
+                                              EdgeInsetsDirectional.fromSTEB(
+                                                  0.0, 12.0, 0.0, 12.0),
+                                          child: Row(
+                                            mainAxisSize: MainAxisSize.max,
+                                            children: [
+                                              Container(
+                                                width: 40.0,
+                                                height: 40.0,
+                                                decoration: BoxDecoration(
+                                                  color: FlutterFlowTheme.of(
+                                                          context)
+                                                      .accent1,
+                                                  shape: BoxShape.circle,
+                                                ),
+                                                child: Padding(
+                                                  padding: EdgeInsets.all(4.0),
+                                                  child: Icon(
+                                                    Icons.support_rounded,
+                                                    color: FlutterFlowTheme.of(
+                                                            context)
+                                                        .primary,
+                                                    size: 20.0,
+                                                  ),
+                                                ),
+                                              ),
+                                              Padding(
+                                                padding: EdgeInsetsDirectional
+                                                    .fromSTEB(
+                                                        18.0, 0.0, 0.0, 0.0),
+                                                child: Text(
+                                                  'Support Center',
+                                                  style: FlutterFlowTheme.of(
+                                                          context)
+                                                      .bodyLarge,
+                                                ),
+                                              ),
+                                            ],
+                                          ),
+                                        ),
+                                        Divider(
+                                          thickness: 1.0,
+                                          color: FlutterFlowTheme.of(context)
+                                              .accent4,
+                                        ),
+                                      ],
+                                    ),
+                                  ),
+                                  if ((columnCompanyInformationRecord?.email !=
+                                              null &&
+                                          columnCompanyInformationRecord
+                                                  ?.email !=
+                                              '') ||
+                                      (columnCompanyInformationRecord?.phone !=
+                                              null &&
+                                          columnCompanyInformationRecord
+                                                  ?.phone !=
+                                              ''))
+                                    InkWell(
+                                      splashColor: Colors.transparent,
+                                      focusColor: Colors.transparent,
+                                      hoverColor: Colors.transparent,
+                                      highlightColor: Colors.transparent,
+                                      onTap: () async {
+                                        logFirebaseEvent(
+                                            'PROFILE_PAGE_ContactUsTile_ON_TAP');
+                                        if (columnCompanyInformationRecord
+                                                    ?.email !=
+                                                null &&
+                                            columnCompanyInformationRecord
+                                                    ?.email !=
+                                                '') {
+                                          logFirebaseEvent(
+                                              'ContactUsTile_send_email');
+                                          await launchUrl(Uri(
+                                            scheme: 'mailto',
+                                            path:
+                                                columnCompanyInformationRecord!
+                                                    .email,
+                                          ));
+                                        } else {
+                                          logFirebaseEvent(
+                                              'ContactUsTile_call_number');
+                                          await launchUrl(Uri(
+                                            scheme: 'tel',
+                                            path:
+                                                columnCompanyInformationRecord!
+                                                    .phone,
+                                          ));
+                                        }
+                                      },
+                                      child: Column(
+                                        mainAxisSize: MainAxisSize.max,
+                                        children: [
+                                          Padding(
+                                            padding:
+                                                EdgeInsetsDirectional.fromSTEB(
+                                                    0.0, 12.0, 0.0, 12.0),
+                                            child: Row(
+                                              mainAxisSize: MainAxisSize.max,
+                                              children: [
+                                                Container(
+                                                  width: 40.0,
+                                                  height: 40.0,
+                                                  decoration: BoxDecoration(
+                                                    color: FlutterFlowTheme.of(
+                                                            context)
+                                                        .accent1,
+                                                    shape: BoxShape.circle,
+                                                  ),
+                                                  child: Padding(
+                                                    padding:
+                                                        EdgeInsets.all(4.0),
+                                                    child: Icon(
+                                                      Icons.mail_outlined,
+                                                      color:
+                                                          FlutterFlowTheme.of(
+                                                                  context)
+                                                              .primary,
+                                                      size: 20.0,
+                                                    ),
+                                                  ),
+                                                ),
+                                                Padding(
+                                                  padding: EdgeInsetsDirectional
+                                                      .fromSTEB(
+                                                          18.0, 0.0, 0.0, 0.0),
+                                                  child: Text(
+                                                    'Contact Us',
+                                                    style: FlutterFlowTheme.of(
+                                                            context)
+                                                        .bodyLarge,
+                                                  ),
+                                                ),
+                                              ],
+                                            ),
+                                          ),
+                                          Divider(
+                                            thickness: 1.0,
+                                            color: FlutterFlowTheme.of(context)
+                                                .accent4,
+                                          ),
+                                        ],
+                                      ),
+                                    ),
+                                  if (() {
+                                    if (isiOS &&
+                                        (columnCompanyInformationRecord
+                                                    ?.appleStoreURL !=
+                                                null &&
+                                            columnCompanyInformationRecord
+                                                    ?.appleStoreURL !=
+                                                '')) {
+                                      return true;
+                                    } else if (isAndroid &&
+                                        (columnCompanyInformationRecord
+                                                    ?.playStoreURL !=
+                                                null &&
+                                            columnCompanyInformationRecord
+                                                    ?.playStoreURL !=
+                                                '')) {
+                                      return true;
+                                    } else {
+                                      return false;
+                                    }
+                                  }())
+                                    Builder(
+                                      builder: (context) => InkWell(
+                                        splashColor: Colors.transparent,
+                                        focusColor: Colors.transparent,
+                                        hoverColor: Colors.transparent,
+                                        highlightColor: Colors.transparent,
+                                        onTap: () async {
+                                          logFirebaseEvent(
+                                              'PROFILE_PAGE_ShareTile_ON_TAP');
+                                          if (isiOS) {
+                                            logFirebaseEvent('ShareTile_share');
+                                            await Share.share(
+                                              columnCompanyInformationRecord!
+                                                  .appleStoreURL,
+                                              sharePositionOrigin:
+                                                  getWidgetBoundingBox(context),
+                                            );
+                                          } else {
+                                            logFirebaseEvent('ShareTile_share');
+                                            await Share.share(
+                                              columnCompanyInformationRecord!
+                                                  .playStoreURL,
+                                              sharePositionOrigin:
+                                                  getWidgetBoundingBox(context),
+                                            );
+                                          }
+                                        },
+                                        child: Column(
+                                          mainAxisSize: MainAxisSize.max,
+                                          children: [
+                                            Padding(
+                                              padding: EdgeInsetsDirectional
+                                                  .fromSTEB(
+                                                      0.0, 12.0, 0.0, 12.0),
+                                              child: Row(
+                                                mainAxisSize: MainAxisSize.max,
+                                                children: [
+                                                  Container(
+                                                    width: 40.0,
+                                                    height: 40.0,
+                                                    decoration: BoxDecoration(
+                                                      color:
+                                                          FlutterFlowTheme.of(
+                                                                  context)
+                                                              .accent1,
+                                                      shape: BoxShape.circle,
+                                                    ),
+                                                    child: Padding(
+                                                      padding:
+                                                          EdgeInsets.all(4.0),
+                                                      child: Icon(
+                                                        Icons.share_outlined,
+                                                        color:
+                                                            FlutterFlowTheme.of(
+                                                                    context)
+                                                                .primary,
+                                                        size: 18.0,
+                                                      ),
+                                                    ),
+                                                  ),
+                                                  Padding(
+                                                    padding:
+                                                        EdgeInsetsDirectional
+                                                            .fromSTEB(18.0, 0.0,
+                                                                0.0, 0.0),
+                                                    child: Text(
+                                                      'Share Khetiharii App',
+                                                      style:
+                                                          FlutterFlowTheme.of(
+                                                                  context)
+                                                              .bodyLarge,
+                                                    ),
+                                                  ),
+                                                ],
+                                              ),
+                                            ),
+                                            Divider(
+                                              thickness: 1.0,
+                                              color:
+                                                  FlutterFlowTheme.of(context)
+                                                      .accent4,
+                                            ),
+                                          ],
+                                        ),
+                                      ),
+                                    ),
+                                  if (() {
+                                    if (isiOS &&
+                                        (columnCompanyInformationRecord
+                                                    ?.appleStoreURL !=
+                                                null &&
+                                            columnCompanyInformationRecord
+                                                    ?.appleStoreURL !=
+                                                '')) {
+                                      return true;
+                                    } else if (isAndroid &&
+                                        (columnCompanyInformationRecord
+                                                    ?.playStoreURL !=
+                                                null &&
+                                            columnCompanyInformationRecord
+                                                    ?.playStoreURL !=
+                                                '')) {
+                                      return true;
+                                    } else {
+                                      return false;
+                                    }
+                                  }())
+                                    InkWell(
+                                      splashColor: Colors.transparent,
+                                      focusColor: Colors.transparent,
+                                      hoverColor: Colors.transparent,
+                                      highlightColor: Colors.transparent,
+                                      onTap: () async {
+                                        logFirebaseEvent(
+                                            'PROFILE_PAGE_ReviewTile_ON_TAP');
+                                        if (isiOS) {
+                                          logFirebaseEvent(
+                                              'ReviewTile_launch_u_r_l');
+                                          await launchURL(
+                                              columnCompanyInformationRecord!
+                                                  .appleStoreURL);
+                                        } else {
+                                          logFirebaseEvent(
+                                              'ReviewTile_launch_u_r_l');
+                                          await launchURL(
+                                              columnCompanyInformationRecord!
+                                                  .playStoreURL);
+                                        }
+                                      },
+                                      child: Column(
+                                        mainAxisSize: MainAxisSize.max,
+                                        children: [
+                                          Padding(
+                                            padding:
+                                                EdgeInsetsDirectional.fromSTEB(
+                                                    0.0, 12.0, 0.0, 12.0),
+                                            child: Row(
+                                              mainAxisSize: MainAxisSize.max,
+                                              children: [
+                                                Container(
+                                                  width: 40.0,
+                                                  height: 40.0,
+                                                  decoration: BoxDecoration(
+                                                    color: FlutterFlowTheme.of(
+                                                            context)
+                                                        .accent1,
+                                                    shape: BoxShape.circle,
+                                                  ),
+                                                  child: Padding(
+                                                    padding:
+                                                        EdgeInsets.all(4.0),
+                                                    child: Icon(
+                                                      Icons.star_border_rounded,
+                                                      color:
+                                                          FlutterFlowTheme.of(
+                                                                  context)
+                                                              .primary,
+                                                      size: 22.0,
+                                                    ),
+                                                  ),
+                                                ),
+                                                Padding(
+                                                  padding: EdgeInsetsDirectional
+                                                      .fromSTEB(
+                                                          18.0, 0.0, 0.0, 0.0),
+                                                  child: Text(
+                                                    'Review in the App Store',
+                                                    style: FlutterFlowTheme.of(
+                                                            context)
+                                                        .headlineSmall
+                                                        .override(
+                                                          fontFamily: 'Outfit',
+                                                          fontSize: 16.0,
+                                                        ),
+                                                  ),
+                                                ),
+                                              ],
+                                            ),
+                                          ),
+                                          Divider(
+                                            thickness: 1.0,
+                                            color: FlutterFlowTheme.of(context)
+                                                .accent4,
+                                          ),
+                                        ],
+                                      ),
+                                    ),
+                                  Padding(
+                                    padding: EdgeInsetsDirectional.fromSTEB(
+                                        0.0, 12.0, 0.0, 12.0),
+                                    child: InkWell(
+                                      splashColor: Colors.transparent,
+                                      focusColor: Colors.transparent,
+                                      hoverColor: Colors.transparent,
+                                      highlightColor: Colors.transparent,
+                                      onTap: () async {
+                                        logFirebaseEvent(
+                                            'PROFILE_PAGE_LogoutTile_ON_TAP');
+                                        logFirebaseEvent('LogoutTile_auth');
+                                        GoRouter.of(context).prepareAuthEvent();
+                                        await authManager.signOut();
+                                        GoRouter.of(context)
+                                            .clearRedirectLocation();
+
+                                        context.goNamedAuth(
+                                            'SignIn', context.mounted);
+                                      },
+                                      child: Row(
+                                        mainAxisSize: MainAxisSize.max,
+                                        children: [
+                                          Container(
+                                            width: 40.0,
+                                            height: 40.0,
+                                            decoration: BoxDecoration(
+                                              color:
+                                                  FlutterFlowTheme.of(context)
+                                                      .accent1,
+                                              shape: BoxShape.circle,
+                                            ),
+                                            child: Padding(
+                                              padding: EdgeInsets.all(4.0),
+                                              child: Icon(
+                                                Icons.logout,
+                                                color:
+                                                    FlutterFlowTheme.of(context)
+                                                        .primary,
+                                                size: 18.0,
+                                              ),
+                                            ),
+                                          ),
+                                          Padding(
+                                            padding:
+                                                EdgeInsetsDirectional.fromSTEB(
+                                                    18.0, 0.0, 0.0, 0.0),
+                                            child: Text(
+                                              'Log out',
+                                              style:
+                                                  FlutterFlowTheme.of(context)
+                                                      .bodyLarge,
+                                            ),
+                                          ),
+                                        ],
+                                      ),
+                                    ),
+                                  ),
+                                ],
+                              );
+                            },
+                          ),
+                        ),
+                      ].addToEnd(SizedBox(height: 44.0)),
+                    ),
+                  ),
+                ),
+              ],
+            ),
+          ),
+        ),
+      ),
+    );
+  }
+}
Index: lib/pages/profile/profile/profile_model.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/profile/profile/profile_model.dart b/lib/pages/profile/profile/profile_model.dart
new file mode 100644
--- /dev/null	(date 1708365758596)
+++ b/lib/pages/profile/profile/profile_model.dart	(date 1708365758596)
@@ -0,0 +1,34 @@
+import '/auth/firebase_auth/auth_util.dart';
+import '/backend/backend.dart';
+import '/flutter_flow/flutter_flow_icon_button.dart';
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/flutter_flow_widgets.dart';
+import 'profile_widget.dart' show ProfileWidget;
+import 'package:flutter/material.dart';
+import 'package:flutter/scheduler.dart';
+import 'package:flutter/services.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+import 'package:share_plus/share_plus.dart';
+import 'package:url_launcher/url_launcher.dart';
+
+class ProfileModel extends FlutterFlowModel<ProfileWidget> {
+  ///  State fields for stateful widgets in this page.
+
+  final unfocusNode = FocusNode();
+
+  /// Initialization and disposal methods.
+
+  @override
+  void initState(BuildContext context) {}
+
+  @override
+  void dispose() {
+    unfocusNode.dispose();
+  }
+
+  /// Action blocks are added here.
+
+  /// Additional helper methods are added here.
+}
Index: lib/pages/profile/about_us/about_us_model.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/profile/about_us/about_us_model.dart b/lib/pages/profile/about_us/about_us_model.dart
new file mode 100644
--- /dev/null	(date 1708365758507)
+++ b/lib/pages/profile/about_us/about_us_model.dart	(date 1708365758507)
@@ -0,0 +1,30 @@
+import '/flutter_flow/flutter_flow_icon_button.dart';
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/flutter_flow_widgets.dart';
+import 'about_us_widget.dart' show AboutUsWidget;
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+import 'package:simple_gradient_text/simple_gradient_text.dart';
+
+class AboutUsModel extends FlutterFlowModel<AboutUsWidget> {
+  ///  State fields for stateful widgets in this page.
+
+  final unfocusNode = FocusNode();
+
+  /// Initialization and disposal methods.
+
+  @override
+  void initState(BuildContext context) {}
+
+  @override
+  void dispose() {
+    unfocusNode.dispose();
+  }
+
+  /// Action blocks are added here.
+
+  /// Additional helper methods are added here.
+}
Index: lib/pages/profile/about_us/about_us_widget.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/profile/about_us/about_us_widget.dart b/lib/pages/profile/about_us/about_us_widget.dart
new file mode 100644
--- /dev/null	(date 1708365758518)
+++ b/lib/pages/profile/about_us/about_us_widget.dart	(date 1708365758518)
@@ -0,0 +1,163 @@
+import '/flutter_flow/flutter_flow_icon_button.dart';
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/flutter_flow_widgets.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+import 'package:simple_gradient_text/simple_gradient_text.dart';
+import 'about_us_model.dart';
+export 'about_us_model.dart';
+
+class AboutUsWidget extends StatefulWidget {
+  const AboutUsWidget({super.key});
+
+  @override
+  State<AboutUsWidget> createState() => _AboutUsWidgetState();
+}
+
+class _AboutUsWidgetState extends State<AboutUsWidget> {
+  late AboutUsModel _model;
+
+  final scaffoldKey = GlobalKey<ScaffoldState>();
+
+  @override
+  void initState() {
+    super.initState();
+    _model = createModel(context, () => AboutUsModel());
+
+    logFirebaseEvent('screen_view', parameters: {'screen_name': 'AboutUs'});
+    WidgetsBinding.instance.addPostFrameCallback((_) => setState(() {}));
+  }
+
+  @override
+  void dispose() {
+    _model.dispose();
+
+    super.dispose();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    if (isiOS) {
+      SystemChrome.setSystemUIOverlayStyle(
+        SystemUiOverlayStyle(
+          statusBarBrightness: Theme.of(context).brightness,
+          systemStatusBarContrastEnforced: true,
+        ),
+      );
+    }
+
+    context.watch<FFAppState>();
+
+    return GestureDetector(
+      onTap: () => _model.unfocusNode.canRequestFocus
+          ? FocusScope.of(context).requestFocus(_model.unfocusNode)
+          : FocusScope.of(context).unfocus(),
+      child: Scaffold(
+        key: scaffoldKey,
+        backgroundColor: FlutterFlowTheme.of(context).primaryBackground,
+        appBar: PreferredSize(
+          preferredSize: Size.fromHeight(100.0),
+          child: AppBar(
+            backgroundColor: FlutterFlowTheme.of(context).primary,
+            automaticallyImplyLeading: false,
+            actions: [],
+            flexibleSpace: FlexibleSpaceBar(
+              title: Padding(
+                padding: EdgeInsetsDirectional.fromSTEB(0.0, 0.0, 0.0, 14.0),
+                child: Column(
+                  mainAxisSize: MainAxisSize.max,
+                  mainAxisAlignment: MainAxisAlignment.end,
+                  crossAxisAlignment: CrossAxisAlignment.start,
+                  children: [
+                    Padding(
+                      padding:
+                          EdgeInsetsDirectional.fromSTEB(0.0, 0.0, 0.0, 8.0),
+                      child: Row(
+                        mainAxisSize: MainAxisSize.max,
+                        children: [
+                          Padding(
+                            padding: EdgeInsetsDirectional.fromSTEB(
+                                12.0, 0.0, 0.0, 0.0),
+                            child: FlutterFlowIconButton(
+                              borderColor: Colors.transparent,
+                              borderRadius: 30.0,
+                              borderWidth: 1.0,
+                              buttonSize: 50.0,
+                              icon: Icon(
+                                Icons.arrow_back_rounded,
+                                color: Colors.white,
+                                size: 30.0,
+                              ),
+                              onPressed: () async {
+                                logFirebaseEvent(
+                                    'ABOUT_US_arrow_back_rounded_ICN_ON_TAP');
+                                logFirebaseEvent('IconButton_navigate_to');
+
+                                context.pushNamed('Profile');
+                              },
+                            ),
+                          ),
+                          Padding(
+                            padding: EdgeInsetsDirectional.fromSTEB(
+                                4.0, 0.0, 0.0, 0.0),
+                            child: Text(
+                              'Back',
+                              style: FlutterFlowTheme.of(context)
+                                  .headlineMedium
+                                  .override(
+                                    fontFamily: 'Outfit',
+                                    color: Colors.white,
+                                    fontSize: 16.0,
+                                  ),
+                            ),
+                          ),
+                        ],
+                      ),
+                    ),
+                  ],
+                ),
+              ),
+              centerTitle: true,
+              expandedTitleScale: 1.0,
+            ),
+            elevation: 2.0,
+          ),
+        ),
+        body: SafeArea(
+          top: true,
+          child: Column(
+            mainAxisSize: MainAxisSize.max,
+            children: [
+              GradientText(
+                'About Us',
+                style: FlutterFlowTheme.of(context).titleLarge.override(
+                      fontFamily: 'Outfit',
+                      fontSize: 35.0,
+                    ),
+                colors: [
+                  FlutterFlowTheme.of(context).primary,
+                  FlutterFlowTheme.of(context).secondary
+                ],
+                gradientDirection: GradientDirection.ltr,
+                gradientType: GradientType.linear,
+              ),
+              Padding(
+                padding: EdgeInsetsDirectional.fromSTEB(5.0, 0.0, 5.0, 0.0),
+                child: Text(
+                  'Khetiharii is revolutionizing the agricultural landscape by providing farmers with a comprehensive suite of digital solutions tailored to their needs. From accessing farming equipment to veterinary care, price comparison for crops, procurement of animal feed and fertilizers, and even advanced plant health management through leaf scanning, Khetiharii is empowering farmers across India.\n\nThe platform\'s seamless integration of location-based services ensures that farmers can easily find nearby providers offering equipment rentals, saving time and effort in their agricultural operations. Additionally, the video call and phone consultation feature with veterinary doctors bring expert advice and support directly to farmers\' fingertips, enhancing the health and well-being of their livestock.\n\nBy facilitating price comparison for crops and connecting farmers with buyers, Khetiharii enables farmers to make informed decisions and maximize profitability in their agricultural endeavors. Moreover, the platform\'s feature for procuring animal feed and fertilizers streamlines purchasing decisions, offering convenience, transparency, and cost savings.\n\nKhetiharii\'s leaf scanning technology further enhances plant health management by providing instant diagnosis and tailored recommendations to address plant diseases early. This proactive approach helps farmers protect their crops and maximize yields, contributing to greater farm profitability and sustainability.\n\nFurthermore, Khetibot serves as a valuable companion for farmers, offering expert advice, guidance, and support in their preferred language. With its multilingual capabilities and comprehensive knowledge base, Khetibot empowers farmers to overcome challenges and improve their farming practices, ultimately leading to greater success in agriculture.\n\nOverall, Khetiharii is revolutionizing the way farmers access services and information, leveraging technology to optimize agricultural operations, improve productivity, and enhance sustainability across India\'s farming community',
+                  style: FlutterFlowTheme.of(context).bodyMedium.override(
+                        fontFamily: 'Plus Jakarta Sans',
+                        fontSize: 18.0,
+                      ),
+                ),
+              ),
+            ],
+          ),
+        ),
+      ),
+    );
+  }
+}
Index: lib/pages/profile/edit_profile/edit_profile_widget.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/profile/edit_profile/edit_profile_widget.dart b/lib/pages/profile/edit_profile/edit_profile_widget.dart
new file mode 100644
--- /dev/null	(date 1708365758581)
+++ b/lib/pages/profile/edit_profile/edit_profile_widget.dart	(date 1708365758581)
@@ -0,0 +1,366 @@
+import '/auth/firebase_auth/auth_util.dart';
+import '/components/custom_appbar_widget.dart';
+import '/components/title_with_subtitle/title_with_subtitle_widget.dart';
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/flutter_flow_widgets.dart';
+import 'package:easy_debounce/easy_debounce.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+import 'edit_profile_model.dart';
+export 'edit_profile_model.dart';
+
+class EditProfileWidget extends StatefulWidget {
+  const EditProfileWidget({super.key});
+
+  @override
+  State<EditProfileWidget> createState() => _EditProfileWidgetState();
+}
+
+class _EditProfileWidgetState extends State<EditProfileWidget> {
+  late EditProfileModel _model;
+
+  final scaffoldKey = GlobalKey<ScaffoldState>();
+
+  @override
+  void initState() {
+    super.initState();
+    _model = createModel(context, () => EditProfileModel());
+
+    logFirebaseEvent('screen_view', parameters: {'screen_name': 'EditProfile'});
+    _model.fullNameController ??=
+        TextEditingController(text: currentUserDisplayName);
+    _model.fullNameFocusNode ??= FocusNode();
+
+    _model.emailAddressController ??=
+        TextEditingController(text: currentUserEmail);
+    _model.emailAddressFocusNode ??= FocusNode();
+
+    WidgetsBinding.instance.addPostFrameCallback((_) => setState(() {}));
+  }
+
+  @override
+  void dispose() {
+    _model.dispose();
+
+    super.dispose();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    if (isiOS) {
+      SystemChrome.setSystemUIOverlayStyle(
+        SystemUiOverlayStyle(
+          statusBarBrightness: Theme.of(context).brightness,
+          systemStatusBarContrastEnforced: true,
+        ),
+      );
+    }
+
+    context.watch<FFAppState>();
+
+    return GestureDetector(
+      onTap: () => _model.unfocusNode.canRequestFocus
+          ? FocusScope.of(context).requestFocus(_model.unfocusNode)
+          : FocusScope.of(context).unfocus(),
+      child: Scaffold(
+        key: scaffoldKey,
+        backgroundColor: FlutterFlowTheme.of(context).primaryBackground,
+        body: SafeArea(
+          top: true,
+          child: Align(
+            alignment: AlignmentDirectional(0.0, 0.0),
+            child: Padding(
+              padding: EdgeInsets.all(24.0),
+              child: Column(
+                mainAxisSize: MainAxisSize.max,
+                mainAxisAlignment: MainAxisAlignment.start,
+                crossAxisAlignment: CrossAxisAlignment.start,
+                children: [
+                  InkWell(
+                    splashColor: Colors.transparent,
+                    focusColor: Colors.transparent,
+                    hoverColor: Colors.transparent,
+                    highlightColor: Colors.transparent,
+                    onTap: () async {
+                      logFirebaseEvent(
+                          'EDIT_PROFILE_Container_or1jni5i_ON_TAP');
+                      logFirebaseEvent('customAppbar_navigate_to');
+
+                      context.pushNamed('Dashboard');
+                    },
+                    child: wrapWithModel(
+                      model: _model.customAppbarModel,
+                      updateCallback: () => setState(() {}),
+                      child: CustomAppbarWidget(
+                        backButton: true,
+                        actionButton: true,
+                        actionButtonText: 'Save',
+                        optionsButton: false,
+                        actionButtonAction: () async {
+                          logFirebaseEvent(
+                              'EDIT_PROFILE_Container_or1jni5i_CALLBACK');
+                          logFirebaseEvent('customAppbar_navigate_to');
+
+                          context.pushNamed('AboutUs');
+
+                          logFirebaseEvent('customAppbar_update_page_state');
+                          setState(() {
+                            _model.unsavedChanges = false;
+                          });
+                        },
+                        optionsButtonAction: () async {},
+                      ),
+                    ),
+                  ),
+                  Padding(
+                    padding:
+                        EdgeInsetsDirectional.fromSTEB(0.0, 24.0, 0.0, 0.0),
+                    child: Text(
+                      'Edit Profile',
+                      style: FlutterFlowTheme.of(context).displaySmall,
+                    ),
+                  ),
+                  Column(
+                    mainAxisSize: MainAxisSize.max,
+                    crossAxisAlignment: CrossAxisAlignment.start,
+                    children: [
+                      Padding(
+                        padding:
+                            EdgeInsetsDirectional.fromSTEB(0.0, 18.0, 0.0, 0.0),
+                        child: Column(
+                          mainAxisSize: MainAxisSize.max,
+                          crossAxisAlignment: CrossAxisAlignment.start,
+                          children: [
+                            Padding(
+                              padding: EdgeInsetsDirectional.fromSTEB(
+                                  0.0, 0.0, 0.0, 4.0),
+                              child: Text(
+                                'Full Name',
+                                style: FlutterFlowTheme.of(context).bodyLarge,
+                              ),
+                            ),
+                            Padding(
+                              padding: EdgeInsetsDirectional.fromSTEB(
+                                  0.0, 4.0, 0.0, 0.0),
+                              child: TextFormField(
+                                controller: _model.fullNameController,
+                                focusNode: _model.fullNameFocusNode,
+                                onChanged: (_) => EasyDebounce.debounce(
+                                  '_model.fullNameController',
+                                  Duration(milliseconds: 2000),
+                                  () async {
+                                    logFirebaseEvent(
+                                        'EDIT_PROFILE_fullName_ON_TEXTFIELD_CHANG');
+                                    logFirebaseEvent(
+                                        'fullName_update_page_state');
+                                    setState(() {
+                                      _model.unsavedChanges = true;
+                                    });
+                                  },
+                                ),
+                                autofillHints: [AutofillHints.name],
+                                textCapitalization: TextCapitalization.words,
+                                textInputAction: TextInputAction.next,
+                                obscureText: false,
+                                decoration: InputDecoration(
+                                  enabledBorder: OutlineInputBorder(
+                                    borderSide: BorderSide(
+                                      color: FlutterFlowTheme.of(context)
+                                          .secondaryBackground,
+                                      width: 1.0,
+                                    ),
+                                    borderRadius: BorderRadius.circular(8.0),
+                                  ),
+                                  focusedBorder: OutlineInputBorder(
+                                    borderSide: BorderSide(
+                                      color:
+                                          FlutterFlowTheme.of(context).primary,
+                                      width: 1.0,
+                                    ),
+                                    borderRadius: BorderRadius.circular(8.0),
+                                  ),
+                                  errorBorder: OutlineInputBorder(
+                                    borderSide: BorderSide(
+                                      color: FlutterFlowTheme.of(context).error,
+                                      width: 1.0,
+                                    ),
+                                    borderRadius: BorderRadius.circular(8.0),
+                                  ),
+                                  focusedErrorBorder: OutlineInputBorder(
+                                    borderSide: BorderSide(
+                                      color: FlutterFlowTheme.of(context).error,
+                                      width: 1.0,
+                                    ),
+                                    borderRadius: BorderRadius.circular(8.0),
+                                  ),
+                                  filled: true,
+                                  fillColor: FlutterFlowTheme.of(context)
+                                      .secondaryBackground,
+                                ),
+                                style: FlutterFlowTheme.of(context)
+                                    .bodyMedium
+                                    .override(
+                                      fontFamily: 'Plus Jakarta Sans',
+                                      fontSize: 16.0,
+                                      fontWeight: FontWeight.w500,
+                                      lineHeight: 1.0,
+                                    ),
+                                minLines: 1,
+                                cursorColor:
+                                    FlutterFlowTheme.of(context).primary,
+                                validator: _model.fullNameControllerValidator
+                                    .asValidator(context),
+                              ),
+                            ),
+                          ],
+                        ),
+                      ),
+                    ],
+                  ),
+                  wrapWithModel(
+                    model: _model.titleWithSubtitleModel1,
+                    updateCallback: () => setState(() {}),
+                    child: TitleWithSubtitleWidget(
+                      title: 'Reset Password',
+                      subtitle:
+                          'Recieve a link via email to reset your password.',
+                    ),
+                  ),
+                  Padding(
+                    padding:
+                        EdgeInsetsDirectional.fromSTEB(0.0, 12.0, 0.0, 0.0),
+                    child: FFButtonWidget(
+                      onPressed: () async {
+                        logFirebaseEvent(
+                            'EDIT_PROFILE_RESET_PASSWORD_BTN_ON_TAP');
+                        logFirebaseEvent('Button_auth');
+                        if (_model.emailAddressController.text.isEmpty) {
+                          ScaffoldMessenger.of(context).showSnackBar(
+                            SnackBar(
+                              content: Text(
+                                'Email required!',
+                              ),
+                            ),
+                          );
+                          return;
+                        }
+                        await authManager.resetPassword(
+                          email: _model.emailAddressController.text,
+                          context: context,
+                        );
+                      },
+                      text: 'Reset Password',
+                      options: FFButtonOptions(
+                        width: double.infinity,
+                        height: 50.0,
+                        padding:
+                            EdgeInsetsDirectional.fromSTEB(0.0, 0.0, 0.0, 0.0),
+                        iconPadding:
+                            EdgeInsetsDirectional.fromSTEB(0.0, 0.0, 0.0, 0.0),
+                        color: FlutterFlowTheme.of(context).primary,
+                        textStyle:
+                            FlutterFlowTheme.of(context).bodyMedium.override(
+                                  fontFamily: 'Plus Jakarta Sans',
+                                  color: FlutterFlowTheme.of(context)
+                                      .primaryBackground,
+                                  fontWeight: FontWeight.w600,
+                                ),
+                        elevation: 0.0,
+                        borderSide: BorderSide(
+                          color: Colors.transparent,
+                          width: 1.0,
+                        ),
+                        borderRadius: BorderRadius.circular(25.0),
+                      ),
+                    ),
+                  ),
+                  wrapWithModel(
+                    model: _model.titleWithSubtitleModel2,
+                    updateCallback: () => setState(() {}),
+                    child: TitleWithSubtitleWidget(
+                      title: 'Delete Account',
+                      subtitle: 'The data from your account will be deleted.',
+                    ),
+                  ),
+                  Padding(
+                    padding:
+                        EdgeInsetsDirectional.fromSTEB(0.0, 12.0, 0.0, 48.0),
+                    child: FFButtonWidget(
+                      onPressed: () async {
+                        logFirebaseEvent(
+                            'EDIT_PROFILE_DELETE_ACCOUNT_BTN_ON_TAP');
+                        logFirebaseEvent('Button_auth');
+                        await authManager.deleteUser(context);
+                        logFirebaseEvent('Button_navigate_to');
+
+                        context.goNamed(
+                          'Splash',
+                          extra: <String, dynamic>{
+                            kTransitionInfoKey: TransitionInfo(
+                              hasTransition: true,
+                              transitionType: PageTransitionType.fade,
+                              duration: Duration(milliseconds: 0),
+                            ),
+                          },
+                        );
+                      },
+                      text: 'Delete Account',
+                      options: FFButtonOptions(
+                        width: double.infinity,
+                        height: 50.0,
+                        padding:
+                            EdgeInsetsDirectional.fromSTEB(0.0, 0.0, 0.0, 0.0),
+                        iconPadding:
+                            EdgeInsetsDirectional.fromSTEB(0.0, 0.0, 0.0, 0.0),
+                        color: Color(0xFFFFD4D4),
+                        textStyle:
+                            FlutterFlowTheme.of(context).bodyMedium.override(
+                                  fontFamily: 'Plus Jakarta Sans',
+                                  color: Color(0xFFB74D4D),
+                                  fontWeight: FontWeight.w600,
+                                ),
+                        elevation: 0.0,
+                        borderSide: BorderSide(
+                          color: Colors.transparent,
+                          width: 1.0,
+                        ),
+                        borderRadius: BorderRadius.circular(25.0),
+                      ),
+                    ),
+                  ),
+                  TextFormField(
+                    controller: _model.emailAddressController,
+                    focusNode: _model.emailAddressFocusNode,
+                    textCapitalization: TextCapitalization.words,
+                    readOnly: true,
+                    obscureText: false,
+                    decoration: InputDecoration(
+                      isDense: true,
+                      enabledBorder: InputBorder.none,
+                      focusedBorder: InputBorder.none,
+                      errorBorder: InputBorder.none,
+                      focusedErrorBorder: InputBorder.none,
+                    ),
+                    style: FlutterFlowTheme.of(context).bodyMedium.override(
+                          fontFamily: 'Plus Jakarta Sans',
+                          color: FlutterFlowTheme.of(context).primaryBackground,
+                          fontSize: 1.0,
+                          fontWeight: FontWeight.w500,
+                          lineHeight: 1.0,
+                        ),
+                    minLines: 1,
+                    validator: _model.emailAddressControllerValidator
+                        .asValidator(context),
+                  ),
+                ],
+              ),
+            ),
+          ),
+        ),
+      ),
+    );
+  }
+}
Index: lib/pages/profile/edit_profile/edit_profile_model.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/profile/edit_profile/edit_profile_model.dart b/lib/pages/profile/edit_profile/edit_profile_model.dart
new file mode 100644
--- /dev/null	(date 1708365758549)
+++ b/lib/pages/profile/edit_profile/edit_profile_model.dart	(date 1708365758549)
@@ -0,0 +1,64 @@
+import '/auth/firebase_auth/auth_util.dart';
+import '/components/custom_appbar_widget.dart';
+import '/components/title_with_subtitle/title_with_subtitle_widget.dart';
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/flutter_flow_widgets.dart';
+import 'edit_profile_widget.dart' show EditProfileWidget;
+import 'package:easy_debounce/easy_debounce.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+
+class EditProfileModel extends FlutterFlowModel<EditProfileWidget> {
+  ///  Local state fields for this page.
+
+  bool unsavedChanges = false;
+
+  ///  State fields for stateful widgets in this page.
+
+  final unfocusNode = FocusNode();
+  // Model for customAppbar component.
+  late CustomAppbarModel customAppbarModel;
+  // State field(s) for fullName widget.
+  FocusNode? fullNameFocusNode;
+  TextEditingController? fullNameController;
+  String? Function(BuildContext, String?)? fullNameControllerValidator;
+  // Model for titleWithSubtitle component.
+  late TitleWithSubtitleModel titleWithSubtitleModel1;
+  // Model for titleWithSubtitle component.
+  late TitleWithSubtitleModel titleWithSubtitleModel2;
+  // State field(s) for emailAddress widget.
+  FocusNode? emailAddressFocusNode;
+  TextEditingController? emailAddressController;
+  String? Function(BuildContext, String?)? emailAddressControllerValidator;
+
+  /// Initialization and disposal methods.
+
+  @override
+  void initState(BuildContext context) {
+    customAppbarModel = createModel(context, () => CustomAppbarModel());
+    titleWithSubtitleModel1 =
+        createModel(context, () => TitleWithSubtitleModel());
+    titleWithSubtitleModel2 =
+        createModel(context, () => TitleWithSubtitleModel());
+  }
+
+  @override
+  void dispose() {
+    unfocusNode.dispose();
+    customAppbarModel.dispose();
+    fullNameFocusNode?.dispose();
+    fullNameController?.dispose();
+
+    titleWithSubtitleModel1.dispose();
+    titleWithSubtitleModel2.dispose();
+    emailAddressFocusNode?.dispose();
+    emailAddressController?.dispose();
+  }
+
+  /// Action blocks are added here.
+
+  /// Additional helper methods are added here.
+}
Index: lib/pages/profile/support_center/support_center_model.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/profile/support_center/support_center_model.dart b/lib/pages/profile/support_center/support_center_model.dart
new file mode 100644
--- /dev/null	(date 1708365758408)
+++ b/lib/pages/profile/support_center/support_center_model.dart	(date 1708365758408)
@@ -0,0 +1,45 @@
+import '/components/custom_appbar_widget.dart';
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/flutter_flow_widgets.dart';
+import 'support_center_widget.dart' show SupportCenterWidget;
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:flutter_rating_bar/flutter_rating_bar.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+
+class SupportCenterModel extends FlutterFlowModel<SupportCenterWidget> {
+  ///  State fields for stateful widgets in this page.
+
+  final unfocusNode = FocusNode();
+  // Model for customAppbar component.
+  late CustomAppbarModel customAppbarModel;
+  // State field(s) for TextField widget.
+  FocusNode? textFieldFocusNode;
+  TextEditingController? textController;
+  String? Function(BuildContext, String?)? textControllerValidator;
+  // State field(s) for RatingBar widget.
+  double? ratingBarValue1;
+  // State field(s) for RatingBar widget.
+  double? ratingBarValue2;
+
+  /// Initialization and disposal methods.
+
+  @override
+  void initState(BuildContext context) {
+    customAppbarModel = createModel(context, () => CustomAppbarModel());
+  }
+
+  @override
+  void dispose() {
+    unfocusNode.dispose();
+    customAppbarModel.dispose();
+    textFieldFocusNode?.dispose();
+    textController?.dispose();
+  }
+
+  /// Action blocks are added here.
+
+  /// Additional helper methods are added here.
+}
Index: lib/pages/profile/support_center/support_center_widget.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/profile/support_center/support_center_widget.dart b/lib/pages/profile/support_center/support_center_widget.dart
new file mode 100644
--- /dev/null	(date 1708365758439)
+++ b/lib/pages/profile/support_center/support_center_widget.dart	(date 1708365758439)
@@ -0,0 +1,220 @@
+import '/components/custom_appbar_widget.dart';
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/flutter_flow_widgets.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:flutter_rating_bar/flutter_rating_bar.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+import 'support_center_model.dart';
+export 'support_center_model.dart';
+
+class SupportCenterWidget extends StatefulWidget {
+  const SupportCenterWidget({super.key});
+
+  @override
+  State<SupportCenterWidget> createState() => _SupportCenterWidgetState();
+}
+
+class _SupportCenterWidgetState extends State<SupportCenterWidget> {
+  late SupportCenterModel _model;
+
+  final scaffoldKey = GlobalKey<ScaffoldState>();
+
+  @override
+  void initState() {
+    super.initState();
+    _model = createModel(context, () => SupportCenterModel());
+
+    logFirebaseEvent('screen_view',
+        parameters: {'screen_name': 'SupportCenter'});
+    _model.textController ??= TextEditingController();
+    _model.textFieldFocusNode ??= FocusNode();
+
+    WidgetsBinding.instance.addPostFrameCallback((_) => setState(() {}));
+  }
+
+  @override
+  void dispose() {
+    _model.dispose();
+
+    super.dispose();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    if (isiOS) {
+      SystemChrome.setSystemUIOverlayStyle(
+        SystemUiOverlayStyle(
+          statusBarBrightness: Theme.of(context).brightness,
+          systemStatusBarContrastEnforced: true,
+        ),
+      );
+    }
+
+    context.watch<FFAppState>();
+
+    return GestureDetector(
+      onTap: () => _model.unfocusNode.canRequestFocus
+          ? FocusScope.of(context).requestFocus(_model.unfocusNode)
+          : FocusScope.of(context).unfocus(),
+      child: Scaffold(
+        key: scaffoldKey,
+        backgroundColor: FlutterFlowTheme.of(context).primaryBackground,
+        body: SafeArea(
+          top: true,
+          child: Align(
+            alignment: AlignmentDirectional(0.0, 0.0),
+            child: Padding(
+              padding: EdgeInsets.all(24.0),
+              child: Column(
+                mainAxisSize: MainAxisSize.max,
+                mainAxisAlignment: MainAxisAlignment.start,
+                crossAxisAlignment: CrossAxisAlignment.start,
+                children: [
+                  wrapWithModel(
+                    model: _model.customAppbarModel,
+                    updateCallback: () => setState(() {}),
+                    child: CustomAppbarWidget(
+                      backButton: true,
+                      actionButton: false,
+                      actionButtonAction: () async {},
+                      optionsButtonAction: () async {},
+                    ),
+                  ),
+                  Padding(
+                    padding:
+                        EdgeInsetsDirectional.fromSTEB(0.0, 24.0, 0.0, 0.0),
+                    child: Text(
+                      'Support Center',
+                      style: FlutterFlowTheme.of(context).displaySmall,
+                    ),
+                  ),
+                  Padding(
+                    padding:
+                        EdgeInsetsDirectional.fromSTEB(0.0, 50.0, 0.0, 0.0),
+                    child: Text(
+                      'Problem',
+                      style: FlutterFlowTheme.of(context).titleLarge,
+                    ),
+                  ),
+                  Padding(
+                    padding: EdgeInsetsDirectional.fromSTEB(8.0, 0.0, 8.0, 0.0),
+                    child: TextFormField(
+                      controller: _model.textController,
+                      focusNode: _model.textFieldFocusNode,
+                      autofocus: true,
+                      obscureText: false,
+                      decoration: InputDecoration(
+                        labelStyle: FlutterFlowTheme.of(context).titleLarge,
+                        hintText: 'Problem Statement',
+                        hintStyle: FlutterFlowTheme.of(context).labelMedium,
+                        enabledBorder: OutlineInputBorder(
+                          borderSide: BorderSide(
+                            color: FlutterFlowTheme.of(context).primaryText,
+                            width: 2.0,
+                          ),
+                          borderRadius: BorderRadius.circular(8.0),
+                        ),
+                        focusedBorder: OutlineInputBorder(
+                          borderSide: BorderSide(
+                            color: FlutterFlowTheme.of(context).primary,
+                            width: 2.0,
+                          ),
+                          borderRadius: BorderRadius.circular(8.0),
+                        ),
+                        errorBorder: OutlineInputBorder(
+                          borderSide: BorderSide(
+                            color: FlutterFlowTheme.of(context).error,
+                            width: 2.0,
+                          ),
+                          borderRadius: BorderRadius.circular(8.0),
+                        ),
+                        focusedErrorBorder: OutlineInputBorder(
+                          borderSide: BorderSide(
+                            color: FlutterFlowTheme.of(context).error,
+                            width: 2.0,
+                          ),
+                          borderRadius: BorderRadius.circular(8.0),
+                        ),
+                      ),
+                      style: FlutterFlowTheme.of(context).titleLarge,
+                      validator:
+                          _model.textControllerValidator.asValidator(context),
+                    ),
+                  ),
+                  Padding(
+                    padding:
+                        EdgeInsetsDirectional.fromSTEB(120.0, 30.0, 0.0, 0.0),
+                    child: FFButtonWidget(
+                      onPressed: () {
+                        print('Button pressed ...');
+                      },
+                      text: 'Submit',
+                      options: FFButtonOptions(
+                        height: 40.0,
+                        padding: EdgeInsetsDirectional.fromSTEB(
+                            24.0, 0.0, 24.0, 0.0),
+                        iconPadding:
+                            EdgeInsetsDirectional.fromSTEB(0.0, 0.0, 0.0, 0.0),
+                        color: FlutterFlowTheme.of(context).primary,
+                        textStyle:
+                            FlutterFlowTheme.of(context).titleSmall.override(
+                                  fontFamily: 'Plus Jakarta Sans',
+                                  color: Colors.white,
+                                ),
+                        elevation: 3.0,
+                        borderSide: BorderSide(
+                          color: Colors.transparent,
+                          width: 1.0,
+                        ),
+                        borderRadius: BorderRadius.circular(8.0),
+                      ),
+                    ),
+                  ),
+                  Padding(
+                    padding:
+                        EdgeInsetsDirectional.fromSTEB(80.0, 400.0, 0.0, 0.0),
+                    child: RatingBar.builder(
+                      onRatingUpdate: (newValue) =>
+                          setState(() => _model.ratingBarValue1 = newValue),
+                      itemBuilder: (context, index) => Icon(
+                        Icons.star_rounded,
+                        color: FlutterFlowTheme.of(context).tertiary,
+                      ),
+                      direction: Axis.horizontal,
+                      initialRating: _model.ratingBarValue1 ??= 3.0,
+                      unratedColor: FlutterFlowTheme.of(context).accent3,
+                      itemCount: 5,
+                      itemSize: 40.0,
+                      glowColor: FlutterFlowTheme.of(context).tertiary,
+                    ),
+                  ),
+                  Padding(
+                    padding:
+                        EdgeInsetsDirectional.fromSTEB(80.0, 500.0, 0.0, 0.0),
+                    child: RatingBar.builder(
+                      onRatingUpdate: (newValue) =>
+                          setState(() => _model.ratingBarValue2 = newValue),
+                      itemBuilder: (context, index) => Icon(
+                        Icons.star_rounded,
+                        color: FlutterFlowTheme.of(context).tertiary,
+                      ),
+                      direction: Axis.horizontal,
+                      initialRating: _model.ratingBarValue2 ??= 3.0,
+                      unratedColor: FlutterFlowTheme.of(context).accent3,
+                      itemCount: 5,
+                      itemSize: 40.0,
+                      glowColor: FlutterFlowTheme.of(context).tertiary,
+                    ),
+                  ),
+                ],
+              ),
+            ),
+          ),
+        ),
+      ),
+    );
+  }
+}
Index: lib/pages/profile/edit_preferences/edit_preferences_model.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/profile/edit_preferences/edit_preferences_model.dart b/lib/pages/profile/edit_preferences/edit_preferences_model.dart
new file mode 100644
--- /dev/null	(date 1708365758361)
+++ b/lib/pages/profile/edit_preferences/edit_preferences_model.dart	(date 1708365758361)
@@ -0,0 +1,71 @@
+import '/backend/backend.dart';
+import '/components/custom_appbar_widget.dart';
+import '/components/preference_item/preference_item_widget.dart';
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/flutter_flow_widgets.dart';
+import 'edit_preferences_widget.dart' show EditPreferencesWidget;
+import 'package:flutter/material.dart';
+import 'package:flutter/scheduler.dart';
+import 'package:flutter/services.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+
+class EditPreferencesModel extends FlutterFlowModel<EditPreferencesWidget> {
+  ///  Local state fields for this page.
+
+  List<String> allergenSelection = [];
+  void addToAllergenSelection(String item) => allergenSelection.add(item);
+  void removeFromAllergenSelection(String item) =>
+      allergenSelection.remove(item);
+  void removeAtIndexFromAllergenSelection(int index) =>
+      allergenSelection.removeAt(index);
+  void insertAtIndexInAllergenSelection(int index, String item) =>
+      allergenSelection.insert(index, item);
+  void updateAllergenSelectionAtIndex(int index, Function(String) updateFn) =>
+      allergenSelection[index] = updateFn(allergenSelection[index]);
+
+  String? dietSelection;
+
+  List<String> ingredientSelection = [];
+  void addToIngredientSelection(String item) => ingredientSelection.add(item);
+  void removeFromIngredientSelection(String item) =>
+      ingredientSelection.remove(item);
+  void removeAtIndexFromIngredientSelection(int index) =>
+      ingredientSelection.removeAt(index);
+  void insertAtIndexInIngredientSelection(int index, String item) =>
+      ingredientSelection.insert(index, item);
+  void updateIngredientSelectionAtIndex(int index, Function(String) updateFn) =>
+      ingredientSelection[index] = updateFn(ingredientSelection[index]);
+
+  ///  State fields for stateful widgets in this page.
+
+  final unfocusNode = FocusNode();
+  // Model for customAppbar component.
+  late CustomAppbarModel customAppbarModel;
+  // State field(s) for PageView widget.
+  PageController? pageViewController;
+
+  int get pageViewCurrentIndex => pageViewController != null &&
+          pageViewController!.hasClients &&
+          pageViewController!.page != null
+      ? pageViewController!.page!.round()
+      : 0;
+
+  /// Initialization and disposal methods.
+
+  @override
+  void initState(BuildContext context) {
+    customAppbarModel = createModel(context, () => CustomAppbarModel());
+  }
+
+  @override
+  void dispose() {
+    unfocusNode.dispose();
+    customAppbarModel.dispose();
+  }
+
+  /// Action blocks are added here.
+
+  /// Additional helper methods are added here.
+}
Index: lib/pages/profile/edit_preferences/edit_preferences_widget.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/profile/edit_preferences/edit_preferences_widget.dart b/lib/pages/profile/edit_preferences/edit_preferences_widget.dart
new file mode 100644
--- /dev/null	(date 1708365758392)
+++ b/lib/pages/profile/edit_preferences/edit_preferences_widget.dart	(date 1708365758392)
@@ -0,0 +1,411 @@
+import '/backend/backend.dart';
+import '/components/custom_appbar_widget.dart';
+import '/components/preference_item/preference_item_widget.dart';
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/flutter_flow_widgets.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter/scheduler.dart';
+import 'package:flutter/services.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+import 'edit_preferences_model.dart';
+export 'edit_preferences_model.dart';
+
+class EditPreferencesWidget extends StatefulWidget {
+  const EditPreferencesWidget({
+    super.key,
+    required this.page,
+  });
+
+  final int? page;
+
+  @override
+  State<EditPreferencesWidget> createState() => _EditPreferencesWidgetState();
+}
+
+class _EditPreferencesWidgetState extends State<EditPreferencesWidget> {
+  late EditPreferencesModel _model;
+
+  final scaffoldKey = GlobalKey<ScaffoldState>();
+
+  @override
+  void initState() {
+    super.initState();
+    _model = createModel(context, () => EditPreferencesModel());
+
+    logFirebaseEvent('screen_view',
+        parameters: {'screen_name': 'EditPreferences'});
+    // On page load action.
+    SchedulerBinding.instance.addPostFrameCallback((_) async {
+      logFirebaseEvent('EDIT_PREFERENCES_EditPreferences_ON_INIT');
+      logFirebaseEvent('EditPreferences_navigate_to');
+
+      context.pushNamed('Dashboard');
+    });
+
+    WidgetsBinding.instance.addPostFrameCallback((_) => setState(() {}));
+  }
+
+  @override
+  void dispose() {
+    _model.dispose();
+
+    super.dispose();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    if (isiOS) {
+      SystemChrome.setSystemUIOverlayStyle(
+        SystemUiOverlayStyle(
+          statusBarBrightness: Theme.of(context).brightness,
+          systemStatusBarContrastEnforced: true,
+        ),
+      );
+    }
+
+    context.watch<FFAppState>();
+
+    return StreamBuilder<List<OnboardingOptionsRecord>>(
+      stream: queryOnboardingOptionsRecord(
+        singleRecord: true,
+      ),
+      builder: (context, snapshot) {
+        // Customize what your widget looks like when it's loading.
+        if (!snapshot.hasData) {
+          return Scaffold(
+            backgroundColor: FlutterFlowTheme.of(context).primaryBackground,
+            body: Center(
+              child: SizedBox(
+                width: 50.0,
+                height: 50.0,
+                child: CircularProgressIndicator(
+                  valueColor: AlwaysStoppedAnimation<Color>(
+                    FlutterFlowTheme.of(context).primary,
+                  ),
+                ),
+              ),
+            ),
+          );
+        }
+        List<OnboardingOptionsRecord>
+            editPreferencesOnboardingOptionsRecordList = snapshot.data!;
+        // Return an empty Container when the item does not exist.
+        if (snapshot.data!.isEmpty) {
+          return Container();
+        }
+        final editPreferencesOnboardingOptionsRecord =
+            editPreferencesOnboardingOptionsRecordList.isNotEmpty
+                ? editPreferencesOnboardingOptionsRecordList.first
+                : null;
+        return GestureDetector(
+          onTap: () => _model.unfocusNode.canRequestFocus
+              ? FocusScope.of(context).requestFocus(_model.unfocusNode)
+              : FocusScope.of(context).unfocus(),
+          child: Scaffold(
+            key: scaffoldKey,
+            backgroundColor: FlutterFlowTheme.of(context).primaryBackground,
+            body: SafeArea(
+              top: true,
+              child: Column(
+                mainAxisSize: MainAxisSize.max,
+                children: [
+                  Expanded(
+                    child: Align(
+                      alignment: AlignmentDirectional(0.0, 0.0),
+                      child: Padding(
+                        padding: EdgeInsets.all(24.0),
+                        child: Column(
+                          mainAxisSize: MainAxisSize.max,
+                          mainAxisAlignment: MainAxisAlignment.start,
+                          crossAxisAlignment: CrossAxisAlignment.start,
+                          children: [
+                            wrapWithModel(
+                              model: _model.customAppbarModel,
+                              updateCallback: () => setState(() {}),
+                              child: CustomAppbarWidget(
+                                backButton: true,
+                                actionButton: false,
+                                optionsButton: false,
+                                actionButtonAction: () async {},
+                                optionsButtonAction: () async {},
+                              ),
+                            ),
+                            Expanded(
+                              child: Container(
+                                width: double.infinity,
+                                height: 500.0,
+                                child: PageView(
+                                  physics: const NeverScrollableScrollPhysics(),
+                                  controller: _model.pageViewController ??=
+                                      PageController(
+                                          initialPage: min(
+                                              valueOrDefault<int>(
+                                                widget.page,
+                                                0,
+                                              ),
+                                              2)),
+                                  scrollDirection: Axis.horizontal,
+                                  children: [
+                                    ClipRRect(
+                                      borderRadius: BorderRadius.only(
+                                        bottomLeft: Radius.circular(100.0),
+                                        bottomRight: Radius.circular(100.0),
+                                        topLeft: Radius.circular(100.0),
+                                        topRight: Radius.circular(100.0),
+                                      ),
+                                      child: Image.asset(
+                                        'assets/images/WhatsApp_Image_2024-02-19_at_8.44.11_PM.jpeg',
+                                        width: 351.0,
+                                        height: 123.0,
+                                        fit: BoxFit.fill,
+                                      ),
+                                    ),
+                                    Column(
+                                      mainAxisSize: MainAxisSize.max,
+                                      crossAxisAlignment:
+                                          CrossAxisAlignment.start,
+                                      children: [
+                                        Padding(
+                                          padding:
+                                              EdgeInsetsDirectional.fromSTEB(
+                                                  0.0, 24.0, 0.0, 0.0),
+                                          child: Text(
+                                            'Update allergies',
+                                            style: FlutterFlowTheme.of(context)
+                                                .displaySmall,
+                                          ),
+                                        ),
+                                        Padding(
+                                          padding:
+                                              EdgeInsetsDirectional.fromSTEB(
+                                                  0.0, 18.0, 0.0, 0.0),
+                                          child: Column(
+                                            mainAxisSize: MainAxisSize.min,
+                                            crossAxisAlignment:
+                                                CrossAxisAlignment.start,
+                                            children: [
+                                              Builder(
+                                                builder: (context) {
+                                                  final allergens =
+                                                      editPreferencesOnboardingOptionsRecord
+                                                              ?.allergenOptions
+                                                              ?.toList() ??
+                                                          [];
+                                                  return Wrap(
+                                                    spacing: 8.0,
+                                                    runSpacing: 8.0,
+                                                    alignment:
+                                                        WrapAlignment.start,
+                                                    crossAxisAlignment:
+                                                        WrapCrossAlignment
+                                                            .start,
+                                                    direction: Axis.horizontal,
+                                                    runAlignment:
+                                                        WrapAlignment.start,
+                                                    verticalDirection:
+                                                        VerticalDirection.down,
+                                                    clipBehavior: Clip.none,
+                                                    children: List.generate(
+                                                        allergens.length,
+                                                        (allergensIndex) {
+                                                      final allergensItem =
+                                                          allergens[
+                                                              allergensIndex];
+                                                      return PreferenceItemWidget(
+                                                        key: Key(
+                                                            'Key2pp_${allergensIndex}_of_${allergens.length}'),
+                                                        text: allergensItem,
+                                                        selectedItems: _model
+                                                            .allergenSelection,
+                                                        action: () async {
+                                                          logFirebaseEvent(
+                                                              'EDIT_PREFERENCES_Container_2pp5tbdq_CALL');
+                                                          if (_model
+                                                              .allergenSelection
+                                                              .contains(
+                                                                  allergensItem)) {
+                                                            logFirebaseEvent(
+                                                                'preferenceItem_haptic_feedback');
+                                                            HapticFeedback
+                                                                .selectionClick();
+                                                            logFirebaseEvent(
+                                                                'preferenceItem_update_page_state');
+                                                            setState(() {
+                                                              _model.removeFromAllergenSelection(
+                                                                  allergensItem);
+                                                            });
+                                                          } else {
+                                                            logFirebaseEvent(
+                                                                'preferenceItem_haptic_feedback');
+                                                            HapticFeedback
+                                                                .selectionClick();
+                                                            logFirebaseEvent(
+                                                                'preferenceItem_update_page_state');
+                                                            setState(() {
+                                                              _model.addToAllergenSelection(
+                                                                  allergensItem);
+                                                            });
+                                                          }
+                                                        },
+                                                      );
+                                                    }),
+                                                  );
+                                                },
+                                              ),
+                                            ],
+                                          ),
+                                        ),
+                                      ],
+                                    ),
+                                    Column(
+                                      mainAxisSize: MainAxisSize.max,
+                                      crossAxisAlignment:
+                                          CrossAxisAlignment.start,
+                                      children: [
+                                        Padding(
+                                          padding:
+                                              EdgeInsetsDirectional.fromSTEB(
+                                                  0.0, 24.0, 0.0, 0.0),
+                                          child: Text(
+                                            'Update dislikes',
+                                            style: FlutterFlowTheme.of(context)
+                                                .displaySmall,
+                                          ),
+                                        ),
+                                        Padding(
+                                          padding:
+                                              EdgeInsetsDirectional.fromSTEB(
+                                                  0.0, 18.0, 0.0, 0.0),
+                                          child: Column(
+                                            mainAxisSize: MainAxisSize.min,
+                                            crossAxisAlignment:
+                                                CrossAxisAlignment.start,
+                                            children: [
+                                              Builder(
+                                                builder: (context) {
+                                                  final dislikes =
+                                                      editPreferencesOnboardingOptionsRecord
+                                                              ?.ingredientOptions
+                                                              ?.toList() ??
+                                                          [];
+                                                  return Wrap(
+                                                    spacing: 8.0,
+                                                    runSpacing: 8.0,
+                                                    alignment:
+                                                        WrapAlignment.start,
+                                                    crossAxisAlignment:
+                                                        WrapCrossAlignment
+                                                            .start,
+                                                    direction: Axis.horizontal,
+                                                    runAlignment:
+                                                        WrapAlignment.start,
+                                                    verticalDirection:
+                                                        VerticalDirection.down,
+                                                    clipBehavior: Clip.none,
+                                                    children: List.generate(
+                                                        dislikes.length,
+                                                        (dislikesIndex) {
+                                                      final dislikesItem =
+                                                          dislikes[
+                                                              dislikesIndex];
+                                                      return PreferenceItemWidget(
+                                                        key: Key(
+                                                            'Keyarx_${dislikesIndex}_of_${dislikes.length}'),
+                                                        text: dislikesItem,
+                                                        selectedItems: _model
+                                                            .ingredientSelection,
+                                                        action: () async {
+                                                          logFirebaseEvent(
+                                                              'EDIT_PREFERENCES_Container_arxiy5m7_CALL');
+                                                          if (_model
+                                                              .ingredientSelection
+                                                              .contains(
+                                                                  dislikesItem)) {
+                                                            logFirebaseEvent(
+                                                                'preferenceItem_haptic_feedback');
+                                                            HapticFeedback
+                                                                .selectionClick();
+                                                            logFirebaseEvent(
+                                                                'preferenceItem_update_page_state');
+                                                            setState(() {
+                                                              _model.removeFromIngredientSelection(
+                                                                  dislikesItem);
+                                                            });
+                                                          } else {
+                                                            logFirebaseEvent(
+                                                                'preferenceItem_haptic_feedback');
+                                                            HapticFeedback
+                                                                .selectionClick();
+                                                            logFirebaseEvent(
+                                                                'preferenceItem_update_page_state');
+                                                            setState(() {
+                                                              _model.addToIngredientSelection(
+                                                                  dislikesItem);
+                                                            });
+                                                          }
+                                                        },
+                                                      );
+                                                    }),
+                                                  );
+                                                },
+                                              ),
+                                            ],
+                                          ),
+                                        ),
+                                      ],
+                                    ),
+                                  ],
+                                ),
+                              ),
+                            ),
+                          ],
+                        ),
+                      ),
+                    ),
+                  ),
+                  Padding(
+                    padding:
+                        EdgeInsetsDirectional.fromSTEB(24.0, 0.0, 24.0, 12.0),
+                    child: FFButtonWidget(
+                      onPressed: () async {
+                        logFirebaseEvent(
+                            'EDIT_PREFERENCES_PAGE_HELLO_BTN_ON_TAP');
+                        logFirebaseEvent('Button_haptic_feedback');
+                        HapticFeedback.lightImpact();
+                        logFirebaseEvent('Button_navigate_to');
+
+                        context.pushNamed('Dashboard');
+
+                        logFirebaseEvent('Button_navigate_back');
+                        context.pop();
+                      },
+                      text: 'Hello',
+                      options: FFButtonOptions(
+                        width: double.infinity,
+                        height: 50.0,
+                        padding:
+                            EdgeInsetsDirectional.fromSTEB(0.0, 0.0, 0.0, 0.0),
+                        iconPadding:
+                            EdgeInsetsDirectional.fromSTEB(0.0, 0.0, 0.0, 0.0),
+                        color: FlutterFlowTheme.of(context).primary,
+                        textStyle: FlutterFlowTheme.of(context).titleSmall,
+                        elevation: 0.0,
+                        borderSide: BorderSide(
+                          color: Colors.transparent,
+                          width: 1.0,
+                        ),
+                        borderRadius: BorderRadius.circular(25.0),
+                      ),
+                    ),
+                  ),
+                ],
+              ),
+            ),
+          ),
+        );
+      },
+    );
+  }
+}
Index: lib/pages/profile/personal_assistance/personal_assistance_widget.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/profile/personal_assistance/personal_assistance_widget.dart b/lib/pages/profile/personal_assistance/personal_assistance_widget.dart
new file mode 100644
--- /dev/null	(date 1708365758486)
+++ b/lib/pages/profile/personal_assistance/personal_assistance_widget.dart	(date 1708365758486)
@@ -0,0 +1,492 @@
+import '/flutter_flow/flutter_flow_drop_down.dart';
+import '/flutter_flow/flutter_flow_icon_button.dart';
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/flutter_flow_widgets.dart';
+import '/flutter_flow/form_field_controller.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+import 'personal_assistance_model.dart';
+export 'personal_assistance_model.dart';
+
+class PersonalAssistanceWidget extends StatefulWidget {
+  const PersonalAssistanceWidget({super.key});
+
+  @override
+  State<PersonalAssistanceWidget> createState() =>
+      _PersonalAssistanceWidgetState();
+}
+
+class _PersonalAssistanceWidgetState extends State<PersonalAssistanceWidget> {
+  late PersonalAssistanceModel _model;
+
+  final scaffoldKey = GlobalKey<ScaffoldState>();
+
+  @override
+  void initState() {
+    super.initState();
+    _model = createModel(context, () => PersonalAssistanceModel());
+
+    logFirebaseEvent('screen_view',
+        parameters: {'screen_name': 'PersonalAssistance'});
+    _model.fullNameController ??= TextEditingController();
+    _model.fullNameFocusNode ??= FocusNode();
+
+    WidgetsBinding.instance.addPostFrameCallback((_) => setState(() {}));
+  }
+
+  @override
+  void dispose() {
+    _model.dispose();
+
+    super.dispose();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    if (isiOS) {
+      SystemChrome.setSystemUIOverlayStyle(
+        SystemUiOverlayStyle(
+          statusBarBrightness: Theme.of(context).brightness,
+          systemStatusBarContrastEnforced: true,
+        ),
+      );
+    }
+
+    context.watch<FFAppState>();
+
+    return GestureDetector(
+      onTap: () => _model.unfocusNode.canRequestFocus
+          ? FocusScope.of(context).requestFocus(_model.unfocusNode)
+          : FocusScope.of(context).unfocus(),
+      child: Scaffold(
+        key: scaffoldKey,
+        backgroundColor: FlutterFlowTheme.of(context).primaryBackground,
+        appBar: PreferredSize(
+          preferredSize: Size.fromHeight(100.0),
+          child: AppBar(
+            backgroundColor: FlutterFlowTheme.of(context).primary,
+            automaticallyImplyLeading: false,
+            actions: [],
+            flexibleSpace: FlexibleSpaceBar(
+              title: Padding(
+                padding: EdgeInsetsDirectional.fromSTEB(0.0, 0.0, 0.0, 14.0),
+                child: Column(
+                  mainAxisSize: MainAxisSize.max,
+                  mainAxisAlignment: MainAxisAlignment.end,
+                  crossAxisAlignment: CrossAxisAlignment.start,
+                  children: [
+                    Padding(
+                      padding:
+                          EdgeInsetsDirectional.fromSTEB(0.0, 0.0, 0.0, 8.0),
+                      child: Row(
+                        mainAxisSize: MainAxisSize.max,
+                        children: [
+                          Padding(
+                            padding: EdgeInsetsDirectional.fromSTEB(
+                                12.0, 0.0, 0.0, 0.0),
+                            child: FlutterFlowIconButton(
+                              borderColor: Colors.transparent,
+                              borderRadius: 30.0,
+                              borderWidth: 1.0,
+                              buttonSize: 50.0,
+                              icon: Icon(
+                                Icons.arrow_back_rounded,
+                                color: Colors.white,
+                                size: 30.0,
+                              ),
+                              onPressed: () async {
+                                logFirebaseEvent(
+                                    'PERSONAL_ASSISTANCE_arrow_back_rounded_I');
+                                logFirebaseEvent('IconButton_navigate_back');
+                                context.pop();
+                              },
+                            ),
+                          ),
+                          Padding(
+                            padding: EdgeInsetsDirectional.fromSTEB(
+                                4.0, 0.0, 0.0, 0.0),
+                            child: Text(
+                              'Back',
+                              style: FlutterFlowTheme.of(context)
+                                  .headlineMedium
+                                  .override(
+                                    fontFamily: 'Outfit',
+                                    color: Colors.white,
+                                    fontSize: 16.0,
+                                  ),
+                            ),
+                          ),
+                        ],
+                      ),
+                    ),
+                    Padding(
+                      padding:
+                          EdgeInsetsDirectional.fromSTEB(24.0, 0.0, 0.0, 0.0),
+                      child: Text(
+                        'Personal Assistance',
+                        style: FlutterFlowTheme.of(context)
+                            .headlineMedium
+                            .override(
+                              fontFamily: 'Outfit',
+                              color: Colors.white,
+                              fontSize: 22.0,
+                            ),
+                      ),
+                    ),
+                  ],
+                ),
+              ),
+              centerTitle: true,
+              expandedTitleScale: 1.0,
+            ),
+            elevation: 2.0,
+          ),
+        ),
+        body: SafeArea(
+          top: true,
+          child: Container(
+            width: double.infinity,
+            height: double.infinity,
+            decoration: BoxDecoration(
+              color: Color(0xB20B191E),
+              image: DecorationImage(
+                fit: BoxFit.cover,
+                image: Image.asset(
+                  'assets/images/_a89c5b1e-79de-4a39-8bb7-db0d7e86a894.jpg',
+                ).image,
+              ),
+              shape: BoxShape.rectangle,
+            ),
+            child: Align(
+              alignment: AlignmentDirectional(0.0, 1.0),
+              child: SingleChildScrollView(
+                child: Column(
+                  mainAxisSize: MainAxisSize.max,
+                  mainAxisAlignment: MainAxisAlignment.end,
+                  children: [
+                    Align(
+                      alignment: AlignmentDirectional(1.0, 0.0),
+                      child: Padding(
+                        padding: EdgeInsetsDirectional.fromSTEB(
+                            0.0, 0.0, 12.0, 16.0),
+                        child: FlutterFlowIconButton(
+                          borderColor: Colors.transparent,
+                          borderRadius: 30.0,
+                          borderWidth: 1.0,
+                          buttonSize: 44.0,
+                          fillColor: Color(0xFFF1F4F8),
+                          icon: Icon(
+                            Icons.close_rounded,
+                            color: Color(0xFF57636C),
+                            size: 24.0,
+                          ),
+                          onPressed: () async {
+                            logFirebaseEvent(
+                                'PERSONAL_ASSISTANCE_close_rounded_ICN_ON');
+                            logFirebaseEvent('IconButton_bottom_sheet');
+                            Navigator.pop(context);
+                          },
+                        ),
+                      ),
+                    ),
+                    Material(
+                      color: Colors.transparent,
+                      elevation: 5.0,
+                      shape: RoundedRectangleBorder(
+                        borderRadius: BorderRadius.only(
+                          bottomLeft: Radius.circular(0.0),
+                          bottomRight: Radius.circular(0.0),
+                          topLeft: Radius.circular(16.0),
+                          topRight: Radius.circular(16.0),
+                        ),
+                      ),
+                      child: Container(
+                        width: double.infinity,
+                        decoration: BoxDecoration(
+                          color: Colors.white,
+                          borderRadius: BorderRadius.only(
+                            bottomLeft: Radius.circular(0.0),
+                            bottomRight: Radius.circular(0.0),
+                            topLeft: Radius.circular(16.0),
+                            topRight: Radius.circular(16.0),
+                          ),
+                        ),
+                        child: Column(
+                          mainAxisSize: MainAxisSize.max,
+                          crossAxisAlignment: CrossAxisAlignment.start,
+                          children: [
+                            Padding(
+                              padding: EdgeInsetsDirectional.fromSTEB(
+                                  0.0, 12.0, 0.0, 12.0),
+                              child: Row(
+                                mainAxisSize: MainAxisSize.max,
+                                mainAxisAlignment:
+                                    MainAxisAlignment.spaceBetween,
+                                children: [
+                                  Padding(
+                                    padding: EdgeInsetsDirectional.fromSTEB(
+                                        16.0, 0.0, 0.0, 0.0),
+                                    child: Text(
+                                      'Update Task',
+                                      style: FlutterFlowTheme.of(context)
+                                          .headlineSmall
+                                          .override(
+                                            fontFamily: 'Outfit',
+                                            color: Color(0xFF14181B),
+                                            fontSize: 24.0,
+                                            fontWeight: FontWeight.w500,
+                                          ),
+                                    ),
+                                  ),
+                                  Padding(
+                                    padding: EdgeInsetsDirectional.fromSTEB(
+                                        0.0, 0.0, 16.0, 0.0),
+                                    child: FlutterFlowDropDown<String>(
+                                      controller:
+                                          _model.dropDownValueController ??=
+                                              FormFieldController<String>(null),
+                                      options: [
+                                        'Incomplete',
+                                        'Complete',
+                                        'In Progress',
+                                        'Other'
+                                      ],
+                                      onChanged: (val) => setState(
+                                          () => _model.dropDownValue = val),
+                                      width: 120.0,
+                                      height: 40.0,
+                                      textStyle: FlutterFlowTheme.of(context)
+                                          .bodyMedium
+                                          .override(
+                                            fontFamily: 'Plus Jakarta Sans',
+                                            color: Color(0xFF14181B),
+                                            fontSize: 14.0,
+                                            fontWeight: FontWeight.w500,
+                                          ),
+                                      hintText: 'Update',
+                                      icon: Icon(
+                                        Icons.keyboard_arrow_down_rounded,
+                                        color: Color(0xFF57636C),
+                                        size: 15.0,
+                                      ),
+                                      fillColor: Colors.white,
+                                      elevation: 2.0,
+                                      borderColor: Color(0xFFE0E3E7),
+                                      borderWidth: 2.0,
+                                      borderRadius: 8.0,
+                                      margin: EdgeInsetsDirectional.fromSTEB(
+                                          12.0, 4.0, 12.0, 4.0),
+                                      hidesUnderline: true,
+                                      isSearchable: false,
+                                      isMultiSelect: false,
+                                    ),
+                                  ),
+                                ],
+                              ),
+                            ),
+                            Divider(
+                              height: 4.0,
+                              thickness: 1.0,
+                              color: Color(0xFFE0E3E7),
+                            ),
+                            Container(
+                              width: double.infinity,
+                              decoration: BoxDecoration(
+                                color: Colors.white,
+                              ),
+                              child: TextFormField(
+                                controller: _model.fullNameController,
+                                focusNode: _model.fullNameFocusNode,
+                                obscureText: false,
+                                decoration: InputDecoration(
+                                  labelStyle: FlutterFlowTheme.of(context)
+                                      .bodySmall
+                                      .override(
+                                        fontFamily: 'Plus Jakarta Sans',
+                                        color: Color(0xFF14181B),
+                                        fontSize: 12.0,
+                                        fontWeight: FontWeight.w500,
+                                      ),
+                                  hintText: 'Type here to respond...',
+                                  hintStyle: FlutterFlowTheme.of(context)
+                                      .bodyMedium
+                                      .override(
+                                        fontFamily: 'Lexend Deca',
+                                        color: Color(0xFF57636C),
+                                        fontSize: 14.0,
+                                        fontWeight: FontWeight.normal,
+                                      ),
+                                  enabledBorder: OutlineInputBorder(
+                                    borderSide: BorderSide(
+                                      color: Colors.white,
+                                      width: 1.0,
+                                    ),
+                                    borderRadius: BorderRadius.circular(4.0),
+                                  ),
+                                  focusedBorder: OutlineInputBorder(
+                                    borderSide: BorderSide(
+                                      color: Color(0x00000000),
+                                      width: 1.0,
+                                    ),
+                                    borderRadius: BorderRadius.circular(4.0),
+                                  ),
+                                  errorBorder: OutlineInputBorder(
+                                    borderSide: BorderSide(
+                                      color: Color(0x00000000),
+                                      width: 1.0,
+                                    ),
+                                    borderRadius: BorderRadius.circular(4.0),
+                                  ),
+                                  focusedErrorBorder: OutlineInputBorder(
+                                    borderSide: BorderSide(
+                                      color: Color(0x00000000),
+                                      width: 1.0,
+                                    ),
+                                    borderRadius: BorderRadius.circular(4.0),
+                                  ),
+                                  filled: true,
+                                  fillColor: Colors.white,
+                                  contentPadding:
+                                      EdgeInsetsDirectional.fromSTEB(
+                                          16.0, 24.0, 20.0, 24.0),
+                                ),
+                                style: FlutterFlowTheme.of(context)
+                                    .bodyMedium
+                                    .override(
+                                      fontFamily: 'Plus Jakarta Sans',
+                                      color: Color(0xFF14181B),
+                                      fontSize: 14.0,
+                                      fontWeight: FontWeight.w500,
+                                    ),
+                                maxLines: 10,
+                                minLines: 6,
+                                validator: _model.fullNameControllerValidator
+                                    .asValidator(context),
+                                inputFormatters: [
+                                  FilteringTextInputFormatter.allow(
+                                      RegExp('[a-zA-Z]'))
+                                ],
+                              ),
+                            ),
+                            Padding(
+                              padding: EdgeInsetsDirectional.fromSTEB(
+                                  16.0, 0.0, 16.0, 12.0),
+                              child: Row(
+                                mainAxisSize: MainAxisSize.max,
+                                children: [
+                                  ClipRRect(
+                                    borderRadius: BorderRadius.circular(12.0),
+                                    child: Image.network(
+                                      'https://picsum.photos/seed/64/600',
+                                      width: 70.0,
+                                      height: 50.0,
+                                      fit: BoxFit.cover,
+                                    ),
+                                  ),
+                                  Padding(
+                                    padding: EdgeInsetsDirectional.fromSTEB(
+                                        12.0, 0.0, 0.0, 0.0),
+                                    child: FlutterFlowIconButton(
+                                      borderColor: Colors.transparent,
+                                      borderRadius: 30.0,
+                                      borderWidth: 1.0,
+                                      buttonSize: 60.0,
+                                      icon: Icon(
+                                        Icons.delete_outline,
+                                        color: Color(0xFFFF5963),
+                                        size: 30.0,
+                                      ),
+                                      onPressed: () {
+                                        print('IconButton pressed ...');
+                                      },
+                                    ),
+                                  ),
+                                ],
+                              ),
+                            ),
+                            Divider(
+                              height: 4.0,
+                              thickness: 1.0,
+                              color: Color(0xFFE0E3E7),
+                            ),
+                            Padding(
+                              padding: EdgeInsetsDirectional.fromSTEB(
+                                  8.0, 4.0, 16.0, 44.0),
+                              child: Row(
+                                mainAxisSize: MainAxisSize.max,
+                                mainAxisAlignment:
+                                    MainAxisAlignment.spaceBetween,
+                                children: [
+                                  Padding(
+                                    padding: EdgeInsetsDirectional.fromSTEB(
+                                        8.0, 0.0, 0.0, 0.0),
+                                    child: FlutterFlowIconButton(
+                                      borderColor: Colors.transparent,
+                                      borderRadius: 8.0,
+                                      borderWidth: 1.0,
+                                      buttonSize: 44.0,
+                                      icon: Icon(
+                                        Icons.image_outlined,
+                                        color: Color(0xFF57636C),
+                                        size: 24.0,
+                                      ),
+                                      onPressed: () {
+                                        print('IconButton pressed ...');
+                                      },
+                                    ),
+                                  ),
+                                  Container(
+                                    width: 150.0,
+                                    height: 44.0,
+                                    decoration: BoxDecoration(
+                                      color: Colors.white,
+                                    ),
+                                    child: Row(
+                                      mainAxisSize: MainAxisSize.max,
+                                      mainAxisAlignment: MainAxisAlignment.end,
+                                      children: [
+                                        Padding(
+                                          padding:
+                                              EdgeInsetsDirectional.fromSTEB(
+                                                  0.0, 0.0, 12.0, 0.0),
+                                          child: Text(
+                                            'Prompt',
+                                            style: FlutterFlowTheme.of(context)
+                                                .bodyMedium
+                                                .override(
+                                                  fontFamily:
+                                                      'Plus Jakarta Sans',
+                                                  color: Color(0xFF39D2C0),
+                                                  fontSize: 14.0,
+                                                  fontWeight: FontWeight.w500,
+                                                ),
+                                          ),
+                                        ),
+                                        Icon(
+                                          Icons.send_rounded,
+                                          color: Color(0xFF39D2C0),
+                                          size: 28.0,
+                                        ),
+                                      ],
+                                    ),
+                                  ),
+                                ],
+                              ),
+                            ),
+                          ],
+                        ),
+                      ),
+                    ),
+                  ],
+                ),
+              ),
+            ),
+          ),
+        ),
+      ),
+    );
+  }
+}
Index: lib/pages/profile/personal_assistance/personal_assistance_model.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/profile/personal_assistance/personal_assistance_model.dart b/lib/pages/profile/personal_assistance/personal_assistance_model.dart
new file mode 100644
--- /dev/null	(date 1708365758455)
+++ b/lib/pages/profile/personal_assistance/personal_assistance_model.dart	(date 1708365758455)
@@ -0,0 +1,41 @@
+import '/flutter_flow/flutter_flow_drop_down.dart';
+import '/flutter_flow/flutter_flow_icon_button.dart';
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/flutter_flow_widgets.dart';
+import '/flutter_flow/form_field_controller.dart';
+import 'personal_assistance_widget.dart' show PersonalAssistanceWidget;
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+
+class PersonalAssistanceModel
+    extends FlutterFlowModel<PersonalAssistanceWidget> {
+  ///  State fields for stateful widgets in this page.
+
+  final unfocusNode = FocusNode();
+  // State field(s) for DropDown widget.
+  String? dropDownValue;
+  FormFieldController<String>? dropDownValueController;
+  // State field(s) for fullName widget.
+  FocusNode? fullNameFocusNode;
+  TextEditingController? fullNameController;
+  String? Function(BuildContext, String?)? fullNameControllerValidator;
+
+  /// Initialization and disposal methods.
+
+  @override
+  void initState(BuildContext context) {}
+
+  @override
+  void dispose() {
+    unfocusNode.dispose();
+    fullNameFocusNode?.dispose();
+    fullNameController?.dispose();
+  }
+
+  /// Action blocks are added here.
+
+  /// Additional helper methods are added here.
+}
Index: lib/pages/onboarding/splash/splash_model.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/onboarding/splash/splash_model.dart b/lib/pages/onboarding/splash/splash_model.dart
new file mode 100644
--- /dev/null	(date 1708365758895)
+++ b/lib/pages/onboarding/splash/splash_model.dart	(date 1708365758895)
@@ -0,0 +1,29 @@
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/flutter_flow_widgets.dart';
+import 'splash_widget.dart' show SplashWidget;
+import 'package:flutter/gestures.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+
+class SplashModel extends FlutterFlowModel<SplashWidget> {
+  ///  State fields for stateful widgets in this page.
+
+  final unfocusNode = FocusNode();
+
+  /// Initialization and disposal methods.
+
+  @override
+  void initState(BuildContext context) {}
+
+  @override
+  void dispose() {
+    unfocusNode.dispose();
+  }
+
+  /// Action blocks are added here.
+
+  /// Additional helper methods are added here.
+}
Index: lib/pages/onboarding/sign_in/sign_in_widget.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/onboarding/sign_in/sign_in_widget.dart b/lib/pages/onboarding/sign_in/sign_in_widget.dart
new file mode 100644
--- /dev/null	(date 1708365758863)
+++ b/lib/pages/onboarding/sign_in/sign_in_widget.dart	(date 1708365758863)
@@ -0,0 +1,470 @@
+import '/auth/firebase_auth/auth_util.dart';
+import '/components/custom_appbar_widget.dart';
+import '/flutter_flow/flutter_flow_animations.dart';
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/flutter_flow_widgets.dart';
+import 'dart:async';
+import 'package:flutter/material.dart';
+import 'package:flutter/scheduler.dart';
+import 'package:flutter/services.dart';
+import 'package:flutter_animate/flutter_animate.dart';
+import 'package:flutter_keyboard_visibility/flutter_keyboard_visibility.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+import 'sign_in_model.dart';
+export 'sign_in_model.dart';
+
+class SignInWidget extends StatefulWidget {
+  const SignInWidget({super.key});
+
+  @override
+  State<SignInWidget> createState() => _SignInWidgetState();
+}
+
+class _SignInWidgetState extends State<SignInWidget>
+    with TickerProviderStateMixin {
+  late SignInModel _model;
+
+  final scaffoldKey = GlobalKey<ScaffoldState>();
+  late StreamSubscription<bool> _keyboardVisibilitySubscription;
+  bool _isKeyboardVisible = false;
+
+  final animationsMap = {
+    'columnOnPageLoadAnimation': AnimationInfo(
+      trigger: AnimationTrigger.onPageLoad,
+      effects: [
+        FadeEffect(
+          curve: Curves.easeInOut,
+          delay: 0.ms,
+          duration: 970.ms,
+          begin: 0.0,
+          end: 1.0,
+        ),
+      ],
+    ),
+  };
+
+  @override
+  void initState() {
+    super.initState();
+    _model = createModel(context, () => SignInModel());
+
+    logFirebaseEvent('screen_view', parameters: {'screen_name': 'SignIn'});
+    if (!isWeb) {
+      _keyboardVisibilitySubscription =
+          KeyboardVisibilityController().onChange.listen((bool visible) {
+        setState(() {
+          _isKeyboardVisible = visible;
+        });
+      });
+    }
+
+    _model.emailAddressController ??= TextEditingController();
+    _model.emailAddressFocusNode ??= FocusNode();
+
+    _model.passwordController ??= TextEditingController();
+    _model.passwordFocusNode ??= FocusNode();
+
+    WidgetsBinding.instance.addPostFrameCallback((_) => setState(() {
+          _model.emailAddressController?.text = 'tsmith@email.com';
+          _model.passwordController?.text = 'password';
+        }));
+  }
+
+  @override
+  void dispose() {
+    _model.dispose();
+
+    if (!isWeb) {
+      _keyboardVisibilitySubscription.cancel();
+    }
+    super.dispose();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    if (isiOS) {
+      SystemChrome.setSystemUIOverlayStyle(
+        SystemUiOverlayStyle(
+          statusBarBrightness: Theme.of(context).brightness,
+          systemStatusBarContrastEnforced: true,
+        ),
+      );
+    }
+
+    context.watch<FFAppState>();
+
+    return GestureDetector(
+      onTap: () => _model.unfocusNode.canRequestFocus
+          ? FocusScope.of(context).requestFocus(_model.unfocusNode)
+          : FocusScope.of(context).unfocus(),
+      child: Scaffold(
+        key: scaffoldKey,
+        backgroundColor: FlutterFlowTheme.of(context).secondaryBackground,
+        body: SafeArea(
+          top: true,
+          child: Column(
+            mainAxisSize: MainAxisSize.max,
+            children: [
+              Flexible(
+                child: Padding(
+                  padding: EdgeInsets.all(24.0),
+                  child: Column(
+                    mainAxisSize: MainAxisSize.max,
+                    mainAxisAlignment: MainAxisAlignment.start,
+                    crossAxisAlignment: CrossAxisAlignment.start,
+                    children: [
+                      wrapWithModel(
+                        model: _model.customAppbarModel,
+                        updateCallback: () => setState(() {}),
+                        child: CustomAppbarWidget(
+                          backButton: true,
+                          actionButton: false,
+                          optionsButton: false,
+                          actionButtonAction: () async {},
+                          optionsButtonAction: () async {},
+                        ),
+                      ),
+                      Padding(
+                        padding:
+                            EdgeInsetsDirectional.fromSTEB(0.0, 24.0, 0.0, 0.0),
+                        child: Text(
+                          'Sign In',
+                          style: FlutterFlowTheme.of(context).displaySmall,
+                        ),
+                      ),
+                      Form(
+                        key: _model.formKey,
+                        autovalidateMode: AutovalidateMode.disabled,
+                        child: Column(
+                          mainAxisSize: MainAxisSize.max,
+                          children: [
+                            Padding(
+                              padding: EdgeInsetsDirectional.fromSTEB(
+                                  0.0, 18.0, 0.0, 0.0),
+                              child: Column(
+                                mainAxisSize: MainAxisSize.max,
+                                crossAxisAlignment: CrossAxisAlignment.start,
+                                children: [
+                                  Padding(
+                                    padding: EdgeInsetsDirectional.fromSTEB(
+                                        0.0, 0.0, 0.0, 4.0),
+                                    child: Text(
+                                      'Email',
+                                      style: FlutterFlowTheme.of(context)
+                                          .bodyMedium
+                                          .override(
+                                            fontFamily: 'Plus Jakarta Sans',
+                                            fontWeight: FontWeight.w600,
+                                          ),
+                                    ),
+                                  ),
+                                  TextFormField(
+                                    controller: _model.emailAddressController,
+                                    focusNode: _model.emailAddressFocusNode,
+                                    autofillHints: [AutofillHints.email],
+                                    textInputAction: TextInputAction.next,
+                                    obscureText: false,
+                                    decoration: InputDecoration(
+                                      enabledBorder: OutlineInputBorder(
+                                        borderSide: BorderSide(
+                                          color: Color(0x00000000),
+                                          width: 1.0,
+                                        ),
+                                        borderRadius:
+                                            BorderRadius.circular(8.0),
+                                      ),
+                                      focusedBorder: OutlineInputBorder(
+                                        borderSide: BorderSide(
+                                          color: Color(0x00000000),
+                                          width: 1.0,
+                                        ),
+                                        borderRadius:
+                                            BorderRadius.circular(8.0),
+                                      ),
+                                      errorBorder: OutlineInputBorder(
+                                        borderSide: BorderSide(
+                                          color: Color(0x00000000),
+                                          width: 1.0,
+                                        ),
+                                        borderRadius:
+                                            BorderRadius.circular(8.0),
+                                      ),
+                                      focusedErrorBorder: OutlineInputBorder(
+                                        borderSide: BorderSide(
+                                          color: Color(0x00000000),
+                                          width: 1.0,
+                                        ),
+                                        borderRadius:
+                                            BorderRadius.circular(8.0),
+                                      ),
+                                      filled: true,
+                                      fillColor: FlutterFlowTheme.of(context)
+                                          .secondaryBackground,
+                                    ),
+                                    style: FlutterFlowTheme.of(context)
+                                        .bodyMedium
+                                        .override(
+                                          fontFamily: 'Plus Jakarta Sans',
+                                          fontSize: 16.0,
+                                          fontWeight: FontWeight.w500,
+                                          lineHeight: 1.0,
+                                        ),
+                                    minLines: 1,
+                                    keyboardType: TextInputType.emailAddress,
+                                    cursorColor:
+                                        FlutterFlowTheme.of(context).primary,
+                                    validator: _model
+                                        .emailAddressControllerValidator
+                                        .asValidator(context),
+                                  ),
+                                ],
+                              ),
+                            ),
+                            Padding(
+                              padding: EdgeInsetsDirectional.fromSTEB(
+                                  0.0, 18.0, 0.0, 0.0),
+                              child: Column(
+                                mainAxisSize: MainAxisSize.max,
+                                crossAxisAlignment: CrossAxisAlignment.start,
+                                children: [
+                                  Padding(
+                                    padding: EdgeInsetsDirectional.fromSTEB(
+                                        0.0, 0.0, 0.0, 4.0),
+                                    child: Text(
+                                      'Password',
+                                      style: FlutterFlowTheme.of(context)
+                                          .bodyMedium
+                                          .override(
+                                            fontFamily: 'Plus Jakarta Sans',
+                                            fontWeight: FontWeight.w600,
+                                          ),
+                                    ),
+                                  ),
+                                  TextFormField(
+                                    controller: _model.passwordController,
+                                    focusNode: _model.passwordFocusNode,
+                                    autofillHints: [AutofillHints.password],
+                                    textInputAction: TextInputAction.done,
+                                    obscureText: !_model.passwordVisibility,
+                                    decoration: InputDecoration(
+                                      enabledBorder: OutlineInputBorder(
+                                        borderSide: BorderSide(
+                                          color: Color(0x00000000),
+                                          width: 1.0,
+                                        ),
+                                        borderRadius:
+                                            BorderRadius.circular(8.0),
+                                      ),
+                                      focusedBorder: OutlineInputBorder(
+                                        borderSide: BorderSide(
+                                          color: Color(0x00000000),
+                                          width: 1.0,
+                                        ),
+                                        borderRadius:
+                                            BorderRadius.circular(8.0),
+                                      ),
+                                      errorBorder: OutlineInputBorder(
+                                        borderSide: BorderSide(
+                                          color: Color(0x00000000),
+                                          width: 1.0,
+                                        ),
+                                        borderRadius:
+                                            BorderRadius.circular(8.0),
+                                      ),
+                                      focusedErrorBorder: OutlineInputBorder(
+                                        borderSide: BorderSide(
+                                          color: Color(0x00000000),
+                                          width: 1.0,
+                                        ),
+                                        borderRadius:
+                                            BorderRadius.circular(8.0),
+                                      ),
+                                      filled: true,
+                                      fillColor: FlutterFlowTheme.of(context)
+                                          .secondaryBackground,
+                                      suffixIcon: InkWell(
+                                        onTap: () => setState(
+                                          () => _model.passwordVisibility =
+                                              !_model.passwordVisibility,
+                                        ),
+                                        focusNode:
+                                            FocusNode(skipTraversal: true),
+                                        child: Icon(
+                                          _model.passwordVisibility
+                                              ? Icons.visibility_outlined
+                                              : Icons.visibility_off_outlined,
+                                          color: FlutterFlowTheme.of(context)
+                                              .secondaryText,
+                                          size: 18.0,
+                                        ),
+                                      ),
+                                    ),
+                                    style: FlutterFlowTheme.of(context)
+                                        .bodyMedium
+                                        .override(
+                                          fontFamily: 'Plus Jakarta Sans',
+                                          fontSize: 16.0,
+                                          fontWeight: FontWeight.w500,
+                                          lineHeight: 1.0,
+                                        ),
+                                    cursorColor:
+                                        FlutterFlowTheme.of(context).primary,
+                                    validator: _model
+                                        .passwordControllerValidator
+                                        .asValidator(context),
+                                  ),
+                                ],
+                              ),
+                            ),
+                          ],
+                        ),
+                      ),
+                      Padding(
+                        padding:
+                            EdgeInsetsDirectional.fromSTEB(0.0, 24.0, 0.0, 0.0),
+                        child: FFButtonWidget(
+                          onPressed: () async {
+                            logFirebaseEvent('SIGN_IN_PAGE_SIGN_IN_BTN_ON_TAP');
+                            logFirebaseEvent('Button_haptic_feedback');
+                            HapticFeedback.lightImpact();
+                            logFirebaseEvent('Button_auth');
+                            GoRouter.of(context).prepareAuthEvent();
+
+                            final user = await authManager.signInWithEmail(
+                              context,
+                              _model.emailAddressController.text,
+                              _model.passwordController.text,
+                            );
+                            if (user == null) {
+                              return;
+                            }
+
+                            context.goNamedAuth('Dashboard', context.mounted);
+                          },
+                          text: 'Sign In',
+                          options: FFButtonOptions(
+                            width: double.infinity,
+                            height: 50.0,
+                            padding: EdgeInsetsDirectional.fromSTEB(
+                                0.0, 0.0, 0.0, 0.0),
+                            iconPadding: EdgeInsetsDirectional.fromSTEB(
+                                0.0, 0.0, 0.0, 0.0),
+                            color: FlutterFlowTheme.of(context).primary,
+                            textStyle: FlutterFlowTheme.of(context).titleSmall,
+                            elevation: 0.0,
+                            borderSide: BorderSide(
+                              color: Colors.transparent,
+                              width: 1.0,
+                            ),
+                            borderRadius: BorderRadius.circular(25.0),
+                          ),
+                        ),
+                      ),
+                      Padding(
+                        padding:
+                            EdgeInsetsDirectional.fromSTEB(0.0, 12.0, 0.0, 0.0),
+                        child: InkWell(
+                          splashColor: Colors.transparent,
+                          focusColor: Colors.transparent,
+                          hoverColor: Colors.transparent,
+                          highlightColor: Colors.transparent,
+                          onTap: () async {
+                            logFirebaseEvent(
+                                'SIGN_IN_PAGE_Row_4ukbm94e_ON_TAP');
+                            logFirebaseEvent('Row_navigate_to');
+
+                            context.pushNamed('ForgotPassword');
+                          },
+                          child: Row(
+                            mainAxisSize: MainAxisSize.max,
+                            mainAxisAlignment: MainAxisAlignment.center,
+                            children: [
+                              Padding(
+                                padding: EdgeInsetsDirectional.fromSTEB(
+                                    0.0, 12.0, 0.0, 12.0),
+                                child: Text(
+                                  'I don\'t remember my password',
+                                  style: FlutterFlowTheme.of(context).bodySmall,
+                                ),
+                              ),
+                            ],
+                          ),
+                        ),
+                      ),
+                    ],
+                  ).animateOnPageLoad(
+                      animationsMap['columnOnPageLoadAnimation']!),
+                ),
+              ),
+              if (!(isWeb
+                  ? MediaQuery.viewInsetsOf(context).bottom > 0
+                  : _isKeyboardVisible))
+                Padding(
+                  padding:
+                      EdgeInsetsDirectional.fromSTEB(24.0, 0.0, 24.0, 48.0),
+                  child: Container(
+                    width: double.infinity,
+                    decoration: BoxDecoration(
+                      color: FlutterFlowTheme.of(context).secondaryBackground,
+                      borderRadius: BorderRadius.circular(8.0),
+                      border: Border.all(
+                        color: FlutterFlowTheme.of(context).alternate,
+                        width: 1.0,
+                      ),
+                    ),
+                    child: Padding(
+                      padding: EdgeInsetsDirectional.fromSTEB(
+                          24.0, 16.0, 24.0, 20.0),
+                      child: Column(
+                        mainAxisSize: MainAxisSize.min,
+                        crossAxisAlignment: CrossAxisAlignment.center,
+                        children: [
+                          Padding(
+                            padding: EdgeInsetsDirectional.fromSTEB(
+                                0.0, 0.0, 0.0, 12.0),
+                            child: Text(
+                              'Don\'t have an account yet?',
+                              style: FlutterFlowTheme.of(context).labelLarge,
+                            ),
+                          ),
+                          FFButtonWidget(
+                            onPressed: () async {
+                              logFirebaseEvent(
+                                  'SIGN_IN_PAGE_CREATE_ACCOUNT_BTN_ON_TAP');
+                              logFirebaseEvent('Button_navigate_to');
+
+                              context.pushNamed('Onboarding_CreateAccount');
+                            },
+                            text: 'Create Account',
+                            options: FFButtonOptions(
+                              width: double.infinity,
+                              height: 50.0,
+                              padding: EdgeInsetsDirectional.fromSTEB(
+                                  0.0, 0.0, 0.0, 0.0),
+                              iconPadding: EdgeInsetsDirectional.fromSTEB(
+                                  0.0, 0.0, 0.0, 0.0),
+                              color: FlutterFlowTheme.of(context).accent1,
+                              textStyle:
+                                  FlutterFlowTheme.of(context).bodyMedium,
+                              elevation: 0.0,
+                              borderSide: BorderSide(
+                                color: FlutterFlowTheme.of(context).primary,
+                                width: 2.0,
+                              ),
+                              borderRadius: BorderRadius.circular(25.0),
+                            ),
+                          ),
+                        ],
+                      ),
+                    ),
+                  ),
+                ),
+            ],
+          ),
+        ),
+      ),
+    );
+  }
+}
Index: lib/pages/onboarding/splash/splash_widget.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/onboarding/splash/splash_widget.dart b/lib/pages/onboarding/splash/splash_widget.dart
new file mode 100644
--- /dev/null	(date 1708365758911)
+++ b/lib/pages/onboarding/splash/splash_widget.dart	(date 1708365758911)
@@ -0,0 +1,216 @@
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/flutter_flow_widgets.dart';
+import 'package:flutter/gestures.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+import 'splash_model.dart';
+export 'splash_model.dart';
+
+class SplashWidget extends StatefulWidget {
+  const SplashWidget({super.key});
+
+  @override
+  State<SplashWidget> createState() => _SplashWidgetState();
+}
+
+class _SplashWidgetState extends State<SplashWidget> {
+  late SplashModel _model;
+
+  final scaffoldKey = GlobalKey<ScaffoldState>();
+
+  @override
+  void initState() {
+    super.initState();
+    _model = createModel(context, () => SplashModel());
+
+    logFirebaseEvent('screen_view', parameters: {'screen_name': 'Splash'});
+    WidgetsBinding.instance.addPostFrameCallback((_) => setState(() {}));
+  }
+
+  @override
+  void dispose() {
+    _model.dispose();
+
+    super.dispose();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    if (isiOS) {
+      SystemChrome.setSystemUIOverlayStyle(
+        SystemUiOverlayStyle(
+          statusBarBrightness: Theme.of(context).brightness,
+          systemStatusBarContrastEnforced: true,
+        ),
+      );
+    }
+
+    context.watch<FFAppState>();
+
+    return GestureDetector(
+      onTap: () => _model.unfocusNode.canRequestFocus
+          ? FocusScope.of(context).requestFocus(_model.unfocusNode)
+          : FocusScope.of(context).unfocus(),
+      child: Scaffold(
+        key: scaffoldKey,
+        backgroundColor: FlutterFlowTheme.of(context).primaryBackground,
+        body: SafeArea(
+          top: true,
+          child: Column(
+            mainAxisSize: MainAxisSize.max,
+            children: [
+              Expanded(
+                child: Align(
+                  alignment: AlignmentDirectional(0.0, 0.0),
+                  child: Column(
+                    mainAxisSize: MainAxisSize.max,
+                    mainAxisAlignment: MainAxisAlignment.center,
+                    children: [
+                      Container(
+                        width: 150.0,
+                        height: 150.0,
+                        decoration: BoxDecoration(
+                          color: FlutterFlowTheme.of(context).primaryBackground,
+                          image: DecorationImage(
+                            fit: BoxFit.cover,
+                            image: Image.asset(
+                              'assets/images/kheti.png',
+                            ).image,
+                          ),
+                          boxShadow: [
+                            BoxShadow(
+                              blurRadius: 4.0,
+                              color: Color(0x33000000),
+                              offset: Offset(0.0, 2.0),
+                            )
+                          ],
+                          borderRadius: BorderRadius.circular(32.0),
+                        ),
+                      ),
+                      Padding(
+                        padding:
+                            EdgeInsetsDirectional.fromSTEB(0.0, 24.0, 0.0, 0.0),
+                        child: RichText(
+                          textScaleFactor:
+                              MediaQuery.of(context).textScaleFactor,
+                          text: TextSpan(
+                            children: [
+                              TextSpan(
+                                text: 'KHETI',
+                                style:
+                                    FlutterFlowTheme.of(context).displaySmall,
+                              ),
+                              TextSpan(
+                                text: 'HARII',
+                                style: FlutterFlowTheme.of(context)
+                                    .displaySmall
+                                    .override(
+                                      fontFamily: 'Outfit',
+                                      color:
+                                          FlutterFlowTheme.of(context).primary,
+                                    ),
+                              )
+                            ],
+                            style: FlutterFlowTheme.of(context)
+                                .displaySmall
+                                .override(
+                                  fontFamily: 'Outfit',
+                                  fontSize: 32.0,
+                                ),
+                          ),
+                        ),
+                      ),
+                    ],
+                  ),
+                ),
+              ),
+              Padding(
+                padding: EdgeInsetsDirectional.fromSTEB(24.0, 0.0, 24.0, 12.0),
+                child: Column(
+                  mainAxisSize: MainAxisSize.max,
+                  children: [
+                    FFButtonWidget(
+                      onPressed: () async {
+                        logFirebaseEvent('SPLASH_PAGE_GET_STARTED_BTN_ON_TAP');
+                        logFirebaseEvent('Button_haptic_feedback');
+                        HapticFeedback.lightImpact();
+                        logFirebaseEvent('Button_navigate_to');
+
+                        context.pushNamed('Onboarding_Slideshow');
+                      },
+                      text: 'Get Started',
+                      options: FFButtonOptions(
+                        width: double.infinity,
+                        height: 50.0,
+                        padding:
+                            EdgeInsetsDirectional.fromSTEB(0.0, 0.0, 0.0, 0.0),
+                        iconPadding:
+                            EdgeInsetsDirectional.fromSTEB(0.0, 0.0, 0.0, 0.0),
+                        color: FlutterFlowTheme.of(context).primary,
+                        textStyle: FlutterFlowTheme.of(context).titleSmall,
+                        elevation: 0.0,
+                        borderSide: BorderSide(
+                          color: Colors.transparent,
+                          width: 1.0,
+                        ),
+                        borderRadius: BorderRadius.circular(25.0),
+                      ),
+                    ),
+                    InkWell(
+                      splashColor: Colors.transparent,
+                      focusColor: Colors.transparent,
+                      hoverColor: Colors.transparent,
+                      highlightColor: Colors.transparent,
+                      onTap: () async {
+                        logFirebaseEvent('SPLASH_PAGE_Column_9mc7ub12_ON_TAP');
+                        logFirebaseEvent('Column_navigate_to');
+
+                        context.pushNamed('SignIn');
+                      },
+                      child: Column(
+                        mainAxisSize: MainAxisSize.max,
+                        children: [
+                          Padding(
+                            padding: EdgeInsetsDirectional.fromSTEB(
+                                0.0, 24.0, 0.0, 24.0),
+                            child: RichText(
+                              textScaleFactor:
+                                  MediaQuery.of(context).textScaleFactor,
+                              text: TextSpan(
+                                children: [
+                                  TextSpan(
+                                    text: 'Already a member?  ',
+                                    style:
+                                        FlutterFlowTheme.of(context).bodySmall,
+                                  ),
+                                  TextSpan(
+                                    text: 'Sign In',
+                                    style: FlutterFlowTheme.of(context)
+                                        .bodyMedium
+                                        .override(
+                                          fontFamily: 'Plus Jakarta Sans',
+                                          fontWeight: FontWeight.w600,
+                                          decoration: TextDecoration.underline,
+                                        ),
+                                  )
+                                ],
+                                style: FlutterFlowTheme.of(context).bodyMedium,
+                              ),
+                            ),
+                          ),
+                        ],
+                      ),
+                    ),
+                  ],
+                ),
+              ),
+            ],
+          ),
+        ),
+      ),
+    );
+  }
+}
Index: lib/pages/onboarding/forgot_password/forgot_password_widget.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/onboarding/forgot_password/forgot_password_widget.dart b/lib/pages/onboarding/forgot_password/forgot_password_widget.dart
new file mode 100644
--- /dev/null	(date 1708365758722)
+++ b/lib/pages/onboarding/forgot_password/forgot_password_widget.dart	(date 1708365758722)
@@ -0,0 +1,269 @@
+import '/auth/firebase_auth/auth_util.dart';
+import '/components/custom_appbar_widget.dart';
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/flutter_flow_widgets.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+import 'forgot_password_model.dart';
+export 'forgot_password_model.dart';
+
+class ForgotPasswordWidget extends StatefulWidget {
+  const ForgotPasswordWidget({super.key});
+
+  @override
+  State<ForgotPasswordWidget> createState() => _ForgotPasswordWidgetState();
+}
+
+class _ForgotPasswordWidgetState extends State<ForgotPasswordWidget> {
+  late ForgotPasswordModel _model;
+
+  final scaffoldKey = GlobalKey<ScaffoldState>();
+
+  @override
+  void initState() {
+    super.initState();
+    _model = createModel(context, () => ForgotPasswordModel());
+
+    logFirebaseEvent('screen_view',
+        parameters: {'screen_name': 'ForgotPassword'});
+    _model.emailAddressController ??= TextEditingController();
+    _model.emailAddressFocusNode ??= FocusNode();
+
+    WidgetsBinding.instance.addPostFrameCallback((_) => setState(() {}));
+  }
+
+  @override
+  void dispose() {
+    _model.dispose();
+
+    super.dispose();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    if (isiOS) {
+      SystemChrome.setSystemUIOverlayStyle(
+        SystemUiOverlayStyle(
+          statusBarBrightness: Theme.of(context).brightness,
+          systemStatusBarContrastEnforced: true,
+        ),
+      );
+    }
+
+    context.watch<FFAppState>();
+
+    return GestureDetector(
+      onTap: () => _model.unfocusNode.canRequestFocus
+          ? FocusScope.of(context).requestFocus(_model.unfocusNode)
+          : FocusScope.of(context).unfocus(),
+      child: Scaffold(
+        key: scaffoldKey,
+        backgroundColor: FlutterFlowTheme.of(context).primaryBackground,
+        body: SafeArea(
+          top: true,
+          child: Column(
+            mainAxisSize: MainAxisSize.max,
+            children: [
+              Expanded(
+                child: Align(
+                  alignment: AlignmentDirectional(0.0, 0.0),
+                  child: Padding(
+                    padding: EdgeInsets.all(24.0),
+                    child: Column(
+                      mainAxisSize: MainAxisSize.max,
+                      mainAxisAlignment: MainAxisAlignment.start,
+                      crossAxisAlignment: CrossAxisAlignment.start,
+                      children: [
+                        wrapWithModel(
+                          model: _model.customAppbarModel,
+                          updateCallback: () => setState(() {}),
+                          child: CustomAppbarWidget(
+                            backButton: true,
+                            actionButton: false,
+                            actionButtonAction: () async {},
+                            optionsButtonAction: () async {},
+                          ),
+                        ),
+                        Padding(
+                          padding: EdgeInsetsDirectional.fromSTEB(
+                              0.0, 24.0, 0.0, 0.0),
+                          child: Text(
+                            'Forgot password',
+                            style: FlutterFlowTheme.of(context).displaySmall,
+                          ),
+                        ),
+                        Form(
+                          key: _model.formKey,
+                          autovalidateMode: AutovalidateMode.disabled,
+                          child: Column(
+                            mainAxisSize: MainAxisSize.max,
+                            children: [
+                              Padding(
+                                padding: EdgeInsetsDirectional.fromSTEB(
+                                    0.0, 8.0, 0.0, 0.0),
+                                child: Column(
+                                  mainAxisSize: MainAxisSize.max,
+                                  crossAxisAlignment: CrossAxisAlignment.start,
+                                  children: [
+                                    Text(
+                                      'We\'ll send you an email to reset your password.',
+                                      textAlign: TextAlign.start,
+                                      style: FlutterFlowTheme.of(context)
+                                          .labelLarge,
+                                    ),
+                                    Padding(
+                                      padding: EdgeInsetsDirectional.fromSTEB(
+                                          0.0, 15.0, 0.0, 0.0),
+                                      child: Text(
+                                        'Email',
+                                        textAlign: TextAlign.start,
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyLarge,
+                                      ),
+                                    ),
+                                    Padding(
+                                      padding: EdgeInsetsDirectional.fromSTEB(
+                                          0.0, 4.0, 0.0, 0.0),
+                                      child: TextFormField(
+                                        controller:
+                                            _model.emailAddressController,
+                                        focusNode: _model.emailAddressFocusNode,
+                                        autofillHints: [AutofillHints.name],
+                                        textCapitalization:
+                                            TextCapitalization.none,
+                                        textInputAction: TextInputAction.next,
+                                        obscureText: false,
+                                        decoration: InputDecoration(
+                                          enabledBorder: OutlineInputBorder(
+                                            borderSide: BorderSide(
+                                              color:
+                                                  FlutterFlowTheme.of(context)
+                                                      .alternate,
+                                              width: 1.0,
+                                            ),
+                                            borderRadius:
+                                                BorderRadius.circular(8.0),
+                                          ),
+                                          focusedBorder: OutlineInputBorder(
+                                            borderSide: BorderSide(
+                                              color:
+                                                  FlutterFlowTheme.of(context)
+                                                      .primary,
+                                              width: 1.0,
+                                            ),
+                                            borderRadius:
+                                                BorderRadius.circular(8.0),
+                                          ),
+                                          errorBorder: OutlineInputBorder(
+                                            borderSide: BorderSide(
+                                              color:
+                                                  FlutterFlowTheme.of(context)
+                                                      .error,
+                                              width: 1.0,
+                                            ),
+                                            borderRadius:
+                                                BorderRadius.circular(8.0),
+                                          ),
+                                          focusedErrorBorder:
+                                              OutlineInputBorder(
+                                            borderSide: BorderSide(
+                                              color:
+                                                  FlutterFlowTheme.of(context)
+                                                      .error,
+                                              width: 1.0,
+                                            ),
+                                            borderRadius:
+                                                BorderRadius.circular(8.0),
+                                          ),
+                                          filled: true,
+                                          fillColor:
+                                              FlutterFlowTheme.of(context)
+                                                  .secondaryBackground,
+                                        ),
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodyMedium
+                                            .override(
+                                              fontFamily: 'Plus Jakarta Sans',
+                                              fontSize: 16.0,
+                                              fontWeight: FontWeight.w500,
+                                              lineHeight: 1.0,
+                                            ),
+                                        minLines: 1,
+                                        keyboardType:
+                                            TextInputType.emailAddress,
+                                        cursorColor:
+                                            FlutterFlowTheme.of(context)
+                                                .primary,
+                                        validator: _model
+                                            .emailAddressControllerValidator
+                                            .asValidator(context),
+                                      ),
+                                    ),
+                                  ],
+                                ),
+                              ),
+                            ],
+                          ),
+                        ),
+                        Padding(
+                          padding: EdgeInsetsDirectional.fromSTEB(
+                              0.0, 24.0, 0.0, 0.0),
+                          child: FFButtonWidget(
+                            onPressed: () async {
+                              logFirebaseEvent(
+                                  'FORGOT_PASSWORD_RESET_PASSWORD_BTN_ON_TA');
+                              logFirebaseEvent('Button_haptic_feedback');
+                              HapticFeedback.lightImpact();
+                              logFirebaseEvent('Button_auth');
+                              if (_model.emailAddressController.text.isEmpty) {
+                                ScaffoldMessenger.of(context).showSnackBar(
+                                  SnackBar(
+                                    content: Text(
+                                      'Email required!',
+                                    ),
+                                  ),
+                                );
+                                return;
+                              }
+                              await authManager.resetPassword(
+                                email: _model.emailAddressController.text,
+                                context: context,
+                              );
+                              logFirebaseEvent('Button_navigate_back');
+                              context.pop();
+                            },
+                            text: 'Reset Password',
+                            options: FFButtonOptions(
+                              width: double.infinity,
+                              height: 50.0,
+                              padding: EdgeInsetsDirectional.fromSTEB(
+                                  0.0, 0.0, 0.0, 0.0),
+                              iconPadding: EdgeInsetsDirectional.fromSTEB(
+                                  0.0, 0.0, 0.0, 0.0),
+                              color: FlutterFlowTheme.of(context).primary,
+                              textStyle:
+                                  FlutterFlowTheme.of(context).titleSmall,
+                              elevation: 0.0,
+                              borderSide: BorderSide(
+                                color: Colors.transparent,
+                                width: 1.0,
+                              ),
+                              borderRadius: BorderRadius.circular(25.0),
+                            ),
+                          ),
+                        ),
+                      ],
+                    ),
+                  ),
+                ),
+              ),
+            ],
+          ),
+        ),
+      ),
+    );
+  }
+}
Index: lib/pages/onboarding/sign_in/sign_in_model.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/onboarding/sign_in/sign_in_model.dart b/lib/pages/onboarding/sign_in/sign_in_model.dart
new file mode 100644
--- /dev/null	(date 1708365758848)
+++ b/lib/pages/onboarding/sign_in/sign_in_model.dart	(date 1708365758848)
@@ -0,0 +1,76 @@
+import '/auth/firebase_auth/auth_util.dart';
+import '/components/custom_appbar_widget.dart';
+import '/flutter_flow/flutter_flow_animations.dart';
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/flutter_flow_widgets.dart';
+import 'dart:async';
+import 'sign_in_widget.dart' show SignInWidget;
+import 'package:flutter/material.dart';
+import 'package:flutter/scheduler.dart';
+import 'package:flutter/services.dart';
+import 'package:flutter_animate/flutter_animate.dart';
+import 'package:flutter_keyboard_visibility/flutter_keyboard_visibility.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+
+class SignInModel extends FlutterFlowModel<SignInWidget> {
+  ///  State fields for stateful widgets in this page.
+
+  final unfocusNode = FocusNode();
+  final formKey = GlobalKey<FormState>();
+  // Model for customAppbar component.
+  late CustomAppbarModel customAppbarModel;
+  // State field(s) for emailAddress widget.
+  FocusNode? emailAddressFocusNode;
+  TextEditingController? emailAddressController;
+  String? Function(BuildContext, String?)? emailAddressControllerValidator;
+  String? _emailAddressControllerValidator(BuildContext context, String? val) {
+    if (val == null || val.isEmpty) {
+      return 'Email is required.';
+    }
+
+    if (!RegExp(kTextValidatorEmailRegex).hasMatch(val)) {
+      return 'Has to be a valid email address.';
+    }
+    return null;
+  }
+
+  // State field(s) for password widget.
+  FocusNode? passwordFocusNode;
+  TextEditingController? passwordController;
+  late bool passwordVisibility;
+  String? Function(BuildContext, String?)? passwordControllerValidator;
+  String? _passwordControllerValidator(BuildContext context, String? val) {
+    if (val == null || val.isEmpty) {
+      return 'Passsword is required.';
+    }
+
+    return null;
+  }
+
+  /// Initialization and disposal methods.
+
+  @override
+  void initState(BuildContext context) {
+    customAppbarModel = createModel(context, () => CustomAppbarModel());
+    emailAddressControllerValidator = _emailAddressControllerValidator;
+    passwordVisibility = false;
+    passwordControllerValidator = _passwordControllerValidator;
+  }
+
+  @override
+  void dispose() {
+    unfocusNode.dispose();
+    customAppbarModel.dispose();
+    emailAddressFocusNode?.dispose();
+    emailAddressController?.dispose();
+
+    passwordFocusNode?.dispose();
+    passwordController?.dispose();
+  }
+
+  /// Action blocks are added here.
+
+  /// Additional helper methods are added here.
+}
Index: lib/pages/onboarding/onboarding_slideshow/onboarding_slideshow_widget.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/onboarding/onboarding_slideshow/onboarding_slideshow_widget.dart b/lib/pages/onboarding/onboarding_slideshow/onboarding_slideshow_widget.dart
new file mode 100644
--- /dev/null	(date 1708365758816)
+++ b/lib/pages/onboarding/onboarding_slideshow/onboarding_slideshow_widget.dart	(date 1708365758816)
@@ -0,0 +1,746 @@
+import '/components/custom_appbar_widget.dart';
+import '/flutter_flow/flutter_flow_animations.dart';
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/flutter_flow_widgets.dart';
+import 'package:smooth_page_indicator/smooth_page_indicator.dart'
+    as smooth_page_indicator;
+import 'package:flutter/material.dart';
+import 'package:flutter/scheduler.dart';
+import 'package:flutter/services.dart';
+import 'package:flutter_animate/flutter_animate.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+import 'package:simple_gradient_text/simple_gradient_text.dart';
+import 'onboarding_slideshow_model.dart';
+export 'onboarding_slideshow_model.dart';
+
+class OnboardingSlideshowWidget extends StatefulWidget {
+  const OnboardingSlideshowWidget({super.key});
+
+  @override
+  State<OnboardingSlideshowWidget> createState() =>
+      _OnboardingSlideshowWidgetState();
+}
+
+class _OnboardingSlideshowWidgetState extends State<OnboardingSlideshowWidget>
+    with TickerProviderStateMixin {
+  late OnboardingSlideshowModel _model;
+
+  final scaffoldKey = GlobalKey<ScaffoldState>();
+
+  final animationsMap = {
+    'textOnPageLoadAnimation1': AnimationInfo(
+      trigger: AnimationTrigger.onPageLoad,
+      effects: [
+        ScaleEffect(
+          curve: Curves.easeInOut,
+          delay: 0.ms,
+          duration: 600.ms,
+          begin: Offset(0.9, 0.9),
+          end: Offset(1.0, 1.0),
+        ),
+        FadeEffect(
+          curve: Curves.easeInOut,
+          delay: 0.ms,
+          duration: 600.ms,
+          begin: 0.0,
+          end: 1.0,
+        ),
+      ],
+    ),
+    'imageOnPageLoadAnimation1': AnimationInfo(
+      trigger: AnimationTrigger.onPageLoad,
+      effects: [
+        ScaleEffect(
+          curve: Curves.easeInOut,
+          delay: 0.ms,
+          duration: 600.ms,
+          begin: Offset(0.9, 0.9),
+          end: Offset(1.0, 1.0),
+        ),
+        FadeEffect(
+          curve: Curves.easeInOut,
+          delay: 0.ms,
+          duration: 600.ms,
+          begin: 0.0,
+          end: 1.0,
+        ),
+      ],
+    ),
+    'textOnPageLoadAnimation2': AnimationInfo(
+      trigger: AnimationTrigger.onPageLoad,
+      effects: [
+        VisibilityEffect(duration: 1.ms),
+        ScaleEffect(
+          curve: Curves.easeInOut,
+          delay: 0.ms,
+          duration: 600.ms,
+          begin: Offset(0.9, 0.9),
+          end: Offset(1.0, 1.0),
+        ),
+        FadeEffect(
+          curve: Curves.easeInOut,
+          delay: 0.ms,
+          duration: 600.ms,
+          begin: 0.0,
+          end: 1.0,
+        ),
+      ],
+    ),
+    'textOnPageLoadAnimation3': AnimationInfo(
+      trigger: AnimationTrigger.onPageLoad,
+      effects: [
+        ScaleEffect(
+          curve: Curves.easeInOut,
+          delay: 0.ms,
+          duration: 600.ms,
+          begin: Offset(0.9, 0.9),
+          end: Offset(1.0, 1.0),
+        ),
+        FadeEffect(
+          curve: Curves.easeInOut,
+          delay: 0.ms,
+          duration: 600.ms,
+          begin: 0.0,
+          end: 1.0,
+        ),
+      ],
+    ),
+    'imageOnPageLoadAnimation2': AnimationInfo(
+      trigger: AnimationTrigger.onPageLoad,
+      effects: [
+        ScaleEffect(
+          curve: Curves.easeInOut,
+          delay: 0.ms,
+          duration: 600.ms,
+          begin: Offset(0.9, 0.9),
+          end: Offset(1.0, 1.0),
+        ),
+        FadeEffect(
+          curve: Curves.easeInOut,
+          delay: 0.ms,
+          duration: 600.ms,
+          begin: 0.0,
+          end: 1.0,
+        ),
+      ],
+    ),
+    'textOnPageLoadAnimation4': AnimationInfo(
+      trigger: AnimationTrigger.onPageLoad,
+      effects: [
+        VisibilityEffect(duration: 1.ms),
+        ScaleEffect(
+          curve: Curves.easeInOut,
+          delay: 0.ms,
+          duration: 600.ms,
+          begin: Offset(0.9, 0.9),
+          end: Offset(1.0, 1.0),
+        ),
+        FadeEffect(
+          curve: Curves.easeInOut,
+          delay: 0.ms,
+          duration: 600.ms,
+          begin: 0.0,
+          end: 1.0,
+        ),
+      ],
+    ),
+    'textOnPageLoadAnimation5': AnimationInfo(
+      trigger: AnimationTrigger.onPageLoad,
+      effects: [
+        ScaleEffect(
+          curve: Curves.easeInOut,
+          delay: 0.ms,
+          duration: 600.ms,
+          begin: Offset(0.9, 0.9),
+          end: Offset(1.0, 1.0),
+        ),
+        FadeEffect(
+          curve: Curves.easeInOut,
+          delay: 0.ms,
+          duration: 600.ms,
+          begin: 0.0,
+          end: 1.0,
+        ),
+      ],
+    ),
+    'imageOnPageLoadAnimation3': AnimationInfo(
+      trigger: AnimationTrigger.onPageLoad,
+      effects: [
+        ScaleEffect(
+          curve: Curves.easeInOut,
+          delay: 0.ms,
+          duration: 600.ms,
+          begin: Offset(0.9, 0.9),
+          end: Offset(1.0, 1.0),
+        ),
+        FadeEffect(
+          curve: Curves.easeInOut,
+          delay: 0.ms,
+          duration: 600.ms,
+          begin: 0.0,
+          end: 1.0,
+        ),
+      ],
+    ),
+    'textOnPageLoadAnimation6': AnimationInfo(
+      trigger: AnimationTrigger.onPageLoad,
+      effects: [
+        VisibilityEffect(duration: 1.ms),
+        ScaleEffect(
+          curve: Curves.easeInOut,
+          delay: 0.ms,
+          duration: 600.ms,
+          begin: Offset(0.9, 0.9),
+          end: Offset(1.0, 1.0),
+        ),
+        FadeEffect(
+          curve: Curves.easeInOut,
+          delay: 0.ms,
+          duration: 600.ms,
+          begin: 0.0,
+          end: 1.0,
+        ),
+      ],
+    ),
+  };
+
+  @override
+  void initState() {
+    super.initState();
+    _model = createModel(context, () => OnboardingSlideshowModel());
+
+    logFirebaseEvent('screen_view',
+        parameters: {'screen_name': 'Onboarding_Slideshow'});
+    // On page load action.
+    SchedulerBinding.instance.addPostFrameCallback((_) async {
+      logFirebaseEvent('ONBOARDING_SLIDESHOW_Onboarding_Slidesho');
+      logFirebaseEvent('Onboarding_Slideshow_navigate_to');
+
+      context.pushNamed('Dashboard');
+    });
+
+    WidgetsBinding.instance.addPostFrameCallback((_) => setState(() {}));
+  }
+
+  @override
+  void dispose() {
+    _model.dispose();
+
+    super.dispose();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    if (isiOS) {
+      SystemChrome.setSystemUIOverlayStyle(
+        SystemUiOverlayStyle(
+          statusBarBrightness: Theme.of(context).brightness,
+          systemStatusBarContrastEnforced: true,
+        ),
+      );
+    }
+
+    context.watch<FFAppState>();
+
+    return GestureDetector(
+      onTap: () => _model.unfocusNode.canRequestFocus
+          ? FocusScope.of(context).requestFocus(_model.unfocusNode)
+          : FocusScope.of(context).unfocus(),
+      child: Scaffold(
+        key: scaffoldKey,
+        backgroundColor: FlutterFlowTheme.of(context).primaryBackground,
+        body: SafeArea(
+          top: true,
+          child: Column(
+            mainAxisSize: MainAxisSize.max,
+            children: [
+              Expanded(
+                child: Align(
+                  alignment: AlignmentDirectional(0.0, 0.0),
+                  child: Padding(
+                    padding: EdgeInsets.all(24.0),
+                    child: Column(
+                      mainAxisSize: MainAxisSize.max,
+                      mainAxisAlignment: MainAxisAlignment.center,
+                      children: [
+                        wrapWithModel(
+                          model: _model.customAppbarModel,
+                          updateCallback: () => setState(() {}),
+                          child: CustomAppbarWidget(
+                            backButton: true,
+                            actionButton: false,
+                            optionsButton: false,
+                            actionButtonAction: () async {},
+                            optionsButtonAction: () async {},
+                          ),
+                        ),
+                        Expanded(
+                          child: Container(
+                            width: double.infinity,
+                            height: 500.0,
+                            child: Stack(
+                              children: [
+                                Padding(
+                                  padding: EdgeInsetsDirectional.fromSTEB(
+                                      0.0, 0.0, 0.0, 50.0),
+                                  child: PageView(
+                                    controller: _model.pageViewController ??=
+                                        PageController(initialPage: 0),
+                                    scrollDirection: Axis.horizontal,
+                                    children: [
+                                      Column(
+                                        mainAxisSize: MainAxisSize.min,
+                                        mainAxisAlignment:
+                                            MainAxisAlignment.center,
+                                        children: [
+                                          Padding(
+                                            padding:
+                                                EdgeInsetsDirectional.fromSTEB(
+                                                    0.0, 0.0, 0.0, 32.0),
+                                            child: GradientText(
+                                              'BOOK FARMING\n   EQUIPMENT',
+                                              textAlign: TextAlign.center,
+                                              style:
+                                                  FlutterFlowTheme.of(context)
+                                                      .displaySmall
+                                                      .override(
+                                                        fontFamily: 'Outfit',
+                                                        fontStyle:
+                                                            FontStyle.italic,
+                                                      ),
+                                              colors: [
+                                                FlutterFlowTheme.of(context)
+                                                    .primary,
+                                                FlutterFlowTheme.of(context)
+                                                    .secondary
+                                              ],
+                                              gradientDirection:
+                                                  GradientDirection.ltr,
+                                              gradientType: GradientType.linear,
+                                            ).animateOnPageLoad(animationsMap[
+                                                'textOnPageLoadAnimation1']!),
+                                          ),
+                                          Padding(
+                                            padding:
+                                                EdgeInsetsDirectional.fromSTEB(
+                                                    24.0, 0.0, 24.0, 0.0),
+                                            child: Image.asset(
+                                              'assets/images/Screenshot_2024-02-09_150625.png',
+                                              height: 250.0,
+                                              fit: BoxFit.fill,
+                                            ).animateOnPageLoad(animationsMap[
+                                                'imageOnPageLoadAnimation1']!),
+                                          ),
+                                          Padding(
+                                            padding:
+                                                EdgeInsetsDirectional.fromSTEB(
+                                                    0.0, 48.0, 0.0, 0.0),
+                                            child: Text(
+                                              'Khetiharii Connect offers a streamlined solution for farmers to access farming equipment in their area. By leveraging location-based services and a user-friendly interface, farmers can quickly locate nearby providers offering equipment rentals',
+                                              textAlign: TextAlign.center,
+                                              style:
+                                                  FlutterFlowTheme.of(context)
+                                                      .labelLarge,
+                                            ).animateOnPageLoad(animationsMap[
+                                                'textOnPageLoadAnimation2']!),
+                                          ),
+                                        ],
+                                      ),
+                                      Column(
+                                        mainAxisSize: MainAxisSize.max,
+                                        mainAxisAlignment:
+                                            MainAxisAlignment.center,
+                                        children: [
+                                          Padding(
+                                            padding:
+                                                EdgeInsetsDirectional.fromSTEB(
+                                                    0.0, 0.0, 0.0, 32.0),
+                                            child: GradientText(
+                                              'VETERINARY CARE',
+                                              textAlign: TextAlign.center,
+                                              style:
+                                                  FlutterFlowTheme.of(context)
+                                                      .displaySmall,
+                                              colors: [
+                                                FlutterFlowTheme.of(context)
+                                                    .primary,
+                                                FlutterFlowTheme.of(context)
+                                                    .secondary
+                                              ],
+                                              gradientDirection:
+                                                  GradientDirection.ltr,
+                                              gradientType: GradientType.linear,
+                                            ).animateOnPageLoad(animationsMap[
+                                                'textOnPageLoadAnimation3']!),
+                                          ),
+                                          Padding(
+                                            padding:
+                                                EdgeInsetsDirectional.fromSTEB(
+                                                    24.0, 0.0, 24.0, 0.0),
+                                            child: Image.asset(
+                                              'assets/images/Screenshot_2024-02-09_150631.png',
+                                              height: 250.0,
+                                              fit: BoxFit.contain,
+                                            ).animateOnPageLoad(animationsMap[
+                                                'imageOnPageLoadAnimation2']!),
+                                          ),
+                                          Padding(
+                                            padding:
+                                                EdgeInsetsDirectional.fromSTEB(
+                                                    0.0, 48.0, 0.0, 0.0),
+                                            child: Text(
+                                              'The video call and phone consultation feature in the Khetiharii app revolutionizes access to veterinary care for farmers, offering convenience, transparency, and expert support right at their fingertips',
+                                              textAlign: TextAlign.center,
+                                              style:
+                                                  FlutterFlowTheme.of(context)
+                                                      .labelLarge,
+                                            ).animateOnPageLoad(animationsMap[
+                                                'textOnPageLoadAnimation4']!),
+                                          ),
+                                        ],
+                                      ),
+                                      Column(
+                                        mainAxisSize: MainAxisSize.max,
+                                        mainAxisAlignment:
+                                            MainAxisAlignment.center,
+                                        children: [
+                                          Padding(
+                                            padding:
+                                                EdgeInsetsDirectional.fromSTEB(
+                                                    0.0, 0.0, 0.0, 32.0),
+                                            child: GradientText(
+                                              'KHETIBOT AI',
+                                              textAlign: TextAlign.center,
+                                              style:
+                                                  FlutterFlowTheme.of(context)
+                                                      .displaySmall,
+                                              colors: [
+                                                FlutterFlowTheme.of(context)
+                                                    .primary,
+                                                FlutterFlowTheme.of(context)
+                                                    .secondary
+                                              ],
+                                              gradientDirection:
+                                                  GradientDirection.ltr,
+                                              gradientType: GradientType.linear,
+                                            ).animateOnPageLoad(animationsMap[
+                                                'textOnPageLoadAnimation5']!),
+                                          ),
+                                          ClipRRect(
+                                            borderRadius:
+                                                BorderRadius.circular(8.0),
+                                            child: Image.asset(
+                                              'assets/images/Screenshot_2024-02-09_150656.png',
+                                              width: 300.0,
+                                              height: 282.0,
+                                              fit: BoxFit.cover,
+                                            ),
+                                          ),
+                                          Text(
+                                            'Khetibot serves as a trusted companion for farmers, offering expert advice, guidance, and support in their preferred language',
+                                            style: FlutterFlowTheme.of(context)
+                                                .titleLarge,
+                                          ),
+                                          Padding(
+                                            padding:
+                                                EdgeInsetsDirectional.fromSTEB(
+                                                    24.0, 0.0, 24.0, 0.0),
+                                            child: Image.asset(
+                                              'assets/images/Customers_Enjoy_Food.png',
+                                              height: 250.0,
+                                              fit: BoxFit.contain,
+                                            ).animateOnPageLoad(animationsMap[
+                                                'imageOnPageLoadAnimation3']!),
+                                          ),
+                                          Padding(
+                                            padding:
+                                                EdgeInsetsDirectional.fromSTEB(
+                                                    0.0, 48.0, 0.0, 0.0),
+                                            child: Text(
+                                              'Savor chef-inspired meals without the hassle of cooking or cleaning up, with our gourmet meal delivery service.',
+                                              textAlign: TextAlign.center,
+                                              style:
+                                                  FlutterFlowTheme.of(context)
+                                                      .labelLarge,
+                                            ).animateOnPageLoad(animationsMap[
+                                                'textOnPageLoadAnimation6']!),
+                                          ),
+                                        ],
+                                      ),
+                                      Container(
+                                        width: 100.0,
+                                        height: 100.0,
+                                        decoration: BoxDecoration(
+                                          color: FlutterFlowTheme.of(context)
+                                              .secondaryBackground,
+                                        ),
+                                        child: Column(
+                                          mainAxisSize: MainAxisSize.max,
+                                          children: [
+                                            Padding(
+                                              padding: EdgeInsetsDirectional
+                                                  .fromSTEB(
+                                                      16.0, 50.0, 0.0, 0.0),
+                                              child: GradientText(
+                                                'Leaf Scanning',
+                                                style:
+                                                    FlutterFlowTheme.of(context)
+                                                        .bodyMedium
+                                                        .override(
+                                                          fontFamily:
+                                                              'Plus Jakarta Sans',
+                                                          fontSize: 35.0,
+                                                          fontWeight:
+                                                              FontWeight.w600,
+                                                        ),
+                                                colors: [
+                                                  FlutterFlowTheme.of(context)
+                                                      .primary,
+                                                  FlutterFlowTheme.of(context)
+                                                      .secondary
+                                                ],
+                                                gradientDirection:
+                                                    GradientDirection.ltr,
+                                                gradientType:
+                                                    GradientType.linear,
+                                              ),
+                                            ),
+                                            ClipRRect(
+                                              borderRadius:
+                                                  BorderRadius.circular(8.0),
+                                              child: Image.asset(
+                                                'assets/images/Screenshot_2024-02-09_150651.png',
+                                                width: 300.0,
+                                                height: 296.0,
+                                                fit: BoxFit.cover,
+                                              ),
+                                            ),
+                                            Text(
+                                              '​Khetiharii\'s leaf scanning feature revolutionizes plant health management for farmers, offering instant diagnosis, tailored recommendations, and access to a wealth of agricultural expertise',
+                                              style:
+                                                  FlutterFlowTheme.of(context)
+                                                      .titleLarge,
+                                            ),
+                                          ],
+                                        ),
+                                      ),
+                                      Container(
+                                        width: 100.0,
+                                        height: 100.0,
+                                        decoration: BoxDecoration(
+                                          color: FlutterFlowTheme.of(context)
+                                              .secondaryBackground,
+                                        ),
+                                        child: Column(
+                                          mainAxisSize: MainAxisSize.max,
+                                          children: [
+                                            Padding(
+                                              padding: EdgeInsetsDirectional
+                                                  .fromSTEB(
+                                                      20.0, 0.0, 0.0, 0.0),
+                                              child: GradientText(
+                                                'Sell Crop & Vegetable',
+                                                style:
+                                                    FlutterFlowTheme.of(context)
+                                                        .titleLarge
+                                                        .override(
+                                                          fontFamily: 'Outfit',
+                                                          fontSize: 28.0,
+                                                        ),
+                                                colors: [
+                                                  FlutterFlowTheme.of(context)
+                                                      .primary,
+                                                  FlutterFlowTheme.of(context)
+                                                      .secondary
+                                                ],
+                                                gradientDirection:
+                                                    GradientDirection.ltr,
+                                                gradientType:
+                                                    GradientType.linear,
+                                              ),
+                                            ),
+                                            ClipRRect(
+                                              borderRadius:
+                                                  BorderRadius.circular(8.0),
+                                              child: Image.asset(
+                                                'assets/images/Screenshot_2024-02-09_150638.png',
+                                                width: 300.0,
+                                                height: 293.0,
+                                                fit: BoxFit.cover,
+                                              ),
+                                            ),
+                                            Padding(
+                                              padding: EdgeInsetsDirectional
+                                                  .fromSTEB(
+                                                      0.0, 80.0, 0.0, 0.0),
+                                              child: Text(
+                                                'The price comparison feature in the Khetiharii app revolutionizes the selling process for farmers, offering convenience, transparency, and the opportunity to maximize profitability',
+                                                style:
+                                                    FlutterFlowTheme.of(context)
+                                                        .labelLarge
+                                                        .override(
+                                                          fontFamily: 'Outfit',
+                                                          fontSize: 20.0,
+                                                        ),
+                                              ),
+                                            ),
+                                          ],
+                                        ),
+                                      ),
+                                      Column(
+                                        mainAxisSize: MainAxisSize.max,
+                                        children: [
+                                          GradientText(
+                                            '​ Animal food & Fertilizer\n                     Shop',
+                                            style: FlutterFlowTheme.of(context)
+                                                .titleLarge
+                                                .override(
+                                                  fontFamily: 'Outfit',
+                                                  fontSize: 30.0,
+                                                ),
+                                            colors: [
+                                              FlutterFlowTheme.of(context)
+                                                  .primary,
+                                              FlutterFlowTheme.of(context)
+                                                  .secondary
+                                            ],
+                                            gradientDirection:
+                                                GradientDirection.ltr,
+                                            gradientType: GradientType.linear,
+                                          ),
+                                          ClipRRect(
+                                            borderRadius:
+                                                BorderRadius.circular(8.0),
+                                            child: Image.asset(
+                                              'assets/images/Screenshot_2024-02-09_150646.png',
+                                              width: 300.0,
+                                              height: 248.0,
+                                              fit: BoxFit.cover,
+                                            ),
+                                          ),
+                                          Padding(
+                                            padding:
+                                                EdgeInsetsDirectional.fromSTEB(
+                                                    0.0, 80.0, 0.0, 0.0),
+                                            child: Text(
+                                              '​Khetiharii feature connecting farmers with animal feed and fertilizer shops revolutionizes the procurement process, offering convenience, transparency, and cost savings',
+                                              style:
+                                                  FlutterFlowTheme.of(context)
+                                                      .labelLarge
+                                                      .override(
+                                                        fontFamily: 'Outfit',
+                                                        fontSize: 20.0,
+                                                      ),
+                                            ),
+                                          ),
+                                        ],
+                                      ),
+                                    ],
+                                  ),
+                                ),
+                                Align(
+                                  alignment: AlignmentDirectional(0.0, 1.0),
+                                  child: Padding(
+                                    padding: EdgeInsetsDirectional.fromSTEB(
+                                        0.0, 0.0, 0.0, 10.0),
+                                    child: smooth_page_indicator
+                                        .SmoothPageIndicator(
+                                      controller: _model.pageViewController ??=
+                                          PageController(initialPage: 0),
+                                      count: 6,
+                                      axisDirection: Axis.horizontal,
+                                      onDotClicked: (i) async {
+                                        await _model.pageViewController!
+                                            .animateToPage(
+                                          i,
+                                          duration: Duration(milliseconds: 500),
+                                          curve: Curves.ease,
+                                        );
+                                      },
+                                      effect: smooth_page_indicator
+                                          .ExpandingDotsEffect(
+                                        expansionFactor: 3.0,
+                                        spacing: 10.0,
+                                        radius: 10.0,
+                                        dotWidth: 10.0,
+                                        dotHeight: 10.0,
+                                        dotColor: FlutterFlowTheme.of(context)
+                                            .secondaryText,
+                                        activeDotColor:
+                                            FlutterFlowTheme.of(context)
+                                                .primaryText,
+                                        paintStyle: PaintingStyle.fill,
+                                      ),
+                                    ),
+                                  ),
+                                ),
+                              ],
+                            ),
+                          ),
+                        ),
+                      ],
+                    ),
+                  ),
+                ),
+              ),
+              Padding(
+                padding: EdgeInsetsDirectional.fromSTEB(0.0, 0.0, 0.0, 12.0),
+                child: Column(
+                  mainAxisSize: MainAxisSize.max,
+                  children: [
+                    Padding(
+                      padding:
+                          EdgeInsetsDirectional.fromSTEB(24.0, 0.0, 24.0, 0.0),
+                      child: FFButtonWidget(
+                        onPressed: () async {
+                          logFirebaseEvent(
+                              'ONBOARDING_SLIDESHOW_CONTINUE_BTN_ON_TAP');
+                          logFirebaseEvent('Button_navigate_to');
+
+                          context.pushNamed('SignIn');
+
+                          logFirebaseEvent('Button_navigate_to');
+
+                          context.pushNamed(
+                            'SignIn',
+                            extra: <String, dynamic>{
+                              kTransitionInfoKey: TransitionInfo(
+                                hasTransition: true,
+                                transitionType: PageTransitionType.fade,
+                                duration: Duration(milliseconds: 0),
+                              ),
+                            },
+                          );
+                        },
+                        text: 'Continue',
+                        options: FFButtonOptions(
+                          width: double.infinity,
+                          height: 50.0,
+                          padding: EdgeInsetsDirectional.fromSTEB(
+                              0.0, 0.0, 0.0, 0.0),
+                          iconPadding: EdgeInsetsDirectional.fromSTEB(
+                              0.0, 0.0, 0.0, 0.0),
+                          color: FlutterFlowTheme.of(context).primary,
+                          textStyle: FlutterFlowTheme.of(context).titleSmall,
+                          elevation: 0.0,
+                          borderSide: BorderSide(
+                            color: Colors.transparent,
+                            width: 1.0,
+                          ),
+                          borderRadius: BorderRadius.circular(25.0),
+                        ),
+                        showLoadingIndicator: false,
+                      ),
+                    ),
+                  ],
+                ),
+              ),
+            ],
+          ),
+        ),
+      ),
+    );
+  }
+}
Index: lib/pages/onboarding/forgot_password/forgot_password_model.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/onboarding/forgot_password/forgot_password_model.dart b/lib/pages/onboarding/forgot_password/forgot_password_model.dart
new file mode 100644
--- /dev/null	(date 1708365758707)
+++ b/lib/pages/onboarding/forgot_password/forgot_password_model.dart	(date 1708365758707)
@@ -0,0 +1,53 @@
+import '/auth/firebase_auth/auth_util.dart';
+import '/components/custom_appbar_widget.dart';
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/flutter_flow_widgets.dart';
+import 'forgot_password_widget.dart' show ForgotPasswordWidget;
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+
+class ForgotPasswordModel extends FlutterFlowModel<ForgotPasswordWidget> {
+  ///  State fields for stateful widgets in this page.
+
+  final unfocusNode = FocusNode();
+  final formKey = GlobalKey<FormState>();
+  // Model for customAppbar component.
+  late CustomAppbarModel customAppbarModel;
+  // State field(s) for emailAddress widget.
+  FocusNode? emailAddressFocusNode;
+  TextEditingController? emailAddressController;
+  String? Function(BuildContext, String?)? emailAddressControllerValidator;
+  String? _emailAddressControllerValidator(BuildContext context, String? val) {
+    if (val == null || val.isEmpty) {
+      return 'Email is required.';
+    }
+
+    if (!RegExp(kTextValidatorEmailRegex).hasMatch(val)) {
+      return 'Has to be a valid email address.';
+    }
+    return null;
+  }
+
+  /// Initialization and disposal methods.
+
+  @override
+  void initState(BuildContext context) {
+    customAppbarModel = createModel(context, () => CustomAppbarModel());
+    emailAddressControllerValidator = _emailAddressControllerValidator;
+  }
+
+  @override
+  void dispose() {
+    unfocusNode.dispose();
+    customAppbarModel.dispose();
+    emailAddressFocusNode?.dispose();
+    emailAddressController?.dispose();
+  }
+
+  /// Action blocks are added here.
+
+  /// Additional helper methods are added here.
+}
Index: lib/pages/onboarding/onboarding_create_account/onboarding_create_account_widget.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/onboarding/onboarding_create_account/onboarding_create_account_widget.dart b/lib/pages/onboarding/onboarding_create_account/onboarding_create_account_widget.dart
new file mode 100644
--- /dev/null	(date 1708365758769)
+++ b/lib/pages/onboarding/onboarding_create_account/onboarding_create_account_widget.dart	(date 1708365758769)
@@ -0,0 +1,500 @@
+import '/auth/firebase_auth/auth_util.dart';
+import '/backend/backend.dart';
+import '/components/custom_appbar_widget.dart';
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/flutter_flow_widgets.dart';
+import 'package:flutter/gestures.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+import 'onboarding_create_account_model.dart';
+export 'onboarding_create_account_model.dart';
+
+class OnboardingCreateAccountWidget extends StatefulWidget {
+  const OnboardingCreateAccountWidget({super.key});
+
+  @override
+  State<OnboardingCreateAccountWidget> createState() =>
+      _OnboardingCreateAccountWidgetState();
+}
+
+class _OnboardingCreateAccountWidgetState
+    extends State<OnboardingCreateAccountWidget> {
+  late OnboardingCreateAccountModel _model;
+
+  final scaffoldKey = GlobalKey<ScaffoldState>();
+
+  @override
+  void initState() {
+    super.initState();
+    _model = createModel(context, () => OnboardingCreateAccountModel());
+
+    logFirebaseEvent('screen_view',
+        parameters: {'screen_name': 'Onboarding_CreateAccount'});
+    _model.fullNameController ??= TextEditingController();
+    _model.fullNameFocusNode ??= FocusNode();
+
+    _model.emailAddressController ??= TextEditingController();
+    _model.emailAddressFocusNode ??= FocusNode();
+
+    _model.passwordController ??= TextEditingController();
+    _model.passwordFocusNode ??= FocusNode();
+
+    WidgetsBinding.instance.addPostFrameCallback((_) => setState(() {}));
+  }
+
+  @override
+  void dispose() {
+    _model.dispose();
+
+    super.dispose();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    if (isiOS) {
+      SystemChrome.setSystemUIOverlayStyle(
+        SystemUiOverlayStyle(
+          statusBarBrightness: Theme.of(context).brightness,
+          systemStatusBarContrastEnforced: true,
+        ),
+      );
+    }
+
+    context.watch<FFAppState>();
+
+    return GestureDetector(
+      onTap: () => _model.unfocusNode.canRequestFocus
+          ? FocusScope.of(context).requestFocus(_model.unfocusNode)
+          : FocusScope.of(context).unfocus(),
+      child: Scaffold(
+        key: scaffoldKey,
+        backgroundColor: FlutterFlowTheme.of(context).primaryBackground,
+        body: SafeArea(
+          top: true,
+          child: Align(
+            alignment: AlignmentDirectional(0.0, 0.0),
+            child: Padding(
+              padding: EdgeInsets.all(24.0),
+              child: Column(
+                mainAxisSize: MainAxisSize.max,
+                mainAxisAlignment: MainAxisAlignment.start,
+                crossAxisAlignment: CrossAxisAlignment.start,
+                children: [
+                  wrapWithModel(
+                    model: _model.customAppbarModel,
+                    updateCallback: () => setState(() {}),
+                    child: CustomAppbarWidget(
+                      backButton: true,
+                      actionButton: false,
+                      actionButtonAction: () async {},
+                      optionsButtonAction: () async {},
+                    ),
+                  ),
+                  Padding(
+                    padding:
+                        EdgeInsetsDirectional.fromSTEB(0.0, 24.0, 0.0, 0.0),
+                    child: Text(
+                      'Create an account',
+                      style: FlutterFlowTheme.of(context).displaySmall,
+                    ),
+                  ),
+                  Form(
+                    key: _model.formKey,
+                    autovalidateMode: AutovalidateMode.disabled,
+                    child: Column(
+                      mainAxisSize: MainAxisSize.max,
+                      children: [
+                        Padding(
+                          padding: EdgeInsetsDirectional.fromSTEB(
+                              0.0, 18.0, 0.0, 0.0),
+                          child: Column(
+                            mainAxisSize: MainAxisSize.max,
+                            crossAxisAlignment: CrossAxisAlignment.start,
+                            children: [
+                              Padding(
+                                padding: EdgeInsetsDirectional.fromSTEB(
+                                    0.0, 0.0, 0.0, 4.0),
+                                child: Text(
+                                  'Full Name',
+                                  style:
+                                      FlutterFlowTheme.of(context).bodyMedium,
+                                ),
+                              ),
+                              TextFormField(
+                                controller: _model.fullNameController,
+                                focusNode: _model.fullNameFocusNode,
+                                autofillHints: [AutofillHints.name],
+                                textCapitalization: TextCapitalization.words,
+                                textInputAction: TextInputAction.next,
+                                obscureText: false,
+                                decoration: InputDecoration(
+                                  enabledBorder: OutlineInputBorder(
+                                    borderSide: BorderSide(
+                                      color: FlutterFlowTheme.of(context)
+                                          .alternate,
+                                      width: 1.0,
+                                    ),
+                                    borderRadius: BorderRadius.circular(8.0),
+                                  ),
+                                  focusedBorder: OutlineInputBorder(
+                                    borderSide: BorderSide(
+                                      color:
+                                          FlutterFlowTheme.of(context).primary,
+                                      width: 1.0,
+                                    ),
+                                    borderRadius: BorderRadius.circular(8.0),
+                                  ),
+                                  errorBorder: OutlineInputBorder(
+                                    borderSide: BorderSide(
+                                      color: FlutterFlowTheme.of(context).error,
+                                      width: 1.0,
+                                    ),
+                                    borderRadius: BorderRadius.circular(8.0),
+                                  ),
+                                  focusedErrorBorder: OutlineInputBorder(
+                                    borderSide: BorderSide(
+                                      color: FlutterFlowTheme.of(context).error,
+                                      width: 1.0,
+                                    ),
+                                    borderRadius: BorderRadius.circular(8.0),
+                                  ),
+                                  filled: true,
+                                  fillColor: FlutterFlowTheme.of(context)
+                                      .secondaryBackground,
+                                ),
+                                style: FlutterFlowTheme.of(context)
+                                    .bodyMedium
+                                    .override(
+                                      fontFamily: 'Plus Jakarta Sans',
+                                      fontSize: 16.0,
+                                      fontWeight: FontWeight.w500,
+                                      lineHeight: 1.0,
+                                    ),
+                                minLines: 1,
+                                cursorColor:
+                                    FlutterFlowTheme.of(context).primary,
+                                validator: _model.fullNameControllerValidator
+                                    .asValidator(context),
+                              ),
+                            ],
+                          ),
+                        ),
+                        Padding(
+                          padding: EdgeInsetsDirectional.fromSTEB(
+                              0.0, 18.0, 0.0, 0.0),
+                          child: Column(
+                            mainAxisSize: MainAxisSize.max,
+                            crossAxisAlignment: CrossAxisAlignment.start,
+                            children: [
+                              Padding(
+                                padding: EdgeInsetsDirectional.fromSTEB(
+                                    0.0, 0.0, 0.0, 4.0),
+                                child: Text(
+                                  'Email',
+                                  style:
+                                      FlutterFlowTheme.of(context).bodyMedium,
+                                ),
+                              ),
+                              TextFormField(
+                                controller: _model.emailAddressController,
+                                focusNode: _model.emailAddressFocusNode,
+                                autofillHints: [AutofillHints.email],
+                                textInputAction: TextInputAction.next,
+                                obscureText: false,
+                                decoration: InputDecoration(
+                                  enabledBorder: OutlineInputBorder(
+                                    borderSide: BorderSide(
+                                      color: FlutterFlowTheme.of(context)
+                                          .alternate,
+                                      width: 1.0,
+                                    ),
+                                    borderRadius: BorderRadius.circular(8.0),
+                                  ),
+                                  focusedBorder: OutlineInputBorder(
+                                    borderSide: BorderSide(
+                                      color:
+                                          FlutterFlowTheme.of(context).primary,
+                                      width: 1.0,
+                                    ),
+                                    borderRadius: BorderRadius.circular(8.0),
+                                  ),
+                                  errorBorder: OutlineInputBorder(
+                                    borderSide: BorderSide(
+                                      color: FlutterFlowTheme.of(context).error,
+                                      width: 1.0,
+                                    ),
+                                    borderRadius: BorderRadius.circular(8.0),
+                                  ),
+                                  focusedErrorBorder: OutlineInputBorder(
+                                    borderSide: BorderSide(
+                                      color: FlutterFlowTheme.of(context).error,
+                                      width: 1.0,
+                                    ),
+                                    borderRadius: BorderRadius.circular(8.0),
+                                  ),
+                                  filled: true,
+                                  fillColor: FlutterFlowTheme.of(context)
+                                      .secondaryBackground,
+                                ),
+                                style: FlutterFlowTheme.of(context)
+                                    .bodyMedium
+                                    .override(
+                                      fontFamily: 'Plus Jakarta Sans',
+                                      fontSize: 16.0,
+                                      fontWeight: FontWeight.w500,
+                                      lineHeight: 1.0,
+                                    ),
+                                minLines: 1,
+                                keyboardType: TextInputType.emailAddress,
+                                cursorColor:
+                                    FlutterFlowTheme.of(context).primary,
+                                validator: _model
+                                    .emailAddressControllerValidator
+                                    .asValidator(context),
+                              ),
+                            ],
+                          ),
+                        ),
+                        Padding(
+                          padding: EdgeInsetsDirectional.fromSTEB(
+                              0.0, 18.0, 0.0, 0.0),
+                          child: Column(
+                            mainAxisSize: MainAxisSize.max,
+                            crossAxisAlignment: CrossAxisAlignment.start,
+                            children: [
+                              Padding(
+                                padding: EdgeInsetsDirectional.fromSTEB(
+                                    0.0, 0.0, 0.0, 4.0),
+                                child: Text(
+                                  'Password',
+                                  style:
+                                      FlutterFlowTheme.of(context).bodyMedium,
+                                ),
+                              ),
+                              TextFormField(
+                                controller: _model.passwordController,
+                                focusNode: _model.passwordFocusNode,
+                                autofillHints: [AutofillHints.newPassword],
+                                textInputAction: TextInputAction.done,
+                                obscureText: !_model.passwordVisibility,
+                                decoration: InputDecoration(
+                                  enabledBorder: OutlineInputBorder(
+                                    borderSide: BorderSide(
+                                      color: FlutterFlowTheme.of(context)
+                                          .alternate,
+                                      width: 1.0,
+                                    ),
+                                    borderRadius: BorderRadius.circular(8.0),
+                                  ),
+                                  focusedBorder: OutlineInputBorder(
+                                    borderSide: BorderSide(
+                                      color:
+                                          FlutterFlowTheme.of(context).primary,
+                                      width: 1.0,
+                                    ),
+                                    borderRadius: BorderRadius.circular(8.0),
+                                  ),
+                                  errorBorder: OutlineInputBorder(
+                                    borderSide: BorderSide(
+                                      color: FlutterFlowTheme.of(context).error,
+                                      width: 1.0,
+                                    ),
+                                    borderRadius: BorderRadius.circular(8.0),
+                                  ),
+                                  focusedErrorBorder: OutlineInputBorder(
+                                    borderSide: BorderSide(
+                                      color: FlutterFlowTheme.of(context).error,
+                                      width: 1.0,
+                                    ),
+                                    borderRadius: BorderRadius.circular(8.0),
+                                  ),
+                                  filled: true,
+                                  fillColor: FlutterFlowTheme.of(context)
+                                      .secondaryBackground,
+                                  suffixIcon: InkWell(
+                                    onTap: () => setState(
+                                      () => _model.passwordVisibility =
+                                          !_model.passwordVisibility,
+                                    ),
+                                    focusNode: FocusNode(skipTraversal: true),
+                                    child: Icon(
+                                      _model.passwordVisibility
+                                          ? Icons.visibility_outlined
+                                          : Icons.visibility_off_outlined,
+                                      color: FlutterFlowTheme.of(context)
+                                          .secondaryText,
+                                      size: 18.0,
+                                    ),
+                                  ),
+                                ),
+                                style: FlutterFlowTheme.of(context)
+                                    .bodyMedium
+                                    .override(
+                                      fontFamily: 'Plus Jakarta Sans',
+                                      fontSize: 16.0,
+                                      fontWeight: FontWeight.w500,
+                                      lineHeight: 1.0,
+                                    ),
+                                cursorColor:
+                                    FlutterFlowTheme.of(context).primary,
+                                validator: _model.passwordControllerValidator
+                                    .asValidator(context),
+                              ),
+                            ],
+                          ),
+                        ),
+                      ],
+                    ),
+                  ),
+                  Padding(
+                    padding:
+                        EdgeInsetsDirectional.fromSTEB(0.0, 24.0, 0.0, 0.0),
+                    child: FFButtonWidget(
+                      onPressed: () async {
+                        logFirebaseEvent(
+                            'ONBOARDING_CREATE_ACCOUNT_CREATE_ACCOUNT');
+                        logFirebaseEvent('Button_validate_form');
+                        if (_model.formKey.currentState == null ||
+                            !_model.formKey.currentState!.validate()) {
+                          return;
+                        }
+                        logFirebaseEvent('Button_haptic_feedback');
+                        HapticFeedback.lightImpact();
+                        logFirebaseEvent('Button_auth');
+                        GoRouter.of(context).prepareAuthEvent();
+
+                        final user = await authManager.createAccountWithEmail(
+                          context,
+                          _model.emailAddressController.text,
+                          _model.passwordController.text,
+                        );
+                        if (user == null) {
+                          return;
+                        }
+
+                        logFirebaseEvent('Button_navigate_to');
+
+                        context.goNamedAuth('Dashboard', context.mounted);
+                      },
+                      text: 'Create Account',
+                      options: FFButtonOptions(
+                        width: double.infinity,
+                        height: 50.0,
+                        padding:
+                            EdgeInsetsDirectional.fromSTEB(0.0, 0.0, 0.0, 0.0),
+                        iconPadding:
+                            EdgeInsetsDirectional.fromSTEB(0.0, 0.0, 0.0, 0.0),
+                        color: FlutterFlowTheme.of(context).primary,
+                        textStyle: FlutterFlowTheme.of(context).titleSmall,
+                        elevation: 0.0,
+                        borderSide: BorderSide(
+                          color: Colors.transparent,
+                          width: 1.0,
+                        ),
+                        borderRadius: BorderRadius.circular(25.0),
+                      ),
+                    ),
+                  ),
+                  Padding(
+                    padding:
+                        EdgeInsetsDirectional.fromSTEB(0.0, 12.0, 0.0, 0.0),
+                    child: Row(
+                      mainAxisSize: MainAxisSize.max,
+                      mainAxisAlignment: MainAxisAlignment.center,
+                      children: [
+                        Expanded(
+                          child: StreamBuilder<List<CompanyInformationRecord>>(
+                            stream: queryCompanyInformationRecord(
+                              singleRecord: true,
+                            ),
+                            builder: (context, snapshot) {
+                              // Customize what your widget looks like when it's loading.
+                              if (!snapshot.hasData) {
+                                return Center(
+                                  child: SizedBox(
+                                    width: 50.0,
+                                    height: 50.0,
+                                    child: CircularProgressIndicator(
+                                      valueColor: AlwaysStoppedAnimation<Color>(
+                                        FlutterFlowTheme.of(context).primary,
+                                      ),
+                                    ),
+                                  ),
+                                );
+                              }
+                              List<CompanyInformationRecord>
+                                  richTextCompanyInformationRecordList =
+                                  snapshot.data!;
+                              // Return an empty Container when the item does not exist.
+                              if (snapshot.data!.isEmpty) {
+                                return Container();
+                              }
+                              final richTextCompanyInformationRecord =
+                                  richTextCompanyInformationRecordList
+                                          .isNotEmpty
+                                      ? richTextCompanyInformationRecordList
+                                          .first
+                                      : null;
+                              return InkWell(
+                                splashColor: Colors.transparent,
+                                focusColor: Colors.transparent,
+                                hoverColor: Colors.transparent,
+                                highlightColor: Colors.transparent,
+                                onTap: () async {
+                                  logFirebaseEvent(
+                                      'ONBOARDING_CREATE_ACCOUNT_RichText_t8sm7');
+                                  logFirebaseEvent('RichText_launch_u_r_l');
+                                  await launchURL(
+                                      richTextCompanyInformationRecord!
+                                          .termsURL);
+                                },
+                                child: RichText(
+                                  textScaleFactor:
+                                      MediaQuery.of(context).textScaleFactor,
+                                  text: TextSpan(
+                                    children: [
+                                      TextSpan(
+                                        text:
+                                            'By clicking \"Create Account,\" you agree to MealPlanner\'s ',
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodySmall,
+                                      ),
+                                      TextSpan(
+                                        text: 'Terms of Use',
+                                        style: FlutterFlowTheme.of(context)
+                                            .bodySmall
+                                            .override(
+                                              fontFamily: 'Plus Jakarta Sans',
+                                              decoration:
+                                                  TextDecoration.underline,
+                                            ),
+                                      ),
+                                      TextSpan(
+                                        text: '.',
+                                        style: TextStyle(),
+                                      )
+                                    ],
+                                    style:
+                                        FlutterFlowTheme.of(context).bodySmall,
+                                  ),
+                                  textAlign: TextAlign.center,
+                                ),
+                              );
+                            },
+                          ),
+                        ),
+                      ],
+                    ),
+                  ),
+                ],
+              ),
+            ),
+          ),
+        ),
+      ),
+    );
+  }
+}
Index: lib/pages/onboarding/onboarding_slideshow/onboarding_slideshow_model.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/onboarding/onboarding_slideshow/onboarding_slideshow_model.dart b/lib/pages/onboarding/onboarding_slideshow/onboarding_slideshow_model.dart
new file mode 100644
--- /dev/null	(date 1708365758785)
+++ b/lib/pages/onboarding/onboarding_slideshow/onboarding_slideshow_model.dart	(date 1708365758785)
@@ -0,0 +1,49 @@
+import '/components/custom_appbar_widget.dart';
+import '/flutter_flow/flutter_flow_animations.dart';
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/flutter_flow_widgets.dart';
+import 'onboarding_slideshow_widget.dart' show OnboardingSlideshowWidget;
+import 'package:smooth_page_indicator/smooth_page_indicator.dart'
+    as smooth_page_indicator;
+import 'package:flutter/material.dart';
+import 'package:flutter/scheduler.dart';
+import 'package:flutter/services.dart';
+import 'package:flutter_animate/flutter_animate.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+import 'package:simple_gradient_text/simple_gradient_text.dart';
+
+class OnboardingSlideshowModel
+    extends FlutterFlowModel<OnboardingSlideshowWidget> {
+  ///  State fields for stateful widgets in this page.
+
+  final unfocusNode = FocusNode();
+  // Model for customAppbar component.
+  late CustomAppbarModel customAppbarModel;
+  // State field(s) for PageView widget.
+  PageController? pageViewController;
+
+  int get pageViewCurrentIndex => pageViewController != null &&
+          pageViewController!.hasClients &&
+          pageViewController!.page != null
+      ? pageViewController!.page!.round()
+      : 0;
+
+  /// Initialization and disposal methods.
+
+  @override
+  void initState(BuildContext context) {
+    customAppbarModel = createModel(context, () => CustomAppbarModel());
+  }
+
+  @override
+  void dispose() {
+    unfocusNode.dispose();
+    customAppbarModel.dispose();
+  }
+
+  /// Action blocks are added here.
+
+  /// Additional helper methods are added here.
+}
Index: lib/pages/onboarding/onboarding_create_account/onboarding_create_account_model.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/pages/onboarding/onboarding_create_account/onboarding_create_account_model.dart b/lib/pages/onboarding/onboarding_create_account/onboarding_create_account_model.dart
new file mode 100644
--- /dev/null	(date 1708365758738)
+++ b/lib/pages/onboarding/onboarding_create_account/onboarding_create_account_model.dart	(date 1708365758738)
@@ -0,0 +1,91 @@
+import '/auth/firebase_auth/auth_util.dart';
+import '/backend/backend.dart';
+import '/components/custom_appbar_widget.dart';
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/flutter_flow_widgets.dart';
+import 'onboarding_create_account_widget.dart'
+    show OnboardingCreateAccountWidget;
+import 'package:flutter/gestures.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+
+class OnboardingCreateAccountModel
+    extends FlutterFlowModel<OnboardingCreateAccountWidget> {
+  ///  State fields for stateful widgets in this page.
+
+  final unfocusNode = FocusNode();
+  final formKey = GlobalKey<FormState>();
+  // Model for customAppbar component.
+  late CustomAppbarModel customAppbarModel;
+  // State field(s) for fullName widget.
+  FocusNode? fullNameFocusNode;
+  TextEditingController? fullNameController;
+  String? Function(BuildContext, String?)? fullNameControllerValidator;
+  String? _fullNameControllerValidator(BuildContext context, String? val) {
+    if (val == null || val.isEmpty) {
+      return 'Full name is required.';
+    }
+
+    return null;
+  }
+
+  // State field(s) for emailAddress widget.
+  FocusNode? emailAddressFocusNode;
+  TextEditingController? emailAddressController;
+  String? Function(BuildContext, String?)? emailAddressControllerValidator;
+  String? _emailAddressControllerValidator(BuildContext context, String? val) {
+    if (val == null || val.isEmpty) {
+      return 'Email is required.';
+    }
+
+    if (!RegExp(kTextValidatorEmailRegex).hasMatch(val)) {
+      return 'Has to be a valid email address.';
+    }
+    return null;
+  }
+
+  // State field(s) for password widget.
+  FocusNode? passwordFocusNode;
+  TextEditingController? passwordController;
+  late bool passwordVisibility;
+  String? Function(BuildContext, String?)? passwordControllerValidator;
+  String? _passwordControllerValidator(BuildContext context, String? val) {
+    if (val == null || val.isEmpty) {
+      return 'Password is required.';
+    }
+
+    return null;
+  }
+
+  /// Initialization and disposal methods.
+
+  @override
+  void initState(BuildContext context) {
+    customAppbarModel = createModel(context, () => CustomAppbarModel());
+    fullNameControllerValidator = _fullNameControllerValidator;
+    emailAddressControllerValidator = _emailAddressControllerValidator;
+    passwordVisibility = false;
+    passwordControllerValidator = _passwordControllerValidator;
+  }
+
+  @override
+  void dispose() {
+    unfocusNode.dispose();
+    customAppbarModel.dispose();
+    fullNameFocusNode?.dispose();
+    fullNameController?.dispose();
+
+    emailAddressFocusNode?.dispose();
+    emailAddressController?.dispose();
+
+    passwordFocusNode?.dispose();
+    passwordController?.dispose();
+  }
+
+  /// Action blocks are added here.
+
+  /// Additional helper methods are added here.
+}
Index: lib/backend/backend.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/backend/backend.dart b/lib/backend/backend.dart
new file mode 100644
--- /dev/null	(date 1708365757435)
+++ b/lib/backend/backend.dart	(date 1708365757435)
@@ -0,0 +1,416 @@
+import 'package:cloud_firestore/cloud_firestore.dart';
+import 'package:firebase_auth/firebase_auth.dart';
+import '../auth/firebase_auth/auth_util.dart';
+
+import '../flutter_flow/flutter_flow_util.dart';
+import 'schema/util/firestore_util.dart';
+
+import 'schema/users_record.dart';
+import 'schema/meals_record.dart';
+import 'schema/onboarding_options_record.dart';
+import 'schema/company_information_record.dart';
+import 'schema/feedback_record.dart';
+import 'schema/support_center_record.dart';
+import 'schema/category_page_record.dart';
+
+export 'dart:async' show StreamSubscription;
+export 'package:cloud_firestore/cloud_firestore.dart';
+export 'schema/index.dart';
+export 'schema/util/firestore_util.dart';
+export 'schema/util/schema_util.dart';
+
+export 'schema/users_record.dart';
+export 'schema/meals_record.dart';
+export 'schema/onboarding_options_record.dart';
+export 'schema/company_information_record.dart';
+export 'schema/feedback_record.dart';
+export 'schema/support_center_record.dart';
+export 'schema/category_page_record.dart';
+
+/// Functions to query UsersRecords (as a Stream and as a Future).
+Future<int> queryUsersRecordCount({
+  Query Function(Query)? queryBuilder,
+  int limit = -1,
+}) =>
+    queryCollectionCount(
+      UsersRecord.collection,
+      queryBuilder: queryBuilder,
+      limit: limit,
+    );
+
+Stream<List<UsersRecord>> queryUsersRecord({
+  Query Function(Query)? queryBuilder,
+  int limit = -1,
+  bool singleRecord = false,
+}) =>
+    queryCollection(
+      UsersRecord.collection,
+      UsersRecord.fromSnapshot,
+      queryBuilder: queryBuilder,
+      limit: limit,
+      singleRecord: singleRecord,
+    );
+
+Future<List<UsersRecord>> queryUsersRecordOnce({
+  Query Function(Query)? queryBuilder,
+  int limit = -1,
+  bool singleRecord = false,
+}) =>
+    queryCollectionOnce(
+      UsersRecord.collection,
+      UsersRecord.fromSnapshot,
+      queryBuilder: queryBuilder,
+      limit: limit,
+      singleRecord: singleRecord,
+    );
+
+/// Functions to query MealsRecords (as a Stream and as a Future).
+Future<int> queryMealsRecordCount({
+  Query Function(Query)? queryBuilder,
+  int limit = -1,
+}) =>
+    queryCollectionCount(
+      MealsRecord.collection,
+      queryBuilder: queryBuilder,
+      limit: limit,
+    );
+
+Stream<List<MealsRecord>> queryMealsRecord({
+  Query Function(Query)? queryBuilder,
+  int limit = -1,
+  bool singleRecord = false,
+}) =>
+    queryCollection(
+      MealsRecord.collection,
+      MealsRecord.fromSnapshot,
+      queryBuilder: queryBuilder,
+      limit: limit,
+      singleRecord: singleRecord,
+    );
+
+Future<List<MealsRecord>> queryMealsRecordOnce({
+  Query Function(Query)? queryBuilder,
+  int limit = -1,
+  bool singleRecord = false,
+}) =>
+    queryCollectionOnce(
+      MealsRecord.collection,
+      MealsRecord.fromSnapshot,
+      queryBuilder: queryBuilder,
+      limit: limit,
+      singleRecord: singleRecord,
+    );
+
+/// Functions to query OnboardingOptionsRecords (as a Stream and as a Future).
+Future<int> queryOnboardingOptionsRecordCount({
+  Query Function(Query)? queryBuilder,
+  int limit = -1,
+}) =>
+    queryCollectionCount(
+      OnboardingOptionsRecord.collection,
+      queryBuilder: queryBuilder,
+      limit: limit,
+    );
+
+Stream<List<OnboardingOptionsRecord>> queryOnboardingOptionsRecord({
+  Query Function(Query)? queryBuilder,
+  int limit = -1,
+  bool singleRecord = false,
+}) =>
+    queryCollection(
+      OnboardingOptionsRecord.collection,
+      OnboardingOptionsRecord.fromSnapshot,
+      queryBuilder: queryBuilder,
+      limit: limit,
+      singleRecord: singleRecord,
+    );
+
+Future<List<OnboardingOptionsRecord>> queryOnboardingOptionsRecordOnce({
+  Query Function(Query)? queryBuilder,
+  int limit = -1,
+  bool singleRecord = false,
+}) =>
+    queryCollectionOnce(
+      OnboardingOptionsRecord.collection,
+      OnboardingOptionsRecord.fromSnapshot,
+      queryBuilder: queryBuilder,
+      limit: limit,
+      singleRecord: singleRecord,
+    );
+
+/// Functions to query CompanyInformationRecords (as a Stream and as a Future).
+Future<int> queryCompanyInformationRecordCount({
+  Query Function(Query)? queryBuilder,
+  int limit = -1,
+}) =>
+    queryCollectionCount(
+      CompanyInformationRecord.collection,
+      queryBuilder: queryBuilder,
+      limit: limit,
+    );
+
+Stream<List<CompanyInformationRecord>> queryCompanyInformationRecord({
+  Query Function(Query)? queryBuilder,
+  int limit = -1,
+  bool singleRecord = false,
+}) =>
+    queryCollection(
+      CompanyInformationRecord.collection,
+      CompanyInformationRecord.fromSnapshot,
+      queryBuilder: queryBuilder,
+      limit: limit,
+      singleRecord: singleRecord,
+    );
+
+Future<List<CompanyInformationRecord>> queryCompanyInformationRecordOnce({
+  Query Function(Query)? queryBuilder,
+  int limit = -1,
+  bool singleRecord = false,
+}) =>
+    queryCollectionOnce(
+      CompanyInformationRecord.collection,
+      CompanyInformationRecord.fromSnapshot,
+      queryBuilder: queryBuilder,
+      limit: limit,
+      singleRecord: singleRecord,
+    );
+
+/// Functions to query FeedbackRecords (as a Stream and as a Future).
+Future<int> queryFeedbackRecordCount({
+  Query Function(Query)? queryBuilder,
+  int limit = -1,
+}) =>
+    queryCollectionCount(
+      FeedbackRecord.collection,
+      queryBuilder: queryBuilder,
+      limit: limit,
+    );
+
+Stream<List<FeedbackRecord>> queryFeedbackRecord({
+  Query Function(Query)? queryBuilder,
+  int limit = -1,
+  bool singleRecord = false,
+}) =>
+    queryCollection(
+      FeedbackRecord.collection,
+      FeedbackRecord.fromSnapshot,
+      queryBuilder: queryBuilder,
+      limit: limit,
+      singleRecord: singleRecord,
+    );
+
+Future<List<FeedbackRecord>> queryFeedbackRecordOnce({
+  Query Function(Query)? queryBuilder,
+  int limit = -1,
+  bool singleRecord = false,
+}) =>
+    queryCollectionOnce(
+      FeedbackRecord.collection,
+      FeedbackRecord.fromSnapshot,
+      queryBuilder: queryBuilder,
+      limit: limit,
+      singleRecord: singleRecord,
+    );
+
+/// Functions to query SupportCenterRecords (as a Stream and as a Future).
+Future<int> querySupportCenterRecordCount({
+  Query Function(Query)? queryBuilder,
+  int limit = -1,
+}) =>
+    queryCollectionCount(
+      SupportCenterRecord.collection,
+      queryBuilder: queryBuilder,
+      limit: limit,
+    );
+
+Stream<List<SupportCenterRecord>> querySupportCenterRecord({
+  Query Function(Query)? queryBuilder,
+  int limit = -1,
+  bool singleRecord = false,
+}) =>
+    queryCollection(
+      SupportCenterRecord.collection,
+      SupportCenterRecord.fromSnapshot,
+      queryBuilder: queryBuilder,
+      limit: limit,
+      singleRecord: singleRecord,
+    );
+
+Future<List<SupportCenterRecord>> querySupportCenterRecordOnce({
+  Query Function(Query)? queryBuilder,
+  int limit = -1,
+  bool singleRecord = false,
+}) =>
+    queryCollectionOnce(
+      SupportCenterRecord.collection,
+      SupportCenterRecord.fromSnapshot,
+      queryBuilder: queryBuilder,
+      limit: limit,
+      singleRecord: singleRecord,
+    );
+
+/// Functions to query CategoryPageRecords (as a Stream and as a Future).
+Future<int> queryCategoryPageRecordCount({
+  DocumentReference? parent,
+  Query Function(Query)? queryBuilder,
+  int limit = -1,
+}) =>
+    queryCollectionCount(
+      CategoryPageRecord.collection(parent),
+      queryBuilder: queryBuilder,
+      limit: limit,
+    );
+
+Stream<List<CategoryPageRecord>> queryCategoryPageRecord({
+  DocumentReference? parent,
+  Query Function(Query)? queryBuilder,
+  int limit = -1,
+  bool singleRecord = false,
+}) =>
+    queryCollection(
+      CategoryPageRecord.collection(parent),
+      CategoryPageRecord.fromSnapshot,
+      queryBuilder: queryBuilder,
+      limit: limit,
+      singleRecord: singleRecord,
+    );
+
+Future<List<CategoryPageRecord>> queryCategoryPageRecordOnce({
+  DocumentReference? parent,
+  Query Function(Query)? queryBuilder,
+  int limit = -1,
+  bool singleRecord = false,
+}) =>
+    queryCollectionOnce(
+      CategoryPageRecord.collection(parent),
+      CategoryPageRecord.fromSnapshot,
+      queryBuilder: queryBuilder,
+      limit: limit,
+      singleRecord: singleRecord,
+    );
+
+Future<int> queryCollectionCount(
+  Query collection, {
+  Query Function(Query)? queryBuilder,
+  int limit = -1,
+}) {
+  final builder = queryBuilder ?? (q) => q;
+  var query = builder(collection);
+  if (limit > 0) {
+    query = query.limit(limit);
+  }
+
+  return query.count().get().catchError((err) {
+    print('Error querying $collection: $err');
+  }).then((value) => value.count);
+}
+
+Stream<List<T>> queryCollection<T>(
+  Query collection,
+  RecordBuilder<T> recordBuilder, {
+  Query Function(Query)? queryBuilder,
+  int limit = -1,
+  bool singleRecord = false,
+}) {
+  final builder = queryBuilder ?? (q) => q;
+  var query = builder(collection);
+  if (limit > 0 || singleRecord) {
+    query = query.limit(singleRecord ? 1 : limit);
+  }
+  return query.snapshots().handleError((err) {
+    print('Error querying $collection: $err');
+  }).map((s) => s.docs
+      .map(
+        (d) => safeGet(
+          () => recordBuilder(d),
+          (e) => print('Error serializing doc ${d.reference.path}:\n$e'),
+        ),
+      )
+      .where((d) => d != null)
+      .map((d) => d!)
+      .toList());
+}
+
+Future<List<T>> queryCollectionOnce<T>(
+  Query collection,
+  RecordBuilder<T> recordBuilder, {
+  Query Function(Query)? queryBuilder,
+  int limit = -1,
+  bool singleRecord = false,
+}) {
+  final builder = queryBuilder ?? (q) => q;
+  var query = builder(collection);
+  if (limit > 0 || singleRecord) {
+    query = query.limit(singleRecord ? 1 : limit);
+  }
+  return query.get().then((s) => s.docs
+      .map(
+        (d) => safeGet(
+          () => recordBuilder(d),
+          (e) => print('Error serializing doc ${d.reference.path}:\n$e'),
+        ),
+      )
+      .where((d) => d != null)
+      .map((d) => d!)
+      .toList());
+}
+
+extension QueryExtension on Query {
+  Query whereIn(String field, List? list) => (list?.isEmpty ?? true)
+      ? where(field, whereIn: null)
+      : where(field, whereIn: list);
+
+  Query whereNotIn(String field, List? list) => (list?.isEmpty ?? true)
+      ? where(field, whereNotIn: null)
+      : where(field, whereNotIn: list);
+
+  Query whereArrayContainsAny(String field, List? list) =>
+      (list?.isEmpty ?? true)
+          ? where(field, arrayContainsAny: null)
+          : where(field, arrayContainsAny: list);
+}
+
+class FFFirestorePage<T> {
+  final List<T> data;
+  final Stream<List<T>>? dataStream;
+  final QueryDocumentSnapshot? nextPageMarker;
+
+  FFFirestorePage(this.data, this.dataStream, this.nextPageMarker);
+}
+
+Future<FFFirestorePage<T>> queryCollectionPage<T>(
+  Query collection,
+  RecordBuilder<T> recordBuilder, {
+  Query Function(Query)? queryBuilder,
+  DocumentSnapshot? nextPageMarker,
+  required int pageSize,
+  required bool isStream,
+}) async {
+  final builder = queryBuilder ?? (q) => q;
+  var query = builder(collection).limit(pageSize);
+  if (nextPageMarker != null) {
+    query = query.startAfterDocument(nextPageMarker);
+  }
+  Stream<QuerySnapshot>? docSnapshotStream;
+  QuerySnapshot docSnapshot;
+  if (isStream) {
+    docSnapshotStream = query.snapshots();
+    docSnapshot = await docSnapshotStream.first;
+  } else {
+    docSnapshot = await query.get();
+  }
+  final getDocs = (QuerySnapshot s) => s.docs
+      .map(
+        (d) => safeGet(
+          () => recordBuilder(d),
+          (e) => print('Error serializing doc ${d.reference.path}:\n$e'),
+        ),
+      )
+      .where((d) => d != null)
+      .map((d) => d!)
+      .toList();
+  final data = getDocs(docSnapshot);
+  final dataStream = docSnapshotStream?.map(getDocs);
+  final nextPageToken = docSnapshot.docs.isEmpty ? null : docSnapshot.docs.last;
+  return FFFirestorePage(data, dataStream, nextPageToken);
+}
Index: lib/backend/schema/category_page_record.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/backend/schema/category_page_record.dart b/lib/backend/schema/category_page_record.dart
new file mode 100644
--- /dev/null	(date 1708365757505)
+++ b/lib/backend/schema/category_page_record.dart	(date 1708365757505)
@@ -0,0 +1,104 @@
+import 'dart:async';
+
+import 'package:collection/collection.dart';
+
+import '/backend/schema/util/firestore_util.dart';
+import '/backend/schema/util/schema_util.dart';
+
+import 'index.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+
+class CategoryPageRecord extends FirestoreRecord {
+  CategoryPageRecord._(
+    DocumentReference reference,
+    Map<String, dynamic> data,
+  ) : super(reference, data) {
+    _initializeFields();
+  }
+
+  // "category_name" field.
+  String? _categoryName;
+  String get categoryName => _categoryName ?? '';
+  bool hasCategoryName() => _categoryName != null;
+
+  // "Category_image" field.
+  List<String>? _categoryImage;
+  List<String> get categoryImage => _categoryImage ?? const [];
+  bool hasCategoryImage() => _categoryImage != null;
+
+  DocumentReference get parentReference => reference.parent.parent!;
+
+  void _initializeFields() {
+    _categoryName = snapshotData['category_name'] as String?;
+    _categoryImage = getDataList(snapshotData['Category_image']);
+  }
+
+  static Query<Map<String, dynamic>> collection([DocumentReference? parent]) =>
+      parent != null
+          ? parent.collection('categoryPage')
+          : FirebaseFirestore.instance.collectionGroup('categoryPage');
+
+  static DocumentReference createDoc(DocumentReference parent, {String? id}) =>
+      parent.collection('categoryPage').doc(id);
+
+  static Stream<CategoryPageRecord> getDocument(DocumentReference ref) =>
+      ref.snapshots().map((s) => CategoryPageRecord.fromSnapshot(s));
+
+  static Future<CategoryPageRecord> getDocumentOnce(DocumentReference ref) =>
+      ref.get().then((s) => CategoryPageRecord.fromSnapshot(s));
+
+  static CategoryPageRecord fromSnapshot(DocumentSnapshot snapshot) =>
+      CategoryPageRecord._(
+        snapshot.reference,
+        mapFromFirestore(snapshot.data() as Map<String, dynamic>),
+      );
+
+  static CategoryPageRecord getDocumentFromData(
+    Map<String, dynamic> data,
+    DocumentReference reference,
+  ) =>
+      CategoryPageRecord._(reference, mapFromFirestore(data));
+
+  @override
+  String toString() =>
+      'CategoryPageRecord(reference: ${reference.path}, data: $snapshotData)';
+
+  @override
+  int get hashCode => reference.path.hashCode;
+
+  @override
+  bool operator ==(other) =>
+      other is CategoryPageRecord &&
+      reference.path.hashCode == other.reference.path.hashCode;
+}
+
+Map<String, dynamic> createCategoryPageRecordData({
+  String? categoryName,
+}) {
+  final firestoreData = mapToFirestore(
+    <String, dynamic>{
+      'category_name': categoryName,
+    }.withoutNulls,
+  );
+
+  return firestoreData;
+}
+
+class CategoryPageRecordDocumentEquality
+    implements Equality<CategoryPageRecord> {
+  const CategoryPageRecordDocumentEquality();
+
+  @override
+  bool equals(CategoryPageRecord? e1, CategoryPageRecord? e2) {
+    const listEquality = ListEquality();
+    return e1?.categoryName == e2?.categoryName &&
+        listEquality.equals(e1?.categoryImage, e2?.categoryImage);
+  }
+
+  @override
+  int hash(CategoryPageRecord? e) =>
+      const ListEquality().hash([e?.categoryName, e?.categoryImage]);
+
+  @override
+  bool isValidKey(Object? o) => o is CategoryPageRecord;
+}
Index: lib/backend/schema/company_information_record.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/backend/schema/company_information_record.dart b/lib/backend/schema/company_information_record.dart
new file mode 100644
--- /dev/null	(date 1708365757560)
+++ b/lib/backend/schema/company_information_record.dart	(date 1708365757560)
@@ -0,0 +1,193 @@
+import 'dart:async';
+
+import 'package:collection/collection.dart';
+
+import '/backend/schema/util/firestore_util.dart';
+import '/backend/schema/util/schema_util.dart';
+
+import 'index.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+
+class CompanyInformationRecord extends FirestoreRecord {
+  CompanyInformationRecord._(
+    DocumentReference reference,
+    Map<String, dynamic> data,
+  ) : super(reference, data) {
+    _initializeFields();
+  }
+
+  // "name" field.
+  String? _name;
+  String get name => _name ?? '';
+  bool hasName() => _name != null;
+
+  // "logo" field.
+  String? _logo;
+  String get logo => _logo ?? '';
+  bool hasLogo() => _logo != null;
+
+  // "email" field.
+  String? _email;
+  String get email => _email ?? '';
+  bool hasEmail() => _email != null;
+
+  // "phone" field.
+  String? _phone;
+  String get phone => _phone ?? '';
+  bool hasPhone() => _phone != null;
+
+  // "address" field.
+  String? _address;
+  String get address => _address ?? '';
+  bool hasAddress() => _address != null;
+
+  // "appleStoreURL" field.
+  String? _appleStoreURL;
+  String get appleStoreURL => _appleStoreURL ?? '';
+  bool hasAppleStoreURL() => _appleStoreURL != null;
+
+  // "playStoreURL" field.
+  String? _playStoreURL;
+  String get playStoreURL => _playStoreURL ?? '';
+  bool hasPlayStoreURL() => _playStoreURL != null;
+
+  // "coverImage" field.
+  String? _coverImage;
+  String get coverImage => _coverImage ?? '';
+  bool hasCoverImage() => _coverImage != null;
+
+  // "company_bio" field.
+  String? _companyBio;
+  String get companyBio => _companyBio ?? '';
+  bool hasCompanyBio() => _companyBio != null;
+
+  // "chef_info" field.
+  List<ChefsStruct>? _chefInfo;
+  List<ChefsStruct> get chefInfo => _chefInfo ?? const [];
+  bool hasChefInfo() => _chefInfo != null;
+
+  // "termsURL" field.
+  String? _termsURL;
+  String get termsURL => _termsURL ?? '';
+  bool hasTermsURL() => _termsURL != null;
+
+  void _initializeFields() {
+    _name = snapshotData['name'] as String?;
+    _logo = snapshotData['logo'] as String?;
+    _email = snapshotData['email'] as String?;
+    _phone = snapshotData['phone'] as String?;
+    _address = snapshotData['address'] as String?;
+    _appleStoreURL = snapshotData['appleStoreURL'] as String?;
+    _playStoreURL = snapshotData['playStoreURL'] as String?;
+    _coverImage = snapshotData['coverImage'] as String?;
+    _companyBio = snapshotData['company_bio'] as String?;
+    _chefInfo = getStructList(
+      snapshotData['chef_info'],
+      ChefsStruct.fromMap,
+    );
+    _termsURL = snapshotData['termsURL'] as String?;
+  }
+
+  static CollectionReference get collection =>
+      FirebaseFirestore.instance.collection('company_information');
+
+  static Stream<CompanyInformationRecord> getDocument(DocumentReference ref) =>
+      ref.snapshots().map((s) => CompanyInformationRecord.fromSnapshot(s));
+
+  static Future<CompanyInformationRecord> getDocumentOnce(
+          DocumentReference ref) =>
+      ref.get().then((s) => CompanyInformationRecord.fromSnapshot(s));
+
+  static CompanyInformationRecord fromSnapshot(DocumentSnapshot snapshot) =>
+      CompanyInformationRecord._(
+        snapshot.reference,
+        mapFromFirestore(snapshot.data() as Map<String, dynamic>),
+      );
+
+  static CompanyInformationRecord getDocumentFromData(
+    Map<String, dynamic> data,
+    DocumentReference reference,
+  ) =>
+      CompanyInformationRecord._(reference, mapFromFirestore(data));
+
+  @override
+  String toString() =>
+      'CompanyInformationRecord(reference: ${reference.path}, data: $snapshotData)';
+
+  @override
+  int get hashCode => reference.path.hashCode;
+
+  @override
+  bool operator ==(other) =>
+      other is CompanyInformationRecord &&
+      reference.path.hashCode == other.reference.path.hashCode;
+}
+
+Map<String, dynamic> createCompanyInformationRecordData({
+  String? name,
+  String? logo,
+  String? email,
+  String? phone,
+  String? address,
+  String? appleStoreURL,
+  String? playStoreURL,
+  String? coverImage,
+  String? companyBio,
+  String? termsURL,
+}) {
+  final firestoreData = mapToFirestore(
+    <String, dynamic>{
+      'name': name,
+      'logo': logo,
+      'email': email,
+      'phone': phone,
+      'address': address,
+      'appleStoreURL': appleStoreURL,
+      'playStoreURL': playStoreURL,
+      'coverImage': coverImage,
+      'company_bio': companyBio,
+      'termsURL': termsURL,
+    }.withoutNulls,
+  );
+
+  return firestoreData;
+}
+
+class CompanyInformationRecordDocumentEquality
+    implements Equality<CompanyInformationRecord> {
+  const CompanyInformationRecordDocumentEquality();
+
+  @override
+  bool equals(CompanyInformationRecord? e1, CompanyInformationRecord? e2) {
+    const listEquality = ListEquality();
+    return e1?.name == e2?.name &&
+        e1?.logo == e2?.logo &&
+        e1?.email == e2?.email &&
+        e1?.phone == e2?.phone &&
+        e1?.address == e2?.address &&
+        e1?.appleStoreURL == e2?.appleStoreURL &&
+        e1?.playStoreURL == e2?.playStoreURL &&
+        e1?.coverImage == e2?.coverImage &&
+        e1?.companyBio == e2?.companyBio &&
+        listEquality.equals(e1?.chefInfo, e2?.chefInfo) &&
+        e1?.termsURL == e2?.termsURL;
+  }
+
+  @override
+  int hash(CompanyInformationRecord? e) => const ListEquality().hash([
+        e?.name,
+        e?.logo,
+        e?.email,
+        e?.phone,
+        e?.address,
+        e?.appleStoreURL,
+        e?.playStoreURL,
+        e?.coverImage,
+        e?.companyBio,
+        e?.chefInfo,
+        e?.termsURL
+      ]);
+
+  @override
+  bool isValidKey(Object? o) => o is CompanyInformationRecord;
+}
Index: lib/backend/schema/feedback_record.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/backend/schema/feedback_record.dart b/lib/backend/schema/feedback_record.dart
new file mode 100644
--- /dev/null	(date 1708365757545)
+++ b/lib/backend/schema/feedback_record.dart	(date 1708365757545)
@@ -0,0 +1,106 @@
+import 'dart:async';
+
+import 'package:collection/collection.dart';
+
+import '/backend/schema/util/firestore_util.dart';
+import '/backend/schema/util/schema_util.dart';
+
+import 'index.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+
+class FeedbackRecord extends FirestoreRecord {
+  FeedbackRecord._(
+    DocumentReference reference,
+    Map<String, dynamic> data,
+  ) : super(reference, data) {
+    _initializeFields();
+  }
+
+  // "meal_name" field.
+  String? _mealName;
+  String get mealName => _mealName ?? '';
+  bool hasMealName() => _mealName != null;
+
+  // "feedback" field.
+  String? _feedback;
+  String get feedback => _feedback ?? '';
+  bool hasFeedback() => _feedback != null;
+
+  // "time_created" field.
+  DateTime? _timeCreated;
+  DateTime? get timeCreated => _timeCreated;
+  bool hasTimeCreated() => _timeCreated != null;
+
+  void _initializeFields() {
+    _mealName = snapshotData['meal_name'] as String?;
+    _feedback = snapshotData['feedback'] as String?;
+    _timeCreated = snapshotData['time_created'] as DateTime?;
+  }
+
+  static CollectionReference get collection =>
+      FirebaseFirestore.instance.collection('feedback');
+
+  static Stream<FeedbackRecord> getDocument(DocumentReference ref) =>
+      ref.snapshots().map((s) => FeedbackRecord.fromSnapshot(s));
+
+  static Future<FeedbackRecord> getDocumentOnce(DocumentReference ref) =>
+      ref.get().then((s) => FeedbackRecord.fromSnapshot(s));
+
+  static FeedbackRecord fromSnapshot(DocumentSnapshot snapshot) =>
+      FeedbackRecord._(
+        snapshot.reference,
+        mapFromFirestore(snapshot.data() as Map<String, dynamic>),
+      );
+
+  static FeedbackRecord getDocumentFromData(
+    Map<String, dynamic> data,
+    DocumentReference reference,
+  ) =>
+      FeedbackRecord._(reference, mapFromFirestore(data));
+
+  @override
+  String toString() =>
+      'FeedbackRecord(reference: ${reference.path}, data: $snapshotData)';
+
+  @override
+  int get hashCode => reference.path.hashCode;
+
+  @override
+  bool operator ==(other) =>
+      other is FeedbackRecord &&
+      reference.path.hashCode == other.reference.path.hashCode;
+}
+
+Map<String, dynamic> createFeedbackRecordData({
+  String? mealName,
+  String? feedback,
+  DateTime? timeCreated,
+}) {
+  final firestoreData = mapToFirestore(
+    <String, dynamic>{
+      'meal_name': mealName,
+      'feedback': feedback,
+      'time_created': timeCreated,
+    }.withoutNulls,
+  );
+
+  return firestoreData;
+}
+
+class FeedbackRecordDocumentEquality implements Equality<FeedbackRecord> {
+  const FeedbackRecordDocumentEquality();
+
+  @override
+  bool equals(FeedbackRecord? e1, FeedbackRecord? e2) {
+    return e1?.mealName == e2?.mealName &&
+        e1?.feedback == e2?.feedback &&
+        e1?.timeCreated == e2?.timeCreated;
+  }
+
+  @override
+  int hash(FeedbackRecord? e) =>
+      const ListEquality().hash([e?.mealName, e?.feedback, e?.timeCreated]);
+
+  @override
+  bool isValidKey(Object? o) => o is FeedbackRecord;
+}
Index: lib/backend/schema/index.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/backend/schema/index.dart b/lib/backend/schema/index.dart
new file mode 100644
--- /dev/null	(date 1708365757639)
+++ b/lib/backend/schema/index.dart	(date 1708365757639)
@@ -0,0 +1,5 @@
+export 'package:cloud_firestore/cloud_firestore.dart';
+export 'package:flutter/material.dart' show Color, Colors;
+export '/flutter_flow/lat_lng.dart';
+
+export 'structs/index.dart';
Index: lib/backend/schema/support_center_record.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/backend/schema/support_center_record.dart b/lib/backend/schema/support_center_record.dart
new file mode 100644
--- /dev/null	(date 1708365757529)
+++ b/lib/backend/schema/support_center_record.dart	(date 1708365757529)
@@ -0,0 +1,97 @@
+import 'dart:async';
+
+import 'package:collection/collection.dart';
+
+import '/backend/schema/util/firestore_util.dart';
+import '/backend/schema/util/schema_util.dart';
+
+import 'index.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+
+class SupportCenterRecord extends FirestoreRecord {
+  SupportCenterRecord._(
+    DocumentReference reference,
+    Map<String, dynamic> data,
+  ) : super(reference, data) {
+    _initializeFields();
+  }
+
+  // "question" field.
+  String? _question;
+  String get question => _question ?? '';
+  bool hasQuestion() => _question != null;
+
+  // "answer" field.
+  String? _answer;
+  String get answer => _answer ?? '';
+  bool hasAnswer() => _answer != null;
+
+  void _initializeFields() {
+    _question = snapshotData['question'] as String?;
+    _answer = snapshotData['answer'] as String?;
+  }
+
+  static CollectionReference get collection =>
+      FirebaseFirestore.instance.collection('support_center');
+
+  static Stream<SupportCenterRecord> getDocument(DocumentReference ref) =>
+      ref.snapshots().map((s) => SupportCenterRecord.fromSnapshot(s));
+
+  static Future<SupportCenterRecord> getDocumentOnce(DocumentReference ref) =>
+      ref.get().then((s) => SupportCenterRecord.fromSnapshot(s));
+
+  static SupportCenterRecord fromSnapshot(DocumentSnapshot snapshot) =>
+      SupportCenterRecord._(
+        snapshot.reference,
+        mapFromFirestore(snapshot.data() as Map<String, dynamic>),
+      );
+
+  static SupportCenterRecord getDocumentFromData(
+    Map<String, dynamic> data,
+    DocumentReference reference,
+  ) =>
+      SupportCenterRecord._(reference, mapFromFirestore(data));
+
+  @override
+  String toString() =>
+      'SupportCenterRecord(reference: ${reference.path}, data: $snapshotData)';
+
+  @override
+  int get hashCode => reference.path.hashCode;
+
+  @override
+  bool operator ==(other) =>
+      other is SupportCenterRecord &&
+      reference.path.hashCode == other.reference.path.hashCode;
+}
+
+Map<String, dynamic> createSupportCenterRecordData({
+  String? question,
+  String? answer,
+}) {
+  final firestoreData = mapToFirestore(
+    <String, dynamic>{
+      'question': question,
+      'answer': answer,
+    }.withoutNulls,
+  );
+
+  return firestoreData;
+}
+
+class SupportCenterRecordDocumentEquality
+    implements Equality<SupportCenterRecord> {
+  const SupportCenterRecordDocumentEquality();
+
+  @override
+  bool equals(SupportCenterRecord? e1, SupportCenterRecord? e2) {
+    return e1?.question == e2?.question && e1?.answer == e2?.answer;
+  }
+
+  @override
+  int hash(SupportCenterRecord? e) =>
+      const ListEquality().hash([e?.question, e?.answer]);
+
+  @override
+  bool isValidKey(Object? o) => o is SupportCenterRecord;
+}
Index: lib/backend/schema/users_record.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/backend/schema/users_record.dart b/lib/backend/schema/users_record.dart
new file mode 100644
--- /dev/null	(date 1708365757624)
+++ b/lib/backend/schema/users_record.dart	(date 1708365757624)
@@ -0,0 +1,138 @@
+import 'dart:async';
+
+import 'package:collection/collection.dart';
+
+import '/backend/schema/util/firestore_util.dart';
+import '/backend/schema/util/schema_util.dart';
+
+import 'index.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+
+class UsersRecord extends FirestoreRecord {
+  UsersRecord._(
+    DocumentReference reference,
+    Map<String, dynamic> data,
+  ) : super(reference, data) {
+    _initializeFields();
+  }
+
+  // "email" field.
+  String? _email;
+  String get email => _email ?? '';
+  bool hasEmail() => _email != null;
+
+  // "display_name" field.
+  String? _displayName;
+  String get displayName => _displayName ?? '';
+  bool hasDisplayName() => _displayName != null;
+
+  // "photo_url" field.
+  String? _photoUrl;
+  String get photoUrl => _photoUrl ?? '';
+  bool hasPhotoUrl() => _photoUrl != null;
+
+  // "uid" field.
+  String? _uid;
+  String get uid => _uid ?? '';
+  bool hasUid() => _uid != null;
+
+  // "created_time" field.
+  DateTime? _createdTime;
+  DateTime? get createdTime => _createdTime;
+  bool hasCreatedTime() => _createdTime != null;
+
+  // "phone_number" field.
+  String? _phoneNumber;
+  String get phoneNumber => _phoneNumber ?? '';
+  bool hasPhoneNumber() => _phoneNumber != null;
+
+  void _initializeFields() {
+    _email = snapshotData['email'] as String?;
+    _displayName = snapshotData['display_name'] as String?;
+    _photoUrl = snapshotData['photo_url'] as String?;
+    _uid = snapshotData['uid'] as String?;
+    _createdTime = snapshotData['created_time'] as DateTime?;
+    _phoneNumber = snapshotData['phone_number'] as String?;
+  }
+
+  static CollectionReference get collection =>
+      FirebaseFirestore.instance.collection('users');
+
+  static Stream<UsersRecord> getDocument(DocumentReference ref) =>
+      ref.snapshots().map((s) => UsersRecord.fromSnapshot(s));
+
+  static Future<UsersRecord> getDocumentOnce(DocumentReference ref) =>
+      ref.get().then((s) => UsersRecord.fromSnapshot(s));
+
+  static UsersRecord fromSnapshot(DocumentSnapshot snapshot) => UsersRecord._(
+        snapshot.reference,
+        mapFromFirestore(snapshot.data() as Map<String, dynamic>),
+      );
+
+  static UsersRecord getDocumentFromData(
+    Map<String, dynamic> data,
+    DocumentReference reference,
+  ) =>
+      UsersRecord._(reference, mapFromFirestore(data));
+
+  @override
+  String toString() =>
+      'UsersRecord(reference: ${reference.path}, data: $snapshotData)';
+
+  @override
+  int get hashCode => reference.path.hashCode;
+
+  @override
+  bool operator ==(other) =>
+      other is UsersRecord &&
+      reference.path.hashCode == other.reference.path.hashCode;
+}
+
+Map<String, dynamic> createUsersRecordData({
+  String? email,
+  String? displayName,
+  String? photoUrl,
+  String? uid,
+  DateTime? createdTime,
+  String? phoneNumber,
+}) {
+  final firestoreData = mapToFirestore(
+    <String, dynamic>{
+      'email': email,
+      'display_name': displayName,
+      'photo_url': photoUrl,
+      'uid': uid,
+      'created_time': createdTime,
+      'phone_number': phoneNumber,
+    }.withoutNulls,
+  );
+
+  return firestoreData;
+}
+
+class UsersRecordDocumentEquality implements Equality<UsersRecord> {
+  const UsersRecordDocumentEquality();
+
+  @override
+  bool equals(UsersRecord? e1, UsersRecord? e2) {
+    return e1?.email == e2?.email &&
+        e1?.displayName == e2?.displayName &&
+        e1?.photoUrl == e2?.photoUrl &&
+        e1?.uid == e2?.uid &&
+        e1?.createdTime == e2?.createdTime &&
+        e1?.phoneNumber == e2?.phoneNumber;
+  }
+
+  @override
+  int hash(UsersRecord? e) => const ListEquality().hash([
+        e?.email,
+        e?.displayName,
+        e?.photoUrl,
+        e?.uid,
+        e?.createdTime,
+        e?.phoneNumber
+      ]);
+
+  @override
+  bool isValidKey(Object? o) => o is UsersRecord;
+}
Index: lib/backend/schema/meals_record.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/backend/schema/meals_record.dart b/lib/backend/schema/meals_record.dart
new file mode 100644
--- /dev/null	(date 1708365757608)
+++ b/lib/backend/schema/meals_record.dart	(date 1708365757608)
@@ -0,0 +1,91 @@
+import 'dart:async';
+
+import 'package:collection/collection.dart';
+
+import '/backend/schema/util/firestore_util.dart';
+import '/backend/schema/util/schema_util.dart';
+
+import 'index.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+
+class MealsRecord extends FirestoreRecord {
+  MealsRecord._(
+    DocumentReference reference,
+    Map<String, dynamic> data,
+  ) : super(reference, data) {
+    _initializeFields();
+  }
+
+  // "Category1" field.
+  List<String>? _category1;
+  List<String> get category1 => _category1 ?? const [];
+  bool hasCategory1() => _category1 != null;
+
+  // "Category2" field.
+  List<String>? _category2;
+  List<String> get category2 => _category2 ?? const [];
+  bool hasCategory2() => _category2 != null;
+
+  void _initializeFields() {
+    _category1 = getDataList(snapshotData['Category1']);
+    _category2 = getDataList(snapshotData['Category2']);
+  }
+
+  static CollectionReference get collection =>
+      FirebaseFirestore.instance.collection('meals');
+
+  static Stream<MealsRecord> getDocument(DocumentReference ref) =>
+      ref.snapshots().map((s) => MealsRecord.fromSnapshot(s));
+
+  static Future<MealsRecord> getDocumentOnce(DocumentReference ref) =>
+      ref.get().then((s) => MealsRecord.fromSnapshot(s));
+
+  static MealsRecord fromSnapshot(DocumentSnapshot snapshot) => MealsRecord._(
+        snapshot.reference,
+        mapFromFirestore(snapshot.data() as Map<String, dynamic>),
+      );
+
+  static MealsRecord getDocumentFromData(
+    Map<String, dynamic> data,
+    DocumentReference reference,
+  ) =>
+      MealsRecord._(reference, mapFromFirestore(data));
+
+  @override
+  String toString() =>
+      'MealsRecord(reference: ${reference.path}, data: $snapshotData)';
+
+  @override
+  int get hashCode => reference.path.hashCode;
+
+  @override
+  bool operator ==(other) =>
+      other is MealsRecord &&
+      reference.path.hashCode == other.reference.path.hashCode;
+}
+
+Map<String, dynamic> createMealsRecordData() {
+  final firestoreData = mapToFirestore(
+    <String, dynamic>{}.withoutNulls,
+  );
+
+  return firestoreData;
+}
+
+class MealsRecordDocumentEquality implements Equality<MealsRecord> {
+  const MealsRecordDocumentEquality();
+
+  @override
+  bool equals(MealsRecord? e1, MealsRecord? e2) {
+    const listEquality = ListEquality();
+    return listEquality.equals(e1?.category1, e2?.category1) &&
+        listEquality.equals(e1?.category2, e2?.category2);
+  }
+
+  @override
+  int hash(MealsRecord? e) =>
+      const ListEquality().hash([e?.category1, e?.category2]);
+
+  @override
+  bool isValidKey(Object? o) => o is MealsRecord;
+}
Index: lib/backend/schema/onboarding_options_record.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/backend/schema/onboarding_options_record.dart b/lib/backend/schema/onboarding_options_record.dart
new file mode 100644
--- /dev/null	(date 1708365757576)
+++ b/lib/backend/schema/onboarding_options_record.dart	(date 1708365757576)
@@ -0,0 +1,177 @@
+import 'dart:async';
+
+import 'package:collection/collection.dart';
+
+import '/backend/schema/util/firestore_util.dart';
+import '/backend/schema/util/schema_util.dart';
+
+import 'index.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+
+class OnboardingOptionsRecord extends FirestoreRecord {
+  OnboardingOptionsRecord._(
+    DocumentReference reference,
+    Map<String, dynamic> data,
+  ) : super(reference, data) {
+    _initializeFields();
+  }
+
+  // "allergen_options" field.
+  List<String>? _allergenOptions;
+  List<String> get allergenOptions => _allergenOptions ?? const [];
+  bool hasAllergenOptions() => _allergenOptions != null;
+
+  // "diet_options" field.
+  List<DietOptionsStruct>? _dietOptions;
+  List<DietOptionsStruct> get dietOptions => _dietOptions ?? const [];
+  bool hasDietOptions() => _dietOptions != null;
+
+  // "ingredient_options" field.
+  List<String>? _ingredientOptions;
+  List<String> get ingredientOptions => _ingredientOptions ?? const [];
+  bool hasIngredientOptions() => _ingredientOptions != null;
+
+  // "meal_options" field.
+  List<String>? _mealOptions;
+  List<String> get mealOptions => _mealOptions ?? const [];
+  bool hasMealOptions() => _mealOptions != null;
+
+  // "SKU" field.
+  String? _sku;
+  String get sku => _sku ?? '';
+  bool hasSku() => _sku != null;
+
+  // "name" field.
+  String? _name;
+  String get name => _name ?? '';
+  bool hasName() => _name != null;
+
+  // "orderedQuantity" field.
+  int? _orderedQuantity;
+  int get orderedQuantity => _orderedQuantity ?? 0;
+  bool hasOrderedQuantity() => _orderedQuantity != null;
+
+  // "stockLevel" field.
+  int? _stockLevel;
+  int get stockLevel => _stockLevel ?? 0;
+  bool hasStockLevel() => _stockLevel != null;
+
+  // "restockingLeadTime" field.
+  int? _restockingLeadTime;
+  int get restockingLeadTime => _restockingLeadTime ?? 0;
+  bool hasRestockingLeadTime() => _restockingLeadTime != null;
+
+  // "ratio" field.
+  double? _ratio;
+  double get ratio => _ratio ?? 0.0;
+  bool hasRatio() => _ratio != null;
+
+  void _initializeFields() {
+    _allergenOptions = getDataList(snapshotData['allergen_options']);
+    _dietOptions = getStructList(
+      snapshotData['diet_options'],
+      DietOptionsStruct.fromMap,
+    );
+    _ingredientOptions = getDataList(snapshotData['ingredient_options']);
+    _mealOptions = getDataList(snapshotData['meal_options']);
+    _sku = snapshotData['SKU'] as String?;
+    _name = snapshotData['name'] as String?;
+    _orderedQuantity = castToType<int>(snapshotData['orderedQuantity']);
+    _stockLevel = castToType<int>(snapshotData['stockLevel']);
+    _restockingLeadTime = castToType<int>(snapshotData['restockingLeadTime']);
+    _ratio = castToType<double>(snapshotData['ratio']);
+  }
+
+  static CollectionReference get collection =>
+      FirebaseFirestore.instance.collection('onboarding_options');
+
+  static Stream<OnboardingOptionsRecord> getDocument(DocumentReference ref) =>
+      ref.snapshots().map((s) => OnboardingOptionsRecord.fromSnapshot(s));
+
+  static Future<OnboardingOptionsRecord> getDocumentOnce(
+          DocumentReference ref) =>
+      ref.get().then((s) => OnboardingOptionsRecord.fromSnapshot(s));
+
+  static OnboardingOptionsRecord fromSnapshot(DocumentSnapshot snapshot) =>
+      OnboardingOptionsRecord._(
+        snapshot.reference,
+        mapFromFirestore(snapshot.data() as Map<String, dynamic>),
+      );
+
+  static OnboardingOptionsRecord getDocumentFromData(
+    Map<String, dynamic> data,
+    DocumentReference reference,
+  ) =>
+      OnboardingOptionsRecord._(reference, mapFromFirestore(data));
+
+  @override
+  String toString() =>
+      'OnboardingOptionsRecord(reference: ${reference.path}, data: $snapshotData)';
+
+  @override
+  int get hashCode => reference.path.hashCode;
+
+  @override
+  bool operator ==(other) =>
+      other is OnboardingOptionsRecord &&
+      reference.path.hashCode == other.reference.path.hashCode;
+}
+
+Map<String, dynamic> createOnboardingOptionsRecordData({
+  String? sku,
+  String? name,
+  int? orderedQuantity,
+  int? stockLevel,
+  int? restockingLeadTime,
+  double? ratio,
+}) {
+  final firestoreData = mapToFirestore(
+    <String, dynamic>{
+      'SKU': sku,
+      'name': name,
+      'orderedQuantity': orderedQuantity,
+      'stockLevel': stockLevel,
+      'restockingLeadTime': restockingLeadTime,
+      'ratio': ratio,
+    }.withoutNulls,
+  );
+
+  return firestoreData;
+}
+
+class OnboardingOptionsRecordDocumentEquality
+    implements Equality<OnboardingOptionsRecord> {
+  const OnboardingOptionsRecordDocumentEquality();
+
+  @override
+  bool equals(OnboardingOptionsRecord? e1, OnboardingOptionsRecord? e2) {
+    const listEquality = ListEquality();
+    return listEquality.equals(e1?.allergenOptions, e2?.allergenOptions) &&
+        listEquality.equals(e1?.dietOptions, e2?.dietOptions) &&
+        listEquality.equals(e1?.ingredientOptions, e2?.ingredientOptions) &&
+        listEquality.equals(e1?.mealOptions, e2?.mealOptions) &&
+        e1?.sku == e2?.sku &&
+        e1?.name == e2?.name &&
+        e1?.orderedQuantity == e2?.orderedQuantity &&
+        e1?.stockLevel == e2?.stockLevel &&
+        e1?.restockingLeadTime == e2?.restockingLeadTime &&
+        e1?.ratio == e2?.ratio;
+  }
+
+  @override
+  int hash(OnboardingOptionsRecord? e) => const ListEquality().hash([
+        e?.allergenOptions,
+        e?.dietOptions,
+        e?.ingredientOptions,
+        e?.mealOptions,
+        e?.sku,
+        e?.name,
+        e?.orderedQuantity,
+        e?.stockLevel,
+        e?.restockingLeadTime,
+        e?.ratio
+      ]);
+
+  @override
+  bool isValidKey(Object? o) => o is OnboardingOptionsRecord;
+}
Index: lib/backend/schema/util/firestore_util.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/backend/schema/util/firestore_util.dart b/lib/backend/schema/util/firestore_util.dart
new file mode 100644
--- /dev/null	(date 1708365757749)
+++ b/lib/backend/schema/util/firestore_util.dart	(date 1708365757749)
@@ -0,0 +1,152 @@
+import 'package:cloud_firestore/cloud_firestore.dart';
+import 'package:flutter/material.dart';
+import 'package:from_css_color/from_css_color.dart';
+
+import '/backend/schema/util/schema_util.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+
+typedef RecordBuilder<T> = T Function(DocumentSnapshot snapshot);
+
+abstract class FirestoreRecord {
+  FirestoreRecord(this.reference, this.snapshotData);
+  Map<String, dynamic> snapshotData;
+  DocumentReference reference;
+}
+
+abstract class FFFirebaseStruct extends BaseStruct {
+  FFFirebaseStruct(this.firestoreUtilData);
+
+  /// Utility class for Firestore updates
+  FirestoreUtilData firestoreUtilData = FirestoreUtilData();
+}
+
+class FirestoreUtilData {
+  const FirestoreUtilData({
+    this.fieldValues = const {},
+    this.clearUnsetFields = true,
+    this.create = false,
+    this.delete = false,
+  });
+  final Map<String, dynamic> fieldValues;
+  final bool clearUnsetFields;
+  final bool create;
+  final bool delete;
+  static String get name => 'firestoreUtilData';
+}
+
+Map<String, dynamic> mapFromFirestore(Map<String, dynamic> data) =>
+    mergeNestedFields(data)
+        .where((k, _) => k != FirestoreUtilData.name)
+        .map((key, value) {
+      // Handle Timestamp
+      if (value is Timestamp) {
+        value = value.toDate();
+      }
+      // Handle list of Timestamp
+      if (value is Iterable && value.isNotEmpty && value.first is Timestamp) {
+        value = value.map((v) => (v as Timestamp).toDate()).toList();
+      }
+      // Handle GeoPoint
+      if (value is GeoPoint) {
+        value = value.toLatLng();
+      }
+      // Handle list of GeoPoint
+      if (value is Iterable && value.isNotEmpty && value.first is GeoPoint) {
+        value = value.map((v) => (v as GeoPoint).toLatLng()).toList();
+      }
+      // Handle nested data.
+      if (value is Map) {
+        value = mapFromFirestore(value as Map<String, dynamic>);
+      }
+      // Handle list of nested data.
+      if (value is Iterable && value.isNotEmpty && value.first is Map) {
+        value = value
+            .map((v) => mapFromFirestore(v as Map<String, dynamic>))
+            .toList();
+      }
+      return MapEntry(key, value);
+    });
+
+Map<String, dynamic> mapToFirestore(Map<String, dynamic> data) =>
+    data.where((k, v) => k != FirestoreUtilData.name).map((key, value) {
+      // Handle GeoPoint
+      if (value is LatLng) {
+        value = value.toGeoPoint();
+      }
+      // Handle list of GeoPoint
+      if (value is Iterable && value.isNotEmpty && value.first is LatLng) {
+        value = value.map((v) => (v as LatLng).toGeoPoint()).toList();
+      }
+      // Handle Color
+      if (value is Color) {
+        value = value.toCssString();
+      }
+      // Handle list of Color
+      if (value is Iterable && value.isNotEmpty && value.first is Color) {
+        value = value.map((v) => (v as Color).toCssString()).toList();
+      }
+      // Handle nested data.
+      if (value is Map) {
+        value = mapToFirestore(value as Map<String, dynamic>);
+      }
+      // Handle list of nested data.
+      if (value is Iterable && value.isNotEmpty && value.first is Map) {
+        value = value
+            .map((v) => mapToFirestore(v as Map<String, dynamic>))
+            .toList();
+      }
+      return MapEntry(key, value);
+    });
+
+List<GeoPoint>? convertToGeoPointList(List<LatLng>? list) =>
+    list?.map((e) => e.toGeoPoint()).toList();
+
+extension GeoPointExtension on LatLng {
+  GeoPoint toGeoPoint() => GeoPoint(latitude, longitude);
+}
+
+extension LatLngExtension on GeoPoint {
+  LatLng toLatLng() => LatLng(latitude, longitude);
+}
+
+DocumentReference toRef(String ref) => FirebaseFirestore.instance.doc(ref);
+
+T? safeGet<T>(T Function() func, [Function(dynamic)? reportError]) {
+  try {
+    return func();
+  } catch (e) {
+    reportError?.call(e);
+  }
+  return null;
+}
+
+Map<String, dynamic> mergeNestedFields(Map<String, dynamic> data) {
+  final nestedData = data.where((k, _) => k.contains('.'));
+  final fieldNames = nestedData.keys.map((k) => k.split('.').first).toSet();
+  // Remove nested values (e.g. 'foo.bar') and merge them into a map.
+  data.removeWhere((k, _) => k.contains('.'));
+  fieldNames.forEach((name) {
+    final mergedValues = mergeNestedFields(
+      nestedData
+          .where((k, _) => k.split('.').first == name)
+          .map((k, v) => MapEntry(k.split('.').skip(1).join('.'), v)),
+    );
+    final existingValue = data[name];
+    data[name] = {
+      if (existingValue != null && existingValue is Map)
+        ...existingValue as Map<String, dynamic>,
+      ...mergedValues,
+    };
+  });
+  // Merge any nested maps inside any of the fields as well.
+  data.where((_, v) => v is Map).forEach((k, v) {
+    data[k] = mergeNestedFields(v as Map<String, dynamic>);
+  });
+
+  return data;
+}
+
+extension _WhereMapExtension<K, V> on Map<K, V> {
+  Map<K, V> where(bool Function(K, V) test) =>
+      Map.fromEntries(entries.where((e) => test(e.key, e.value)));
+}
Index: lib/backend/schema/structs/index.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/backend/schema/structs/index.dart b/lib/backend/schema/structs/index.dart
new file mode 100644
--- /dev/null	(date 1708365757718)
+++ b/lib/backend/schema/structs/index.dart	(date 1708365757718)
@@ -0,0 +1,4 @@
+export '/backend/schema/util/schema_util.dart';
+
+export 'chefs_struct.dart';
+export 'diet_options_struct.dart';
Index: lib/backend/schema/util/schema_util.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/backend/schema/util/schema_util.dart b/lib/backend/schema/util/schema_util.dart
new file mode 100644
--- /dev/null	(date 1708365757765)
+++ b/lib/backend/schema/util/schema_util.dart	(date 1708365757765)
@@ -0,0 +1,82 @@
+import 'dart:convert';
+
+import 'package:flutter/material.dart';
+import 'package:from_css_color/from_css_color.dart';
+
+import '/flutter_flow/flutter_flow_util.dart';
+
+export 'package:collection/collection.dart' show ListEquality;
+export 'package:flutter/material.dart' show Color, Colors;
+export 'package:from_css_color/from_css_color.dart';
+
+typedef StructBuilder<T> = T Function(Map<String, dynamic> data);
+
+abstract class BaseStruct {
+  Map<String, dynamic> toSerializableMap();
+  String serialize() => json.encode(toSerializableMap());
+}
+
+dynamic deserializeStructParam<T>(
+  dynamic param,
+  ParamType paramType,
+  bool isList, {
+  required StructBuilder<T> structBuilder,
+}) {
+  if (param == null) {
+    return null;
+  } else if (isList) {
+    final paramValues;
+    try {
+      paramValues = param is Iterable ? param : json.decode(param);
+    } catch (e) {
+      return null;
+    }
+    if (paramValues is! Iterable) {
+      return null;
+    }
+    return paramValues
+        .map<T>((e) => deserializeStructParam<T>(e, paramType, false,
+            structBuilder: structBuilder))
+        .toList();
+  } else if (param is Map<String, dynamic>) {
+    return structBuilder(param);
+  } else {
+    return deserializeParam<T>(
+      param,
+      paramType,
+      isList,
+      structBuilder: structBuilder,
+    );
+  }
+}
+
+List<T>? getStructList<T>(
+  dynamic value,
+  StructBuilder<T> structBuilder,
+) =>
+    value is! List
+        ? null
+        : value
+            .where((e) => e is Map<String, dynamic>)
+            .map((e) => structBuilder(e as Map<String, dynamic>))
+            .toList();
+
+Color? getSchemaColor(dynamic value) => value is String
+    ? fromCssColor(value)
+    : value is Color
+        ? value
+        : null;
+
+List<Color>? getColorsList(dynamic value) =>
+    value is! List ? null : value.map(getSchemaColor).withoutNulls;
+
+List<T>? getDataList<T>(dynamic value) =>
+    value is! List ? null : value.map((e) => castToType<T>(e)!).toList();
+
+extension MapDataExtensions on Map<String, dynamic> {
+  Map<String, dynamic> get withoutNulls => Map.fromEntries(
+        entries
+            .where((e) => e.value != null)
+            .map((e) => MapEntry(e.key, e.value!)),
+      );
+}
Index: lib/backend/schema/structs/diet_options_struct.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/backend/schema/structs/diet_options_struct.dart b/lib/backend/schema/structs/diet_options_struct.dart
new file mode 100644
--- /dev/null	(date 1708365757686)
+++ b/lib/backend/schema/structs/diet_options_struct.dart	(date 1708365757686)
@@ -0,0 +1,166 @@
+// ignore_for_file: unnecessary_getters_setters
+
+import 'package:cloud_firestore/cloud_firestore.dart';
+
+import '/backend/schema/util/firestore_util.dart';
+import '/backend/schema/util/schema_util.dart';
+
+import 'index.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+
+class DietOptionsStruct extends FFFirebaseStruct {
+  DietOptionsStruct({
+    String? dietName,
+    String? dietTagline,
+    FirestoreUtilData firestoreUtilData = const FirestoreUtilData(),
+  })  : _dietName = dietName,
+        _dietTagline = dietTagline,
+        super(firestoreUtilData);
+
+  // "diet_name" field.
+  String? _dietName;
+  String get dietName => _dietName ?? '';
+  set dietName(String? val) => _dietName = val;
+  bool hasDietName() => _dietName != null;
+
+  // "diet_tagline" field.
+  String? _dietTagline;
+  String get dietTagline => _dietTagline ?? '';
+  set dietTagline(String? val) => _dietTagline = val;
+  bool hasDietTagline() => _dietTagline != null;
+
+  static DietOptionsStruct fromMap(Map<String, dynamic> data) =>
+      DietOptionsStruct(
+        dietName: data['diet_name'] as String?,
+        dietTagline: data['diet_tagline'] as String?,
+      );
+
+  static DietOptionsStruct? maybeFromMap(dynamic data) => data is Map
+      ? DietOptionsStruct.fromMap(data.cast<String, dynamic>())
+      : null;
+
+  Map<String, dynamic> toMap() => {
+        'diet_name': _dietName,
+        'diet_tagline': _dietTagline,
+      }.withoutNulls;
+
+  @override
+  Map<String, dynamic> toSerializableMap() => {
+        'diet_name': serializeParam(
+          _dietName,
+          ParamType.String,
+        ),
+        'diet_tagline': serializeParam(
+          _dietTagline,
+          ParamType.String,
+        ),
+      }.withoutNulls;
+
+  static DietOptionsStruct fromSerializableMap(Map<String, dynamic> data) =>
+      DietOptionsStruct(
+        dietName: deserializeParam(
+          data['diet_name'],
+          ParamType.String,
+          false,
+        ),
+        dietTagline: deserializeParam(
+          data['diet_tagline'],
+          ParamType.String,
+          false,
+        ),
+      );
+
+  @override
+  String toString() => 'DietOptionsStruct(${toMap()})';
+
+  @override
+  bool operator ==(Object other) {
+    return other is DietOptionsStruct &&
+        dietName == other.dietName &&
+        dietTagline == other.dietTagline;
+  }
+
+  @override
+  int get hashCode => const ListEquality().hash([dietName, dietTagline]);
+}
+
+DietOptionsStruct createDietOptionsStruct({
+  String? dietName,
+  String? dietTagline,
+  Map<String, dynamic> fieldValues = const {},
+  bool clearUnsetFields = true,
+  bool create = false,
+  bool delete = false,
+}) =>
+    DietOptionsStruct(
+      dietName: dietName,
+      dietTagline: dietTagline,
+      firestoreUtilData: FirestoreUtilData(
+        clearUnsetFields: clearUnsetFields,
+        create: create,
+        delete: delete,
+        fieldValues: fieldValues,
+      ),
+    );
+
+DietOptionsStruct? updateDietOptionsStruct(
+  DietOptionsStruct? dietOptions, {
+  bool clearUnsetFields = true,
+  bool create = false,
+}) =>
+    dietOptions
+      ?..firestoreUtilData = FirestoreUtilData(
+        clearUnsetFields: clearUnsetFields,
+        create: create,
+      );
+
+void addDietOptionsStructData(
+  Map<String, dynamic> firestoreData,
+  DietOptionsStruct? dietOptions,
+  String fieldName, [
+  bool forFieldValue = false,
+]) {
+  firestoreData.remove(fieldName);
+  if (dietOptions == null) {
+    return;
+  }
+  if (dietOptions.firestoreUtilData.delete) {
+    firestoreData[fieldName] = FieldValue.delete();
+    return;
+  }
+  final clearFields =
+      !forFieldValue && dietOptions.firestoreUtilData.clearUnsetFields;
+  if (clearFields) {
+    firestoreData[fieldName] = <String, dynamic>{};
+  }
+  final dietOptionsData =
+      getDietOptionsFirestoreData(dietOptions, forFieldValue);
+  final nestedData =
+      dietOptionsData.map((k, v) => MapEntry('$fieldName.$k', v));
+
+  final mergeFields = dietOptions.firestoreUtilData.create || clearFields;
+  firestoreData
+      .addAll(mergeFields ? mergeNestedFields(nestedData) : nestedData);
+}
+
+Map<String, dynamic> getDietOptionsFirestoreData(
+  DietOptionsStruct? dietOptions, [
+  bool forFieldValue = false,
+]) {
+  if (dietOptions == null) {
+    return {};
+  }
+  final firestoreData = mapToFirestore(dietOptions.toMap());
+
+  // Add any Firestore field values
+  dietOptions.firestoreUtilData.fieldValues
+      .forEach((k, v) => firestoreData[k] = v);
+
+  return forFieldValue ? mergeNestedFields(firestoreData) : firestoreData;
+}
+
+List<Map<String, dynamic>> getDietOptionsListFirestoreData(
+  List<DietOptionsStruct>? dietOptionss,
+) =>
+    dietOptionss?.map((e) => getDietOptionsFirestoreData(e, true)).toList() ??
+    [];
Index: lib/backend/schema/structs/chefs_struct.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/backend/schema/structs/chefs_struct.dart b/lib/backend/schema/structs/chefs_struct.dart
new file mode 100644
--- /dev/null	(date 1708365757670)
+++ b/lib/backend/schema/structs/chefs_struct.dart	(date 1708365757670)
@@ -0,0 +1,182 @@
+// ignore_for_file: unnecessary_getters_setters
+
+import 'package:cloud_firestore/cloud_firestore.dart';
+
+import '/backend/schema/util/firestore_util.dart';
+import '/backend/schema/util/schema_util.dart';
+
+import 'index.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+
+class ChefsStruct extends FFFirebaseStruct {
+  ChefsStruct({
+    String? profilePicture,
+    String? name,
+    String? bio,
+    FirestoreUtilData firestoreUtilData = const FirestoreUtilData(),
+  })  : _profilePicture = profilePicture,
+        _name = name,
+        _bio = bio,
+        super(firestoreUtilData);
+
+  // "profile_picture" field.
+  String? _profilePicture;
+  String get profilePicture => _profilePicture ?? '';
+  set profilePicture(String? val) => _profilePicture = val;
+  bool hasProfilePicture() => _profilePicture != null;
+
+  // "name" field.
+  String? _name;
+  String get name => _name ?? '';
+  set name(String? val) => _name = val;
+  bool hasName() => _name != null;
+
+  // "bio" field.
+  String? _bio;
+  String get bio => _bio ?? '';
+  set bio(String? val) => _bio = val;
+  bool hasBio() => _bio != null;
+
+  static ChefsStruct fromMap(Map<String, dynamic> data) => ChefsStruct(
+        profilePicture: data['profile_picture'] as String?,
+        name: data['name'] as String?,
+        bio: data['bio'] as String?,
+      );
+
+  static ChefsStruct? maybeFromMap(dynamic data) =>
+      data is Map ? ChefsStruct.fromMap(data.cast<String, dynamic>()) : null;
+
+  Map<String, dynamic> toMap() => {
+        'profile_picture': _profilePicture,
+        'name': _name,
+        'bio': _bio,
+      }.withoutNulls;
+
+  @override
+  Map<String, dynamic> toSerializableMap() => {
+        'profile_picture': serializeParam(
+          _profilePicture,
+          ParamType.String,
+        ),
+        'name': serializeParam(
+          _name,
+          ParamType.String,
+        ),
+        'bio': serializeParam(
+          _bio,
+          ParamType.String,
+        ),
+      }.withoutNulls;
+
+  static ChefsStruct fromSerializableMap(Map<String, dynamic> data) =>
+      ChefsStruct(
+        profilePicture: deserializeParam(
+          data['profile_picture'],
+          ParamType.String,
+          false,
+        ),
+        name: deserializeParam(
+          data['name'],
+          ParamType.String,
+          false,
+        ),
+        bio: deserializeParam(
+          data['bio'],
+          ParamType.String,
+          false,
+        ),
+      );
+
+  @override
+  String toString() => 'ChefsStruct(${toMap()})';
+
+  @override
+  bool operator ==(Object other) {
+    return other is ChefsStruct &&
+        profilePicture == other.profilePicture &&
+        name == other.name &&
+        bio == other.bio;
+  }
+
+  @override
+  int get hashCode => const ListEquality().hash([profilePicture, name, bio]);
+}
+
+ChefsStruct createChefsStruct({
+  String? profilePicture,
+  String? name,
+  String? bio,
+  Map<String, dynamic> fieldValues = const {},
+  bool clearUnsetFields = true,
+  bool create = false,
+  bool delete = false,
+}) =>
+    ChefsStruct(
+      profilePicture: profilePicture,
+      name: name,
+      bio: bio,
+      firestoreUtilData: FirestoreUtilData(
+        clearUnsetFields: clearUnsetFields,
+        create: create,
+        delete: delete,
+        fieldValues: fieldValues,
+      ),
+    );
+
+ChefsStruct? updateChefsStruct(
+  ChefsStruct? chefs, {
+  bool clearUnsetFields = true,
+  bool create = false,
+}) =>
+    chefs
+      ?..firestoreUtilData = FirestoreUtilData(
+        clearUnsetFields: clearUnsetFields,
+        create: create,
+      );
+
+void addChefsStructData(
+  Map<String, dynamic> firestoreData,
+  ChefsStruct? chefs,
+  String fieldName, [
+  bool forFieldValue = false,
+]) {
+  firestoreData.remove(fieldName);
+  if (chefs == null) {
+    return;
+  }
+  if (chefs.firestoreUtilData.delete) {
+    firestoreData[fieldName] = FieldValue.delete();
+    return;
+  }
+  final clearFields =
+      !forFieldValue && chefs.firestoreUtilData.clearUnsetFields;
+  if (clearFields) {
+    firestoreData[fieldName] = <String, dynamic>{};
+  }
+  final chefsData = getChefsFirestoreData(chefs, forFieldValue);
+  final nestedData = chefsData.map((k, v) => MapEntry('$fieldName.$k', v));
+
+  final mergeFields = chefs.firestoreUtilData.create || clearFields;
+  firestoreData
+      .addAll(mergeFields ? mergeNestedFields(nestedData) : nestedData);
+}
+
+Map<String, dynamic> getChefsFirestoreData(
+  ChefsStruct? chefs, [
+  bool forFieldValue = false,
+]) {
+  if (chefs == null) {
+    return {};
+  }
+  final firestoreData = mapToFirestore(chefs.toMap());
+
+  // Add any Firestore field values
+  chefs.firestoreUtilData.fieldValues.forEach((k, v) => firestoreData[k] = v);
+
+  return forFieldValue ? mergeNestedFields(firestoreData) : firestoreData;
+}
+
+List<Map<String, dynamic>> getChefsListFirestoreData(
+  List<ChefsStruct>? chefss,
+) =>
+    chefss?.map((e) => getChefsFirestoreData(e, true)).toList() ?? [];
Index: lib/backend/firebase_analytics/analytics.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/backend/firebase_analytics/analytics.dart b/lib/backend/firebase_analytics/analytics.dart
new file mode 100644
--- /dev/null	(date 1708365757482)
+++ b/lib/backend/firebase_analytics/analytics.dart	(date 1708365757482)
@@ -0,0 +1,39 @@
+import 'dart:math';
+
+import 'package:firebase_analytics/firebase_analytics.dart';
+import '../../auth/firebase_auth/auth_util.dart';
+import 'package:firebase_auth/firebase_auth.dart';
+
+const kMaxEventNameLength = 40;
+const kMaxParameterLength = 100;
+
+void logFirebaseEvent(String eventName, {Map<String?, dynamic>? parameters}) {
+  // https://firebase.google.com/docs/reference/cpp/group/event-names
+  assert(eventName.length <= kMaxEventNameLength);
+
+  parameters ??= {};
+  parameters.putIfAbsent(
+      'user', () => currentUserUid.isEmpty ? currentUserUid : 'unset');
+  parameters.removeWhere((k, v) => k == null || v == null);
+  final params = parameters.map((k, v) => MapEntry(k!, v));
+
+  // FB Analytics allows num values but others need to be converted to strings
+  // and cannot be more than 100 characters.
+  for (final entry in params.entries) {
+    if (entry.value is! num) {
+      var valStr = entry.value.toString();
+      if (valStr.length > kMaxParameterLength) {
+        valStr = valStr.substring(0, min(valStr.length, kMaxParameterLength));
+      }
+      params[entry.key] = valStr;
+    }
+  }
+
+  FirebaseAnalytics.instance.logEvent(name: eventName, parameters: params);
+}
+
+void logFirebaseAuthEvent(User? user, String method) {
+  final isSignup = user!.metadata.creationTime == user.metadata.lastSignInTime;
+  final authEvent = isSignup ? 'sign_up' : 'login';
+  logFirebaseEvent(authEvent, parameters: {'method': method});
+}
Index: lib/backend/firebase/firebase_config.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/backend/firebase/firebase_config.dart b/lib/backend/firebase/firebase_config.dart
new file mode 100644
--- /dev/null	(date 1708365757796)
+++ b/lib/backend/firebase/firebase_config.dart	(date 1708365757796)
@@ -0,0 +1,18 @@
+import 'package:firebase_core/firebase_core.dart';
+import 'package:flutter/foundation.dart';
+
+Future initFirebase() async {
+  if (kIsWeb) {
+    await Firebase.initializeApp(
+        options: FirebaseOptions(
+            apiKey: "AIzaSyCcNXQdFS4kWtgLR8w_QoKLqhd37uJb2e4",
+            authDomain: "khetiharii.firebaseapp.com",
+            projectId: "khetiharii",
+            storageBucket: "khetiharii.appspot.com",
+            messagingSenderId: "745837720735",
+            appId: "1:745837720735:web:ed223e046e19a298735eaa",
+            measurementId: "G-9E4Z2P36LR"));
+  } else {
+    await Firebase.initializeApp();
+  }
+}
Index: lib/components/accordion_model.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/components/accordion_model.dart b/lib/components/accordion_model.dart
new file mode 100644
--- /dev/null	(date 1708365757874)
+++ b/lib/components/accordion_model.dart	(date 1708365757874)
@@ -0,0 +1,21 @@
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import 'accordion_widget.dart' show AccordionWidget;
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+
+class AccordionModel extends FlutterFlowModel<AccordionWidget> {
+  /// Initialization and disposal methods.
+
+  @override
+  void initState(BuildContext context) {}
+
+  @override
+  void dispose() {}
+
+  /// Action blocks are added here.
+
+  /// Additional helper methods are added here.
+}
Index: lib/components/custom_appbar_widget.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/components/custom_appbar_widget.dart b/lib/components/custom_appbar_widget.dart
new file mode 100644
--- /dev/null	(date 1708365757843)
+++ b/lib/components/custom_appbar_widget.dart	(date 1708365757843)
@@ -0,0 +1,142 @@
+import '/flutter_flow/flutter_flow_icon_button.dart';
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/flutter_flow_widgets.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:font_awesome_flutter/font_awesome_flutter.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+import 'custom_appbar_model.dart';
+export 'custom_appbar_model.dart';
+
+class CustomAppbarWidget extends StatefulWidget {
+  const CustomAppbarWidget({
+    super.key,
+    required this.backButton,
+    bool? actionButton,
+    this.actionButtonText,
+    this.actionButtonAction,
+    bool? optionsButton,
+    required this.optionsButtonAction,
+  })  : this.actionButton = actionButton ?? false,
+        this.optionsButton = optionsButton ?? false;
+
+  final bool? backButton;
+  final bool actionButton;
+  final String? actionButtonText;
+  final Future Function()? actionButtonAction;
+  final bool optionsButton;
+  final Future Function()? optionsButtonAction;
+
+  @override
+  State<CustomAppbarWidget> createState() => _CustomAppbarWidgetState();
+}
+
+class _CustomAppbarWidgetState extends State<CustomAppbarWidget> {
+  late CustomAppbarModel _model;
+
+  @override
+  void setState(VoidCallback callback) {
+    super.setState(callback);
+    _model.onUpdate();
+  }
+
+  @override
+  void initState() {
+    super.initState();
+    _model = createModel(context, () => CustomAppbarModel());
+
+    WidgetsBinding.instance.addPostFrameCallback((_) => setState(() {}));
+  }
+
+  @override
+  void dispose() {
+    _model.maybeDispose();
+
+    super.dispose();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    context.watch<FFAppState>();
+
+    return Row(
+      mainAxisSize: MainAxisSize.max,
+      mainAxisAlignment: MainAxisAlignment.spaceBetween,
+      children: [
+        if (widget.backButton ?? true)
+          FlutterFlowIconButton(
+            borderColor: FlutterFlowTheme.of(context).secondaryBackground,
+            borderRadius: 24.0,
+            borderWidth: 1.0,
+            buttonSize: 44.0,
+            fillColor: FlutterFlowTheme.of(context).secondaryBackground,
+            icon: Icon(
+              Icons.keyboard_arrow_left,
+              color: FlutterFlowTheme.of(context).primaryText,
+              size: 18.0,
+            ),
+            onPressed: () async {
+              logFirebaseEvent('CUSTOM_APPBAR_keyboard_arrow_left_ICN_ON');
+              logFirebaseEvent('IconButton_navigate_back');
+              context.safePop();
+            },
+          ),
+        Row(
+          mainAxisSize: MainAxisSize.max,
+          children: [
+            if (widget.actionButton)
+              FFButtonWidget(
+                onPressed: () async {
+                  logFirebaseEvent('CUSTOM_APPBAR_COMP_SAVE_BTN_ON_TAP');
+                  logFirebaseEvent('Button_execute_callback');
+                  await widget.actionButtonAction?.call();
+                },
+                text: valueOrDefault<String>(
+                  widget.actionButtonText,
+                  'Button',
+                ),
+                options: FFButtonOptions(
+                  height: 44.0,
+                  padding: EdgeInsetsDirectional.fromSTEB(0.0, 0.0, 0.0, 0.0),
+                  iconPadding:
+                      EdgeInsetsDirectional.fromSTEB(0.0, 0.0, 0.0, 0.0),
+                  color: FlutterFlowTheme.of(context).primary,
+                  textStyle: FlutterFlowTheme.of(context).bodyMedium.override(
+                        fontFamily: 'Plus Jakarta Sans',
+                        color: FlutterFlowTheme.of(context).primaryBackground,
+                        fontWeight: FontWeight.w600,
+                      ),
+                  elevation: 0.0,
+                  borderSide: BorderSide(
+                    color: Colors.transparent,
+                    width: 1.0,
+                  ),
+                  borderRadius: BorderRadius.circular(25.0),
+                ),
+              ),
+            if (widget.optionsButton)
+              FlutterFlowIconButton(
+                borderColor: FlutterFlowTheme.of(context).secondaryBackground,
+                borderRadius: 24.0,
+                borderWidth: 1.0,
+                buttonSize: 44.0,
+                fillColor: FlutterFlowTheme.of(context).secondaryBackground,
+                icon: FaIcon(
+                  FontAwesomeIcons.ellipsisH,
+                  color: FlutterFlowTheme.of(context).primaryText,
+                  size: 18.0,
+                ),
+                onPressed: () async {
+                  logFirebaseEvent('CUSTOM_APPBAR_COMP_ellipsisH_ICN_ON_TAP');
+                  logFirebaseEvent('IconButton_execute_callback');
+                  await widget.optionsButtonAction?.call();
+                },
+              ),
+          ].divide(SizedBox(width: 8.0)),
+        ),
+      ],
+    );
+  }
+}
Index: lib/components/accordion_widget.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/components/accordion_widget.dart b/lib/components/accordion_widget.dart
new file mode 100644
--- /dev/null	(date 1708365757890)
+++ b/lib/components/accordion_widget.dart	(date 1708365757890)
@@ -0,0 +1,154 @@
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+import 'accordion_model.dart';
+export 'accordion_model.dart';
+
+class AccordionWidget extends StatefulWidget {
+  const AccordionWidget({
+    super.key,
+    required this.expandedAccordionIndex,
+    required this.accordionIndex,
+    required this.question,
+    required this.answer,
+    required this.action,
+  });
+
+  final int? expandedAccordionIndex;
+  final int? accordionIndex;
+  final String? question;
+  final String? answer;
+  final Future Function()? action;
+
+  @override
+  State<AccordionWidget> createState() => _AccordionWidgetState();
+}
+
+class _AccordionWidgetState extends State<AccordionWidget> {
+  late AccordionModel _model;
+
+  @override
+  void setState(VoidCallback callback) {
+    super.setState(callback);
+    _model.onUpdate();
+  }
+
+  @override
+  void initState() {
+    super.initState();
+    _model = createModel(context, () => AccordionModel());
+
+    WidgetsBinding.instance.addPostFrameCallback((_) => setState(() {}));
+  }
+
+  @override
+  void dispose() {
+    _model.maybeDispose();
+
+    super.dispose();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    context.watch<FFAppState>();
+
+    return Padding(
+      padding: EdgeInsetsDirectional.fromSTEB(0.0, 0.0, 0.0, 8.0),
+      child: Container(
+        width: double.infinity,
+        decoration: BoxDecoration(
+          color: FlutterFlowTheme.of(context).secondaryBackground,
+          borderRadius: BorderRadius.circular(8.0),
+        ),
+        child: Padding(
+          padding: EdgeInsets.all(12.0),
+          child: Column(
+            mainAxisSize: MainAxisSize.max,
+            crossAxisAlignment: CrossAxisAlignment.start,
+            children: [
+              InkWell(
+                splashColor: Colors.transparent,
+                focusColor: Colors.transparent,
+                hoverColor: Colors.transparent,
+                highlightColor: Colors.transparent,
+                onTap: () async {
+                  logFirebaseEvent('ACCORDION_COMP_Row_1h9purvk_ON_TAP');
+                  logFirebaseEvent('Row_execute_callback');
+                  await widget.action?.call();
+                },
+                child: Row(
+                  mainAxisSize: MainAxisSize.max,
+                  children: [
+                    Padding(
+                      padding:
+                          EdgeInsetsDirectional.fromSTEB(0.0, 0.0, 12.0, 0.0),
+                      child: Container(
+                        width: 40.0,
+                        height: 40.0,
+                        decoration: BoxDecoration(
+                          color: FlutterFlowTheme.of(context).primaryBackground,
+                          shape: BoxShape.circle,
+                        ),
+                        child: Stack(
+                          children: [
+                            if (widget.expandedAccordionIndex !=
+                                widget.accordionIndex)
+                              Align(
+                                alignment: AlignmentDirectional(0.0, 0.0),
+                                child: Icon(
+                                  Icons.add_sharp,
+                                  color:
+                                      FlutterFlowTheme.of(context).primaryText,
+                                  size: 18.0,
+                                ),
+                              ),
+                            if (widget.expandedAccordionIndex ==
+                                widget.accordionIndex)
+                              Align(
+                                alignment: AlignmentDirectional(0.0, 0.0),
+                                child: Icon(
+                                  Icons.remove_sharp,
+                                  color:
+                                      FlutterFlowTheme.of(context).primaryText,
+                                  size: 18.0,
+                                ),
+                              ),
+                          ],
+                        ),
+                      ),
+                    ),
+                    Expanded(
+                      child: Text(
+                        widget.question!,
+                        style: FlutterFlowTheme.of(context).bodyMedium.override(
+                              fontFamily: 'Plus Jakarta Sans',
+                              fontSize: 16.0,
+                              fontWeight: FontWeight.w600,
+                              lineHeight: 1.2,
+                            ),
+                      ),
+                    ),
+                  ],
+                ),
+              ),
+              if (widget.expandedAccordionIndex == widget.accordionIndex)
+                Padding(
+                  padding: EdgeInsetsDirectional.fromSTEB(0.0, 12.0, 0.0, 6.0),
+                  child: Text(
+                    widget.answer!,
+                    style: FlutterFlowTheme.of(context).labelLarge.override(
+                          fontFamily: 'Outfit',
+                          lineHeight: 1.4,
+                        ),
+                  ),
+                ),
+            ],
+          ),
+        ),
+      ),
+    );
+  }
+}
Index: lib/components/custom_appbar_model.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/components/custom_appbar_model.dart b/lib/components/custom_appbar_model.dart
new file mode 100644
--- /dev/null	(date 1708365757812)
+++ b/lib/components/custom_appbar_model.dart	(date 1708365757812)
@@ -0,0 +1,24 @@
+import '/flutter_flow/flutter_flow_icon_button.dart';
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/flutter_flow_widgets.dart';
+import 'custom_appbar_widget.dart' show CustomAppbarWidget;
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:font_awesome_flutter/font_awesome_flutter.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+
+class CustomAppbarModel extends FlutterFlowModel<CustomAppbarWidget> {
+  /// Initialization and disposal methods.
+
+  @override
+  void initState(BuildContext context) {}
+
+  @override
+  void dispose() {}
+
+  /// Action blocks are added here.
+
+  /// Additional helper methods are added here.
+}
Index: lib/components/diet_item/diet_item_widget.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/components/diet_item/diet_item_widget.dart b/lib/components/diet_item/diet_item_widget.dart
new file mode 100644
--- /dev/null	(date 1708365757937)
+++ b/lib/components/diet_item/diet_item_widget.dart	(date 1708365757937)
@@ -0,0 +1,108 @@
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+import 'diet_item_model.dart';
+export 'diet_item_model.dart';
+
+class DietItemWidget extends StatefulWidget {
+  const DietItemWidget({
+    super.key,
+    required this.dietType,
+    required this.selectedDiet,
+    required this.dietTagline,
+    required this.action,
+  });
+
+  final String? dietType;
+  final String? selectedDiet;
+  final String? dietTagline;
+  final Future Function()? action;
+
+  @override
+  State<DietItemWidget> createState() => _DietItemWidgetState();
+}
+
+class _DietItemWidgetState extends State<DietItemWidget> {
+  late DietItemModel _model;
+
+  @override
+  void setState(VoidCallback callback) {
+    super.setState(callback);
+    _model.onUpdate();
+  }
+
+  @override
+  void initState() {
+    super.initState();
+    _model = createModel(context, () => DietItemModel());
+
+    WidgetsBinding.instance.addPostFrameCallback((_) => setState(() {}));
+  }
+
+  @override
+  void dispose() {
+    _model.maybeDispose();
+
+    super.dispose();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    context.watch<FFAppState>();
+
+    return InkWell(
+      splashColor: Colors.transparent,
+      focusColor: Colors.transparent,
+      hoverColor: Colors.transparent,
+      highlightColor: Colors.transparent,
+      onTap: () async {
+        logFirebaseEvent('DIET_ITEM_COMP_Container_f58tyizj_ON_TAP');
+        logFirebaseEvent('Container_execute_callback');
+        await widget.action?.call();
+      },
+      child: Container(
+        width: double.infinity,
+        height: 44.0,
+        decoration: BoxDecoration(
+          color: widget.selectedDiet == widget.dietType
+              ? FlutterFlowTheme.of(context).primary
+              : FlutterFlowTheme.of(context).secondaryBackground,
+          borderRadius: BorderRadius.circular(8.0),
+        ),
+        child: Padding(
+          padding: EdgeInsetsDirectional.fromSTEB(24.0, 12.0, 24.0, 12.0),
+          child: Row(
+            mainAxisSize: MainAxisSize.max,
+            mainAxisAlignment: MainAxisAlignment.spaceBetween,
+            children: [
+              Text(
+                widget.dietType!,
+                style: FlutterFlowTheme.of(context).bodyMedium.override(
+                      fontFamily: 'Plus Jakarta Sans',
+                      color: widget.selectedDiet == widget.dietType
+                          ? FlutterFlowTheme.of(context).primaryBackground
+                          : FlutterFlowTheme.of(context).primaryText,
+                      fontSize: 16.0,
+                      fontWeight: FontWeight.w600,
+                    ),
+              ),
+              if (widget.selectedDiet == widget.dietType)
+                Text(
+                  widget.dietTagline!,
+                  style: FlutterFlowTheme.of(context).bodyMedium.override(
+                        fontFamily: 'Plus Jakarta Sans',
+                        color: FlutterFlowTheme.of(context).primaryBackground,
+                        fontSize: 12.0,
+                        fontWeight: FontWeight.w600,
+                      ),
+                ),
+            ],
+          ),
+        ),
+      ),
+    );
+  }
+}
Index: lib/components/empty_state/empty_state_widget.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/components/empty_state/empty_state_widget.dart b/lib/components/empty_state/empty_state_widget.dart
new file mode 100644
--- /dev/null	(date 1708365758141)
+++ b/lib/components/empty_state/empty_state_widget.dart	(date 1708365758141)
@@ -0,0 +1,93 @@
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+import 'empty_state_model.dart';
+export 'empty_state_model.dart';
+
+class EmptyStateWidget extends StatefulWidget {
+  const EmptyStateWidget({
+    super.key,
+    required this.icon,
+    required this.title,
+    required this.description,
+  });
+
+  final Widget? icon;
+  final String? title;
+  final String? description;
+
+  @override
+  State<EmptyStateWidget> createState() => _EmptyStateWidgetState();
+}
+
+class _EmptyStateWidgetState extends State<EmptyStateWidget> {
+  late EmptyStateModel _model;
+
+  @override
+  void setState(VoidCallback callback) {
+    super.setState(callback);
+    _model.onUpdate();
+  }
+
+  @override
+  void initState() {
+    super.initState();
+    _model = createModel(context, () => EmptyStateModel());
+
+    WidgetsBinding.instance.addPostFrameCallback((_) => setState(() {}));
+  }
+
+  @override
+  void dispose() {
+    _model.maybeDispose();
+
+    super.dispose();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    context.watch<FFAppState>();
+
+    return Column(
+      mainAxisSize: MainAxisSize.max,
+      mainAxisAlignment: MainAxisAlignment.center,
+      children: [
+        Container(
+          width: 300.0,
+          decoration: BoxDecoration(),
+          child: Column(
+            mainAxisSize: MainAxisSize.max,
+            children: [
+              widget.icon!,
+              Padding(
+                padding: EdgeInsetsDirectional.fromSTEB(0.0, 32.0, 0.0, 0.0),
+                child: Text(
+                  valueOrDefault<String>(
+                    widget.title,
+                    'Title',
+                  ),
+                  textAlign: TextAlign.center,
+                  style: FlutterFlowTheme.of(context).displaySmall,
+                ),
+              ),
+              Padding(
+                padding: EdgeInsetsDirectional.fromSTEB(0.0, 6.0, 0.0, 0.0),
+                child: Text(
+                  valueOrDefault<String>(
+                    widget.description,
+                    'Description',
+                  ),
+                  textAlign: TextAlign.center,
+                  style: FlutterFlowTheme.of(context).labelLarge,
+                ),
+              ),
+            ],
+          ),
+        ),
+      ],
+    );
+  }
+}
Index: lib/components/diet_item/diet_item_model.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/components/diet_item/diet_item_model.dart b/lib/components/diet_item/diet_item_model.dart
new file mode 100644
--- /dev/null	(date 1708365757921)
+++ b/lib/components/diet_item/diet_item_model.dart	(date 1708365757921)
@@ -0,0 +1,21 @@
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import 'diet_item_widget.dart' show DietItemWidget;
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+
+class DietItemModel extends FlutterFlowModel<DietItemWidget> {
+  /// Initialization and disposal methods.
+
+  @override
+  void initState(BuildContext context) {}
+
+  @override
+  void dispose() {}
+
+  /// Action blocks are added here.
+
+  /// Additional helper methods are added here.
+}
Index: lib/components/loader_item/loader_item_widget.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/components/loader_item/loader_item_widget.dart b/lib/components/loader_item/loader_item_widget.dart
new file mode 100644
--- /dev/null	(date 1708365758078)
+++ b/lib/components/loader_item/loader_item_widget.dart	(date 1708365758078)
@@ -0,0 +1,108 @@
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+import 'loader_item_model.dart';
+export 'loader_item_model.dart';
+
+class LoaderItemWidget extends StatefulWidget {
+  const LoaderItemWidget({super.key});
+
+  @override
+  State<LoaderItemWidget> createState() => _LoaderItemWidgetState();
+}
+
+class _LoaderItemWidgetState extends State<LoaderItemWidget> {
+  late LoaderItemModel _model;
+
+  @override
+  void setState(VoidCallback callback) {
+    super.setState(callback);
+    _model.onUpdate();
+  }
+
+  @override
+  void initState() {
+    super.initState();
+    _model = createModel(context, () => LoaderItemModel());
+
+    WidgetsBinding.instance.addPostFrameCallback((_) => setState(() {}));
+  }
+
+  @override
+  void dispose() {
+    _model.maybeDispose();
+
+    super.dispose();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    context.watch<FFAppState>();
+
+    return Column(
+      mainAxisSize: MainAxisSize.max,
+      crossAxisAlignment: CrossAxisAlignment.start,
+      children: [
+        Container(
+          width: MediaQuery.sizeOf(context).width * 0.48,
+          height: 150.0,
+          decoration: BoxDecoration(
+            color: FlutterFlowTheme.of(context).secondaryBackground,
+            borderRadius: BorderRadius.circular(24.0),
+            border: Border.all(
+              color: FlutterFlowTheme.of(context).alternate,
+              width: 1.0,
+            ),
+          ),
+          child: Align(
+            alignment: AlignmentDirectional(1.0, -1.0),
+            child: Padding(
+              padding: EdgeInsetsDirectional.fromSTEB(0.0, 12.0, 12.0, 0.0),
+              child: Container(
+                width: 32.0,
+                height: 32.0,
+                child: Stack(
+                  children: [
+                    Align(
+                      alignment: AlignmentDirectional(1.0, -1.0),
+                      child: Icon(
+                        Icons.favorite_border_rounded,
+                        color: FlutterFlowTheme.of(context).secondaryText,
+                        size: 32.0,
+                      ),
+                    ),
+                  ],
+                ),
+              ),
+            ),
+          ),
+        ),
+        Padding(
+          padding: EdgeInsetsDirectional.fromSTEB(0.0, 12.0, 0.0, 0.0),
+          child: Container(
+            width: 140.0,
+            height: 21.0,
+            decoration: BoxDecoration(
+              color: FlutterFlowTheme.of(context).secondaryBackground,
+              borderRadius: BorderRadius.circular(24.0),
+            ),
+          ),
+        ),
+        Padding(
+          padding: EdgeInsetsDirectional.fromSTEB(0.0, 6.0, 0.0, 0.0),
+          child: Container(
+            width: 60.0,
+            height: 18.0,
+            decoration: BoxDecoration(
+              color: FlutterFlowTheme.of(context).secondaryBackground,
+              borderRadius: BorderRadius.circular(24.0),
+            ),
+          ),
+        ),
+      ],
+    );
+  }
+}
Index: lib/components/empty_state/empty_state_model.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/components/empty_state/empty_state_model.dart b/lib/components/empty_state/empty_state_model.dart
new file mode 100644
--- /dev/null	(date 1708365758110)
+++ b/lib/components/empty_state/empty_state_model.dart	(date 1708365758110)
@@ -0,0 +1,21 @@
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import 'empty_state_widget.dart' show EmptyStateWidget;
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+
+class EmptyStateModel extends FlutterFlowModel<EmptyStateWidget> {
+  /// Initialization and disposal methods.
+
+  @override
+  void initState(BuildContext context) {}
+
+  @override
+  void dispose() {}
+
+  /// Action blocks are added here.
+
+  /// Additional helper methods are added here.
+}
Index: lib/components/preference_item/preference_item_model.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/components/preference_item/preference_item_model.dart b/lib/components/preference_item/preference_item_model.dart
new file mode 100644
--- /dev/null	(date 1708365757968)
+++ b/lib/components/preference_item/preference_item_model.dart	(date 1708365757968)
@@ -0,0 +1,21 @@
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import 'preference_item_widget.dart' show PreferenceItemWidget;
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+
+class PreferenceItemModel extends FlutterFlowModel<PreferenceItemWidget> {
+  /// Initialization and disposal methods.
+
+  @override
+  void initState(BuildContext context) {}
+
+  @override
+  void dispose() {}
+
+  /// Action blocks are added here.
+
+  /// Additional helper methods are added here.
+}
Index: lib/components/loader_item/loader_item_model.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/components/loader_item/loader_item_model.dart b/lib/components/loader_item/loader_item_model.dart
new file mode 100644
--- /dev/null	(date 1708365758047)
+++ b/lib/components/loader_item/loader_item_model.dart	(date 1708365758047)
@@ -0,0 +1,21 @@
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import 'loader_item_widget.dart' show LoaderItemWidget;
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+
+class LoaderItemModel extends FlutterFlowModel<LoaderItemWidget> {
+  /// Initialization and disposal methods.
+
+  @override
+  void initState(BuildContext context) {}
+
+  @override
+  void dispose() {}
+
+  /// Action blocks are added here.
+
+  /// Additional helper methods are added here.
+}
Index: lib/components/accordion_section/accordion_section_model.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/components/accordion_section/accordion_section_model.dart b/lib/components/accordion_section/accordion_section_model.dart
new file mode 100644
--- /dev/null	(date 1708365758157)
+++ b/lib/components/accordion_section/accordion_section_model.dart	(date 1708365758157)
@@ -0,0 +1,28 @@
+import '/backend/backend.dart';
+import '/components/accordion_widget.dart';
+import '/components/empty_state/empty_state_widget.dart';
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import 'accordion_section_widget.dart' show AccordionSectionWidget;
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+
+class AccordionSectionModel extends FlutterFlowModel<AccordionSectionWidget> {
+  ///  Local state fields for this component.
+
+  int accordionSectionExpanded = -1;
+
+  /// Initialization and disposal methods.
+
+  @override
+  void initState(BuildContext context) {}
+
+  @override
+  void dispose() {}
+
+  /// Action blocks are added here.
+
+  /// Additional helper methods are added here.
+}
Index: lib/components/preference_item/preference_item_widget.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/components/preference_item/preference_item_widget.dart b/lib/components/preference_item/preference_item_widget.dart
new file mode 100644
--- /dev/null	(date 1708365757984)
+++ b/lib/components/preference_item/preference_item_widget.dart	(date 1708365757984)
@@ -0,0 +1,95 @@
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+import 'preference_item_model.dart';
+export 'preference_item_model.dart';
+
+class PreferenceItemWidget extends StatefulWidget {
+  const PreferenceItemWidget({
+    super.key,
+    required this.text,
+    required this.selectedItems,
+    required this.action,
+  });
+
+  final String? text;
+  final List<String>? selectedItems;
+  final Future Function()? action;
+
+  @override
+  State<PreferenceItemWidget> createState() => _PreferenceItemWidgetState();
+}
+
+class _PreferenceItemWidgetState extends State<PreferenceItemWidget> {
+  late PreferenceItemModel _model;
+
+  @override
+  void setState(VoidCallback callback) {
+    super.setState(callback);
+    _model.onUpdate();
+  }
+
+  @override
+  void initState() {
+    super.initState();
+    _model = createModel(context, () => PreferenceItemModel());
+
+    WidgetsBinding.instance.addPostFrameCallback((_) => setState(() {}));
+  }
+
+  @override
+  void dispose() {
+    _model.maybeDispose();
+
+    super.dispose();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    context.watch<FFAppState>();
+
+    return InkWell(
+      splashColor: Colors.transparent,
+      focusColor: Colors.transparent,
+      hoverColor: Colors.transparent,
+      highlightColor: Colors.transparent,
+      onTap: () async {
+        logFirebaseEvent('PREFERENCE_ITEM_Container_vxpj4i7j_ON_TA');
+        logFirebaseEvent('Container_execute_callback');
+        await widget.action?.call();
+      },
+      child: Container(
+        height: 44.0,
+        decoration: BoxDecoration(
+          color: widget.selectedItems!.contains(widget.text)
+              ? FlutterFlowTheme.of(context).primary
+              : FlutterFlowTheme.of(context).secondaryBackground,
+          borderRadius: BorderRadius.circular(8.0),
+        ),
+        child: Padding(
+          padding: EdgeInsetsDirectional.fromSTEB(24.0, 12.0, 24.0, 12.0),
+          child: Row(
+            mainAxisSize: MainAxisSize.min,
+            mainAxisAlignment: MainAxisAlignment.center,
+            children: [
+              Text(
+                widget.text!,
+                style: FlutterFlowTheme.of(context).bodyMedium.override(
+                      fontFamily: 'Plus Jakarta Sans',
+                      color: widget.selectedItems!.contains(widget.text)
+                          ? FlutterFlowTheme.of(context).primaryBackground
+                          : FlutterFlowTheme.of(context).primaryText,
+                      fontSize: 16.0,
+                      fontWeight: FontWeight.w600,
+                    ),
+              ),
+            ],
+          ),
+        ),
+      ),
+    );
+  }
+}
Index: lib/components/title_with_subtitle/title_with_subtitle_model.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/components/title_with_subtitle/title_with_subtitle_model.dart b/lib/components/title_with_subtitle/title_with_subtitle_model.dart
new file mode 100644
--- /dev/null	(date 1708365758015)
+++ b/lib/components/title_with_subtitle/title_with_subtitle_model.dart	(date 1708365758015)
@@ -0,0 +1,21 @@
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import 'title_with_subtitle_widget.dart' show TitleWithSubtitleWidget;
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+
+class TitleWithSubtitleModel extends FlutterFlowModel<TitleWithSubtitleWidget> {
+  /// Initialization and disposal methods.
+
+  @override
+  void initState(BuildContext context) {}
+
+  @override
+  void dispose() {}
+
+  /// Action blocks are added here.
+
+  /// Additional helper methods are added here.
+}
Index: lib/components/accordion_section/accordion_section_widget.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/components/accordion_section/accordion_section_widget.dart b/lib/components/accordion_section/accordion_section_widget.dart
new file mode 100644
--- /dev/null	(date 1708365758188)
+++ b/lib/components/accordion_section/accordion_section_widget.dart	(date 1708365758188)
@@ -0,0 +1,114 @@
+import '/backend/backend.dart';
+import '/components/accordion_widget.dart';
+import '/components/empty_state/empty_state_widget.dart';
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+import 'accordion_section_model.dart';
+export 'accordion_section_model.dart';
+
+class AccordionSectionWidget extends StatefulWidget {
+  const AccordionSectionWidget({super.key});
+
+  @override
+  State<AccordionSectionWidget> createState() => _AccordionSectionWidgetState();
+}
+
+class _AccordionSectionWidgetState extends State<AccordionSectionWidget> {
+  late AccordionSectionModel _model;
+
+  @override
+  void setState(VoidCallback callback) {
+    super.setState(callback);
+    _model.onUpdate();
+  }
+
+  @override
+  void initState() {
+    super.initState();
+    _model = createModel(context, () => AccordionSectionModel());
+
+    WidgetsBinding.instance.addPostFrameCallback((_) => setState(() {}));
+  }
+
+  @override
+  void dispose() {
+    _model.maybeDispose();
+
+    super.dispose();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    context.watch<FFAppState>();
+
+    return StreamBuilder<List<SupportCenterRecord>>(
+      stream: querySupportCenterRecord(),
+      builder: (context, snapshot) {
+        // Customize what your widget looks like when it's loading.
+        if (!snapshot.hasData) {
+          return Center(
+            child: SizedBox(
+              width: 50.0,
+              height: 50.0,
+              child: CircularProgressIndicator(
+                valueColor: AlwaysStoppedAnimation<Color>(
+                  FlutterFlowTheme.of(context).primary,
+                ),
+              ),
+            ),
+          );
+        }
+        List<SupportCenterRecord> columnSupportCenterRecordList =
+            snapshot.data!;
+        if (columnSupportCenterRecordList.isEmpty) {
+          return Container(
+            width: double.infinity,
+            child: EmptyStateWidget(
+              icon: Icon(
+                Icons.question_mark_rounded,
+                color: FlutterFlowTheme.of(context).secondaryText,
+                size: 64.0,
+              ),
+              title: 'No FAQs',
+              description: 'No frquency asked questions have been created.',
+            ),
+          );
+        }
+        return Column(
+          mainAxisSize: MainAxisSize.min,
+          children: List.generate(columnSupportCenterRecordList.length,
+              (columnIndex) {
+            final columnSupportCenterRecord =
+                columnSupportCenterRecordList[columnIndex];
+            return AccordionWidget(
+              key: Key(
+                  'Keygq1_${columnIndex}_of_${columnSupportCenterRecordList.length}'),
+              expandedAccordionIndex: _model.accordionSectionExpanded,
+              accordionIndex: columnIndex,
+              question: columnSupportCenterRecord.question,
+              answer: columnSupportCenterRecord.answer,
+              action: () async {
+                logFirebaseEvent('ACCORDION_SECTION_Container_gq10ioan_CAL');
+                if (columnIndex == _model.accordionSectionExpanded) {
+                  logFirebaseEvent('accordion_update_component_state');
+                  setState(() {
+                    _model.accordionSectionExpanded = -1;
+                  });
+                } else {
+                  logFirebaseEvent('accordion_update_component_state');
+                  setState(() {
+                    _model.accordionSectionExpanded = columnIndex;
+                  });
+                }
+              },
+            );
+          }),
+        );
+      },
+    );
+  }
+}
Index: lib/components/feedback_bottom_sheet/feedback_bottom_sheet_widget.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/components/feedback_bottom_sheet/feedback_bottom_sheet_widget.dart b/lib/components/feedback_bottom_sheet/feedback_bottom_sheet_widget.dart
new file mode 100644
--- /dev/null	(date 1708365758251)
+++ b/lib/components/feedback_bottom_sheet/feedback_bottom_sheet_widget.dart	(date 1708365758251)
@@ -0,0 +1,220 @@
+import '/auth/firebase_auth/auth_util.dart';
+import '/backend/backend.dart';
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/flutter_flow_widgets.dart';
+import 'package:cloud_firestore/cloud_firestore.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+import 'feedback_bottom_sheet_model.dart';
+export 'feedback_bottom_sheet_model.dart';
+
+class FeedbackBottomSheetWidget extends StatefulWidget {
+  const FeedbackBottomSheetWidget({
+    super.key,
+    this.mealName,
+  });
+
+  final String? mealName;
+
+  @override
+  State<FeedbackBottomSheetWidget> createState() =>
+      _FeedbackBottomSheetWidgetState();
+}
+
+class _FeedbackBottomSheetWidgetState extends State<FeedbackBottomSheetWidget> {
+  late FeedbackBottomSheetModel _model;
+
+  @override
+  void setState(VoidCallback callback) {
+    super.setState(callback);
+    _model.onUpdate();
+  }
+
+  @override
+  void initState() {
+    super.initState();
+    _model = createModel(context, () => FeedbackBottomSheetModel());
+
+    _model.feedbackController ??= TextEditingController();
+    _model.feedbackFocusNode ??= FocusNode();
+
+    WidgetsBinding.instance.addPostFrameCallback((_) => setState(() {}));
+  }
+
+  @override
+  void dispose() {
+    _model.maybeDispose();
+
+    super.dispose();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    context.watch<FFAppState>();
+
+    return Align(
+      alignment: AlignmentDirectional(0.0, 0.0),
+      child: Column(
+        mainAxisSize: MainAxisSize.max,
+        mainAxisAlignment: MainAxisAlignment.end,
+        children: [
+          Container(
+            width: double.infinity,
+            decoration: BoxDecoration(
+              color: FlutterFlowTheme.of(context).primaryBackground,
+              borderRadius: BorderRadius.only(
+                bottomLeft: Radius.circular(0.0),
+                bottomRight: Radius.circular(0.0),
+                topLeft: Radius.circular(24.0),
+                topRight: Radius.circular(24.0),
+              ),
+            ),
+            child: Padding(
+              padding: EdgeInsetsDirectional.fromSTEB(24.0, 12.0, 24.0, 0.0),
+              child: Column(
+                mainAxisSize: MainAxisSize.max,
+                children: [
+                  Container(
+                    width: 60.0,
+                    height: 2.0,
+                    decoration: BoxDecoration(
+                      color: FlutterFlowTheme.of(context).secondaryBackground,
+                    ),
+                  ),
+                  Padding(
+                    padding:
+                        EdgeInsetsDirectional.fromSTEB(0.0, 12.0, 0.0, 0.0),
+                    child: Column(
+                      mainAxisSize: MainAxisSize.max,
+                      crossAxisAlignment: CrossAxisAlignment.start,
+                      children: [
+                        Padding(
+                          padding: EdgeInsetsDirectional.fromSTEB(
+                              0.0, 12.0, 0.0, 0.0),
+                          child: Text(
+                            'Send Anonymous Feedback',
+                            style: FlutterFlowTheme.of(context).titleLarge,
+                          ),
+                        ),
+                        Form(
+                          key: _model.formKey,
+                          autovalidateMode: AutovalidateMode.disabled,
+                          child: Padding(
+                            padding: EdgeInsetsDirectional.fromSTEB(
+                                0.0, 12.0, 0.0, 24.0),
+                            child: TextFormField(
+                              controller: _model.feedbackController,
+                              focusNode: _model.feedbackFocusNode,
+                              autofocus: true,
+                              textCapitalization: TextCapitalization.sentences,
+                              obscureText: false,
+                              decoration: InputDecoration(
+                                hintText: 'Type something...',
+                                hintStyle:
+                                    FlutterFlowTheme.of(context).bodySmall,
+                                enabledBorder: OutlineInputBorder(
+                                  borderSide: BorderSide(
+                                    color: Color(0x00000000),
+                                    width: 1.0,
+                                  ),
+                                  borderRadius: BorderRadius.circular(8.0),
+                                ),
+                                focusedBorder: OutlineInputBorder(
+                                  borderSide: BorderSide(
+                                    color: Color(0x00000000),
+                                    width: 1.0,
+                                  ),
+                                  borderRadius: BorderRadius.circular(8.0),
+                                ),
+                                errorBorder: OutlineInputBorder(
+                                  borderSide: BorderSide(
+                                    color: Color(0x00000000),
+                                    width: 1.0,
+                                  ),
+                                  borderRadius: BorderRadius.circular(8.0),
+                                ),
+                                focusedErrorBorder: OutlineInputBorder(
+                                  borderSide: BorderSide(
+                                    color: Color(0x00000000),
+                                    width: 1.0,
+                                  ),
+                                  borderRadius: BorderRadius.circular(8.0),
+                                ),
+                                filled: true,
+                                fillColor: FlutterFlowTheme.of(context)
+                                    .secondaryBackground,
+                              ),
+                              style: FlutterFlowTheme.of(context)
+                                  .bodyMedium
+                                  .override(
+                                    fontFamily: 'Plus Jakarta Sans',
+                                    fontSize: 16.0,
+                                    fontWeight: FontWeight.w500,
+                                  ),
+                              maxLines: 7,
+                              keyboardType: TextInputType.multiline,
+                              validator: _model.feedbackControllerValidator
+                                  .asValidator(context),
+                            ),
+                          ),
+                        ),
+                        Padding(
+                          padding: EdgeInsetsDirectional.fromSTEB(
+                              0.0, 0.0, 0.0, 32.0),
+                          child: FFButtonWidget(
+                            onPressed: () async {
+                              logFirebaseEvent(
+                                  'FEEDBACK_BOTTOM_SHEET_SEND_FEEDBACK_BTN_');
+                              logFirebaseEvent('Button_validate_form');
+                              if (_model.formKey.currentState == null ||
+                                  !_model.formKey.currentState!.validate()) {
+                                return;
+                              }
+                              logFirebaseEvent('Button_backend_call');
+
+                              await FeedbackRecord.collection
+                                  .doc()
+                                  .set(createFeedbackRecordData(
+                                    mealName: widget.mealName,
+                                    feedback: _model.feedbackController.text,
+                                    timeCreated: getCurrentTimestamp,
+                                  ));
+                              logFirebaseEvent(
+                                  'Button_close_dialog,_drawer,_etc');
+                              Navigator.pop(context);
+                            },
+                            text: 'Send Feedback',
+                            options: FFButtonOptions(
+                              width: double.infinity,
+                              height: 50.0,
+                              padding: EdgeInsetsDirectional.fromSTEB(
+                                  0.0, 0.0, 0.0, 0.0),
+                              iconPadding: EdgeInsetsDirectional.fromSTEB(
+                                  0.0, 0.0, 0.0, 0.0),
+                              color: FlutterFlowTheme.of(context).primary,
+                              textStyle:
+                                  FlutterFlowTheme.of(context).titleSmall,
+                              elevation: 0.0,
+                              borderSide: BorderSide(
+                                color: Colors.transparent,
+                                width: 1.0,
+                              ),
+                              borderRadius: BorderRadius.circular(25.0),
+                            ),
+                          ),
+                        ),
+                      ],
+                    ),
+                  ),
+                ],
+              ),
+            ),
+          ),
+        ],
+      ),
+    );
+  }
+}
Index: lib/components/title_with_subtitle/title_with_subtitle_widget.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/components/title_with_subtitle/title_with_subtitle_widget.dart b/lib/components/title_with_subtitle/title_with_subtitle_widget.dart
new file mode 100644
--- /dev/null	(date 1708365758031)
+++ b/lib/components/title_with_subtitle/title_with_subtitle_widget.dart	(date 1708365758031)
@@ -0,0 +1,81 @@
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+import 'title_with_subtitle_model.dart';
+export 'title_with_subtitle_model.dart';
+
+class TitleWithSubtitleWidget extends StatefulWidget {
+  const TitleWithSubtitleWidget({
+    super.key,
+    required this.title,
+    required this.subtitle,
+  });
+
+  final String? title;
+  final String? subtitle;
+
+  @override
+  State<TitleWithSubtitleWidget> createState() =>
+      _TitleWithSubtitleWidgetState();
+}
+
+class _TitleWithSubtitleWidgetState extends State<TitleWithSubtitleWidget> {
+  late TitleWithSubtitleModel _model;
+
+  @override
+  void setState(VoidCallback callback) {
+    super.setState(callback);
+    _model.onUpdate();
+  }
+
+  @override
+  void initState() {
+    super.initState();
+    _model = createModel(context, () => TitleWithSubtitleModel());
+
+    WidgetsBinding.instance.addPostFrameCallback((_) => setState(() {}));
+  }
+
+  @override
+  void dispose() {
+    _model.maybeDispose();
+
+    super.dispose();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    context.watch<FFAppState>();
+
+    return Column(
+      mainAxisSize: MainAxisSize.max,
+      crossAxisAlignment: CrossAxisAlignment.start,
+      children: [
+        Padding(
+          padding: EdgeInsetsDirectional.fromSTEB(0.0, 32.0, 0.0, 4.0),
+          child: Text(
+            valueOrDefault<String>(
+              widget.title,
+              'Test title',
+            ),
+            style: FlutterFlowTheme.of(context).bodyMedium.override(
+                  fontFamily: 'Plus Jakarta Sans',
+                  fontSize: 16.0,
+                  fontWeight: FontWeight.w600,
+                ),
+          ),
+        ),
+        Text(
+          valueOrDefault<String>(
+            widget.subtitle,
+            'Test subtitle',
+          ),
+          style: FlutterFlowTheme.of(context).labelMedium,
+        ),
+      ].divide(SizedBox(height: 4.0)),
+    );
+  }
+}
Index: lib/flutter_flow/flutter_flow_data_table.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/flutter_flow/flutter_flow_data_table.dart b/lib/flutter_flow/flutter_flow_data_table.dart
new file mode 100644
--- /dev/null	(date 1708365759115)
+++ b/lib/flutter_flow/flutter_flow_data_table.dart	(date 1708365759115)
@@ -0,0 +1,330 @@
+import 'dart:math' as math;
+
+import 'package:data_table_2/data_table_2.dart';
+import 'package:flutter/material.dart';
+
+export 'package:data_table_2/data_table_2.dart' show DataColumn2;
+
+const _kDataTableHorizontalMargin = 48.0;
+const kDefaultColumnSpacing = 56.0;
+const _kMinRowsPerPage = 5;
+
+typedef ColumnsBuilder<T> = List<DataColumn> Function(void Function(int, bool));
+typedef DataRowBuilder<T> = DataRow? Function(
+    T, int, bool, void Function(bool?)?);
+
+class FlutterFlowDataTableController<T> extends DataTableSource {
+  FlutterFlowDataTableController({
+    List<T>? initialData,
+    int? numRows,
+    PaginatorController? paginatorController,
+    bool selectable = false,
+  }) {
+    data = initialData?.toList() ?? [];
+    numRows = numRows;
+    this.paginatorController = paginatorController ?? PaginatorController();
+    _selectable = selectable;
+  }
+
+  DataRowBuilder<T>? _dataRowBuilder;
+  late PaginatorController paginatorController;
+  List<T> data = [];
+  int? _numRows;
+  List<T> get selectedData =>
+      selectedRows.where((i) => i < data.length).map(data.elementAt).toList();
+
+  bool _selectable = false;
+  final Set<int> selectedRows = {};
+
+  int rowsPerPage = defaultRowsPerPage;
+  int? sortColumnIndex;
+  bool sortAscending = true;
+
+  void init({
+    DataRowBuilder<T>? dataRowBuilder,
+    bool? selectable,
+    List<T>? initialData,
+    int? initialNumRows,
+  }) {
+    _dataRowBuilder = dataRowBuilder ?? _dataRowBuilder;
+    _selectable = selectable ?? _selectable;
+    data = initialData?.toList() ?? data;
+    _numRows = initialNumRows;
+  }
+
+  void updateData({
+    List<T>? data,
+    int? numRows,
+    bool notify = true,
+  }) {
+    this.data = data?.toList() ?? this.data;
+    _numRows = numRows ?? _numRows;
+    if (notify) {
+      notifyListeners();
+    }
+  }
+
+  void updateSort({
+    required int columnIndex,
+    required bool ascending,
+    Function(int, bool)? onSortChanged,
+  }) {
+    sortColumnIndex = columnIndex;
+    sortAscending = ascending;
+    if (onSortChanged != null) {
+      onSortChanged(columnIndex, ascending);
+    }
+    notifyListeners();
+  }
+
+  @override
+  DataRow? getRow(int index) {
+    final row = data.elementAtOrNull(index);
+    return _dataRowBuilder != null && row != null
+        ? _dataRowBuilder!(
+            row,
+            index,
+            selectedRows.contains(index),
+            _selectable
+                ? (selected) {
+                    if (selected == null) {
+                      return;
+                    }
+                    selected
+                        ? selectedRows.add(index)
+                        : selectedRows.remove(index);
+                    notifyListeners();
+                  }
+                : null,
+          )
+        : null;
+  }
+
+  @override
+  bool get isRowCountApproximate => false;
+
+  @override
+  int get rowCount => _numRows ?? data.length;
+
+  @override
+  int get selectedRowCount => selectedRows.length;
+}
+
+class FlutterFlowDataTable<T> extends StatefulWidget {
+  const FlutterFlowDataTable({
+    super.key,
+    required this.controller,
+    required this.data,
+    this.numRows,
+    required this.columnsBuilder,
+    required this.dataRowBuilder,
+    this.emptyBuilder,
+    this.onPageChanged,
+    this.onSortChanged,
+    this.onRowsPerPageChanged,
+    this.paginated = true,
+    this.selectable = false,
+    this.hidePaginator = false,
+    this.showFirstLastButtons = false,
+    this.width,
+    this.height,
+    this.minWidth,
+    this.headingRowHeight = 56,
+    this.dataRowHeight = kMinInteractiveDimension,
+    this.columnSpacing = kDefaultColumnSpacing,
+    this.headingRowColor,
+    this.sortIconColor,
+    this.borderRadius,
+    this.addHorizontalDivider = true,
+    this.addVerticalDivider = false,
+    this.horizontalDividerColor,
+    this.horizontalDividerThickness,
+    this.verticalDividerColor,
+    this.verticalDividerThickness,
+    this.checkboxUnselectedFillColor,
+    this.checkboxSelectedFillColor,
+    this.checkboxUnselectedBorderColor,
+    this.checkboxSelectedBorderColor,
+    this.checkboxCheckColor,
+  });
+
+  final FlutterFlowDataTableController<T> controller;
+  final List<T> data;
+  final int? numRows;
+  final ColumnsBuilder columnsBuilder;
+  final DataRowBuilder<T> dataRowBuilder;
+  final Widget? Function()? emptyBuilder;
+  // Callback functions
+  final Function(int)? onPageChanged;
+  final Function(int, bool)? onSortChanged;
+  final Function(int)? onRowsPerPageChanged;
+  // Functionality options
+  final bool paginated;
+  final bool selectable;
+  final bool showFirstLastButtons;
+  final bool hidePaginator;
+  // Size and shape options
+  final double? width;
+  final double? height;
+  final double? minWidth;
+  final double headingRowHeight;
+  final double dataRowHeight;
+  final double columnSpacing;
+  // Table style options
+  final Color? headingRowColor;
+  final Color? sortIconColor;
+  final BorderRadius? borderRadius;
+  final bool addHorizontalDivider;
+  final Color? horizontalDividerColor;
+  final double? horizontalDividerThickness;
+  final bool addVerticalDivider;
+  final Color? verticalDividerColor;
+  final double? verticalDividerThickness;
+  // Checkbox style options
+  final Color? checkboxUnselectedFillColor;
+  final Color? checkboxSelectedFillColor;
+  final Color? checkboxUnselectedBorderColor;
+  final Color? checkboxSelectedBorderColor;
+  final Color? checkboxCheckColor;
+
+  @override
+  State<FlutterFlowDataTable<T>> createState() =>
+      _FlutterFlowDataTableState<T>();
+}
+
+class _FlutterFlowDataTableState<T> extends State<FlutterFlowDataTable<T>> {
+  FlutterFlowDataTableController<T> get controller => widget.controller;
+  int get rowCount => controller.rowCount;
+
+  int get initialRowsPerPage =>
+      rowCount > _kMinRowsPerPage ? defaultRowsPerPage : _kMinRowsPerPage;
+
+  @override
+  void initState() {
+    super.initState();
+    dataTableShowLogs = false; // Disables noisy DataTable2 debug statements.
+    controller.init(
+      dataRowBuilder: widget.dataRowBuilder,
+      selectable: widget.selectable,
+      initialData: widget.data,
+      initialNumRows: widget.numRows,
+    );
+    // ignore: cascade_invocations
+    controller.addListener(() => setState(() {}));
+  }
+
+  @override
+  void didUpdateWidget(FlutterFlowDataTable<T> oldWidget) {
+    super.didUpdateWidget(oldWidget);
+    controller.updateData(
+      data: widget.data,
+      numRows: widget.numRows,
+      notify: true,
+    );
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    final columns = widget.columnsBuilder(
+      (index, ascending) {
+        controller.updateSort(
+          columnIndex: index,
+          ascending: ascending,
+          onSortChanged: widget.onSortChanged,
+        );
+        setState(() {});
+      },
+    );
+
+    return ClipRRect(
+      borderRadius: widget.borderRadius ?? BorderRadius.zero,
+      child: SizedBox(
+        width: widget.width,
+        height: widget.height,
+        child: Theme(
+          data: Theme.of(context).copyWith(
+            iconTheme: widget.sortIconColor != null
+                ? IconThemeData(color: widget.sortIconColor)
+                : null,
+            checkboxTheme: CheckboxThemeData(
+              checkColor: MaterialStateProperty.all(
+                widget.checkboxCheckColor ?? Colors.black54,
+              ),
+              fillColor: MaterialStateProperty.resolveWith(
+                (states) => states.contains(MaterialState.selected)
+                    ? widget.checkboxSelectedFillColor ??
+                        Colors.white.withOpacity(0.01)
+                    : widget.checkboxUnselectedFillColor ??
+                        Colors.white.withOpacity(0.01),
+              ),
+              side: MaterialStateBorderSide.resolveWith(
+                (states) => BorderSide(
+                  width: 2.0,
+                  color: states.contains(MaterialState.selected)
+                      ? widget.checkboxSelectedBorderColor ?? Colors.black54
+                      : widget.checkboxUnselectedBorderColor ?? Colors.black54,
+                ),
+              ),
+              overlayColor: MaterialStateProperty.all(Colors.transparent),
+            ),
+          ),
+          child: PaginatedDataTable2(
+            source: controller,
+            controller:
+                widget.paginated ? controller.paginatorController : null,
+            rowsPerPage: widget.paginated ? initialRowsPerPage : rowCount,
+            availableRowsPerPage: const [5, 10, 25, 50, 100],
+            onPageChanged: widget.onPageChanged != null
+                ? (index) => widget.onPageChanged!(index)
+                : null,
+            columnSpacing: widget.columnSpacing,
+            onRowsPerPageChanged: widget.paginated
+                ? (value) {
+                    controller.rowsPerPage = value ?? initialRowsPerPage;
+                    if (widget.onRowsPerPageChanged != null) {
+                      widget.onRowsPerPageChanged!(controller.rowsPerPage);
+                    }
+                  }
+                : null,
+            columns: columns,
+            empty: widget.emptyBuilder != null ? widget.emptyBuilder!() : null,
+            sortColumnIndex: controller.sortColumnIndex,
+            sortAscending: controller.sortAscending,
+            showCheckboxColumn: widget.selectable,
+            hidePaginator: !widget.paginated || widget.hidePaginator,
+            wrapInCard: false,
+            renderEmptyRowsInTheEnd: false,
+            border: TableBorder(
+              horizontalInside: widget.addHorizontalDivider
+                  ? BorderSide(
+                      color:
+                          widget.horizontalDividerColor ?? Colors.transparent,
+                      width: widget.horizontalDividerThickness ?? 1.0,
+                    )
+                  : BorderSide.none,
+              verticalInside: widget.addVerticalDivider
+                  ? BorderSide(
+                      color: widget.verticalDividerColor ?? Colors.transparent,
+                      width: widget.verticalDividerThickness ?? 1.0,
+                    )
+                  : BorderSide.none,
+            ),
+            headingRowColor: MaterialStateProperty.all(widget.headingRowColor),
+            headingRowHeight: widget.headingRowHeight,
+            dataRowHeight: widget.dataRowHeight,
+            showFirstLastButtons: widget.showFirstLastButtons,
+            minWidth: math.max(widget.minWidth ?? 0, _getColumnsWidth(columns)),
+          ),
+        ),
+      ),
+    );
+  }
+
+  // Return the total fixed width of all columns that have a specified width,
+  // plus one to make the data table scrollable if there is insufficient space.
+  double _getColumnsWidth(List<DataColumn> columns) =>
+      columns.where((c) => c is DataColumn2 && c.fixedWidth != null).fold(
+            ((widget.selectable ? 2 : 1) * _kDataTableHorizontalMargin) + 1,
+            (sum, col) => sum + (col as DataColumn2).fixedWidth!,
+          );
+}
Index: lib/components/feedback_bottom_sheet/feedback_bottom_sheet_model.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/components/feedback_bottom_sheet/feedback_bottom_sheet_model.dart b/lib/components/feedback_bottom_sheet/feedback_bottom_sheet_model.dart
new file mode 100644
--- /dev/null	(date 1708365758220)
+++ b/lib/components/feedback_bottom_sheet/feedback_bottom_sheet_model.dart	(date 1708365758220)
@@ -0,0 +1,50 @@
+import '/auth/firebase_auth/auth_util.dart';
+import '/backend/backend.dart';
+import '/flutter_flow/flutter_flow_theme.dart';
+import '/flutter_flow/flutter_flow_util.dart';
+import '/flutter_flow/flutter_flow_widgets.dart';
+import 'feedback_bottom_sheet_widget.dart' show FeedbackBottomSheetWidget;
+import 'package:cloud_firestore/cloud_firestore.dart';
+import 'package:flutter/material.dart';
+import 'package:flutter/services.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:provider/provider.dart';
+
+class FeedbackBottomSheetModel
+    extends FlutterFlowModel<FeedbackBottomSheetWidget> {
+  ///  State fields for stateful widgets in this component.
+
+  final formKey = GlobalKey<FormState>();
+  // State field(s) for feedback widget.
+  FocusNode? feedbackFocusNode;
+  TextEditingController? feedbackController;
+  String? Function(BuildContext, String?)? feedbackControllerValidator;
+  String? _feedbackControllerValidator(BuildContext context, String? val) {
+    if (val == null || val.isEmpty) {
+      return 'Feedback is required.';
+    }
+
+    if (val.length < 12) {
+      return 'Requires at least 12 characters.';
+    }
+
+    return null;
+  }
+
+  /// Initialization and disposal methods.
+
+  @override
+  void initState(BuildContext context) {
+    feedbackControllerValidator = _feedbackControllerValidator;
+  }
+
+  @override
+  void dispose() {
+    feedbackFocusNode?.dispose();
+    feedbackController?.dispose();
+  }
+
+  /// Action blocks are added here.
+
+  /// Additional helper methods are added here.
+}
Index: lib/flutter_flow/custom_functions.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/flutter_flow/custom_functions.dart b/lib/flutter_flow/custom_functions.dart
new file mode 100644
--- /dev/null	(date 1708365759036)
+++ b/lib/flutter_flow/custom_functions.dart	(date 1708365759036)
@@ -0,0 +1,58 @@
+import 'dart:convert';
+import 'dart:math' as math;
+
+import 'package:flutter/material.dart';
+import 'package:google_fonts/google_fonts.dart';
+import 'package:intl/intl.dart';
+import 'package:timeago/timeago.dart' as timeago;
+import 'lat_lng.dart';
+import 'place.dart';
+import 'uploaded_file.dart';
+import '/backend/backend.dart';
+import 'package:cloud_firestore/cloud_firestore.dart';
+import '/backend/schema/structs/index.dart';
+import '/auth/firebase_auth/auth_util.dart';
+
+String returnProfileGreeting(DateTime timestamp) {
+  // return "morning" if it is morning, "afternoon" if afternoon and "night" if it is night
+  var hour = timestamp.hour;
+  if (hour >= 0 && hour < 12) {
+    return "Good morning,";
+  } else if (hour >= 12 && hour < 17) {
+    return "Good afternoon,";
+  } else {
+    return "Goodnight,";
+  }
+}
+
+String? newCustomFunction() {
+  // Add 5 category icon with image
+  List<Map<String, dynamic>> categories = [
+    {
+      'name': 'Vertinary Care',
+      'icon': Icons.fastfood,
+      'image': 'assets/images/food.jpg',
+    },
+    {
+      'name': 'Travel',
+      'icon': Icons.flight,
+      'image': 'assets/images/travel.jpg',
+    },
+    {
+      'name': 'Shopping',
+      'icon': Icons.shopping_cart,
+      'image': 'assets/images/shopping.jpg',
+    },
+    {
+      'name': 'Entertainment',
+      'icon': Icons.movie,
+      'image': 'assets/images/entertainment.jpg',
+    },
+    {
+      'name': 'Sports',
+      'icon': Icons.sports_basketball,
+      'image': 'assets/images/sports.jpg',
+    },
+  ];
+  return jsonEncode(categories);
+}
Index: lib/flutter_flow/flutter_flow_icon_button.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/flutter_flow/flutter_flow_icon_button.dart b/lib/flutter_flow/flutter_flow_icon_button.dart
new file mode 100644
--- /dev/null	(date 1708365759130)
+++ b/lib/flutter_flow/flutter_flow_icon_button.dart	(date 1708365759130)
@@ -0,0 +1,167 @@
+import 'package:flutter/material.dart';
+import 'package:font_awesome_flutter/font_awesome_flutter.dart';
+
+class FlutterFlowIconButton extends StatefulWidget {
+  const FlutterFlowIconButton({
+    Key? key,
+    required this.icon,
+    this.borderColor,
+    this.borderRadius,
+    this.borderWidth,
+    this.buttonSize,
+    this.fillColor,
+    this.disabledColor,
+    this.disabledIconColor,
+    this.hoverColor,
+    this.hoverIconColor,
+    this.onPressed,
+    this.showLoadingIndicator = false,
+  }) : super(key: key);
+
+  final Widget icon;
+  final double? borderRadius;
+  final double? buttonSize;
+  final Color? fillColor;
+  final Color? disabledColor;
+  final Color? disabledIconColor;
+  final Color? hoverColor;
+  final Color? hoverIconColor;
+  final Color? borderColor;
+  final double? borderWidth;
+  final bool showLoadingIndicator;
+  final Function()? onPressed;
+
+  @override
+  State<FlutterFlowIconButton> createState() => _FlutterFlowIconButtonState();
+}
+
+class _FlutterFlowIconButtonState extends State<FlutterFlowIconButton> {
+  bool loading = false;
+  late double? iconSize;
+  late Color? iconColor;
+  late Widget effectiveIcon;
+
+  @override
+  void initState() {
+    super.initState();
+    _updateIcon();
+  }
+
+  @override
+  void didUpdateWidget(FlutterFlowIconButton oldWidget) {
+    super.didUpdateWidget(oldWidget);
+    _updateIcon();
+  }
+
+  void _updateIcon() {
+    final isFontAwesome = widget.icon is FaIcon;
+    if (isFontAwesome) {
+      FaIcon icon = widget.icon as FaIcon;
+      effectiveIcon = FaIcon(
+        icon.icon,
+        size: icon.size,
+      );
+      iconSize = icon.size;
+      iconColor = icon.color;
+    } else {
+      Icon icon = widget.icon as Icon;
+      effectiveIcon = Icon(
+        icon.icon,
+        size: icon.size,
+      );
+      iconSize = icon.size;
+      iconColor = icon.color;
+    }
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    ButtonStyle style = ButtonStyle(
+      shape: MaterialStateProperty.resolveWith<OutlinedBorder>(
+        (states) {
+          return RoundedRectangleBorder(
+            borderRadius: BorderRadius.circular(widget.borderRadius ?? 0),
+            side: BorderSide(
+              color: widget.borderColor ?? Colors.transparent,
+              width: widget.borderWidth ?? 0,
+            ),
+          );
+        },
+      ),
+      iconColor: MaterialStateProperty.resolveWith<Color?>(
+        (states) {
+          if (states.contains(MaterialState.disabled) &&
+              widget.disabledIconColor != null) {
+            return widget.disabledIconColor;
+          }
+          if (states.contains(MaterialState.hovered) &&
+              widget.hoverIconColor != null) {
+            return widget.hoverIconColor;
+          }
+          return iconColor;
+        },
+      ),
+      backgroundColor: MaterialStateProperty.resolveWith<Color?>(
+        (states) {
+          if (states.contains(MaterialState.disabled) &&
+              widget.disabledColor != null) {
+            return widget.disabledColor;
+          }
+          if (states.contains(MaterialState.hovered) &&
+              widget.hoverColor != null) {
+            return widget.hoverColor;
+          }
+
+          return widget.fillColor;
+        },
+      ),
+      overlayColor: MaterialStateProperty.resolveWith<Color?>((states) {
+        if (states.contains(MaterialState.pressed)) {
+          return null;
+        }
+        return widget.hoverColor == null ? null : Colors.transparent;
+      }),
+    );
+
+    return SizedBox(
+      width: widget.buttonSize,
+      height: widget.buttonSize,
+      child: Theme(
+        data: Theme.of(context).copyWith(useMaterial3: true),
+        child: IgnorePointer(
+          ignoring: (widget.showLoadingIndicator && loading),
+          child: IconButton(
+            icon: (widget.showLoadingIndicator && loading)
+                ? Container(
+                    width: iconSize,
+                    height: iconSize,
+                    child: CircularProgressIndicator(
+                      valueColor: AlwaysStoppedAnimation<Color>(
+                        iconColor ?? Colors.white,
+                      ),
+                    ),
+                  )
+                : effectiveIcon,
+            onPressed: widget.onPressed == null
+                ? null
+                : () async {
+                    if (loading) {
+                      return;
+                    }
+                    setState(() => loading = true);
+                    try {
+                      await widget.onPressed!();
+                    } finally {
+                      if (mounted) {
+                        setState(() => loading = false);
+                      }
+                    }
+                  },
+            splashRadius: widget.buttonSize,
+            style: style,
+          ),
+        ),
+      ),
+    );
+  }
+}
Index: lib/flutter_flow/form_field_controller.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/flutter_flow/form_field_controller.dart b/lib/flutter_flow/form_field_controller.dart
new file mode 100644
--- /dev/null	(date 1708365759068)
+++ b/lib/flutter_flow/form_field_controller.dart	(date 1708365759068)
@@ -0,0 +1,10 @@
+import 'package:flutter/foundation.dart';
+
+class FormFieldController<T> extends ValueNotifier<T?> {
+  FormFieldController(this.initialValue) : super(initialValue);
+
+  final T? initialValue;
+
+  void reset() => value = initialValue;
+  void update() => notifyListeners();
+}
Index: lib/flutter_flow/flutter_flow_drop_down.dart
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/lib/flutter_flow/flutter_flow_drop_down.dart b/lib/flutter_flow/flutter_flow_drop_down.dart
new file mode 100644
--- /dev/null	(date 1708365759177)
+++ b/lib/flutter_flow/flutter_flow_drop_down.dart	(date 1708365759177)
@@ -0,0 +1,360 @@
+import 'package:dropdown_button2/dropdown_button2.dart';
+
+import 'form_field_controller.dart';
+import 'package:flutter/material.dart';
+
+class FlutterFlowDropDown<T> extends StatefulWidget {
+  const FlutterFlowDropDown({
+    super.key,
+    this.controller,
+    this.multiSelectController,
+    this.hintText,
+    this.searchHintText,
+    required this.options,
+    this.optionLabels,
+    this.onChanged,
+    this.onMultiSelectChanged,
+    this.icon,
+    this.width,
+    this.height,
+    this.maxHeight,
+    this.fillColor,
+    this.searchHintTextStyle,
+    this.searchTextStyle,
+    this.searchCursorColor,
+    required this.textStyle,
+    required this.elevation,
+    required this.borderWidth,
+    required this.borderRadius,
+    required this.borderColor,
+    required this.margin,
+    this.hidesUnderline = false,
+    this.disabled = false,
+    this.isOverButton = false,
+    this.menuOffset,
+    this.isSearchable = false,
+    this.isMultiSelect = false,
+  }) : assert(
+          isMultiSelect
+              ? (controller == null &&
+                  onChanged == null &&
+                  multiSelectController != null &&
+                  onMultiSelectChanged != null)
+              : (controller != null &&
+                  onChanged != null &&
+                  multiSelectController == null &&
+                  onMultiSelectChanged == null),
+        );
+
+  final FormFieldController<T?>? controller;
+  final FormFieldController<List<T>?>? multiSelectController;
+  final String? hintText;
+  final String? searchHintText;
+  final List<T> options;
+  final List<String>? optionLabels;
+  final Function(T?)? onChanged;
+  final Function(List<T>?)? onMultiSelectChanged;
+  final Widget? icon;
+  final double? width;
+  final double? height;
+  final double? maxHeight;
+  final Color? fillColor;
+  final TextStyle? searchHintTextStyle;
+  final TextStyle? searchTextStyle;
+  final Color? searchCursorColor;
+  final TextStyle textStyle;
+  final double elevation;
+  final double borderWidth;
+  final double borderRadius;
+  final Color borderColor;
+  final EdgeInsetsGeometry margin;
+  final bool hidesUnderline;
+  final bool disabled;
+  final bool isOverButton;
+  final Offset? menuOffset;
+  final bool isSearchable;
+  final bool isMultiSelect;
+
+  @override
+  State<FlutterFlowDropDown<T>> createState() => _FlutterFlowDropDownState<T>();
+}
+
+class _FlutterFlowDropDownState<T> extends State<FlutterFlowDropDown<T>> {
+  bool get isMultiSelect => widget.isMultiSelect;
+  FormFieldController<T?> get controller => widget.controller!;
+  FormFieldController<List<T>?> get multiSelectController =>
+      widget.multiSelectController!;
+
+  T? get currentValue {
+    final value = isMultiSelect
+        ? multiSelectController.value?.firstOrNull
+        : controller.value;
+    return widget.options.contains(value) ? value : null;
+  }
+
+  Set<T> get currentValues {
+    if (!isMultiSelect || multiSelectController.value == null) {
+      return {};
+    }
+    return widget.options
+        .toSet()
+        .intersection(multiSelectController.value!.toSet());
+  }
+
+  Map<T, String> get optionLabels => Map.fromEntries(
+        widget.options.asMap().entries.map(
+              (option) => MapEntry(
+                option.value,
+                widget.optionLabels == null ||
+                        widget.optionLabels!.length < option.key + 1
+                    ? option.value.toString()
+                    : widget.optionLabels![option.key],
+              ),
+            ),
+      );
+
+  EdgeInsetsGeometry get horizontalMargin => widget.margin.clamp(
+        EdgeInsetsDirectional.zero,
+        const EdgeInsetsDirectional.symmetric(horizontal: double.infinity),
+      );
+
+  late void Function() _listener;
+  final TextEditingController _textEditingController = TextEditingController();
+
+  @override
+  void initState() {
+    super.initState();
+    if (isMultiSelect) {
+      _listener =
+          () => widget.onMultiSelectChanged!(multiSelectController.value);
+      multiSelectController.addListener(_listener);
+    } else {
+      _listener = () => widget.onChanged!(controller.value);
+      controller.addListener(_listener);
+    }
+  }
+
+  @override
+  void dispose() {
+    if (isMultiSelect) {
+      multiSelectController.removeListener(_listener);
+    } else {
+      controller.removeListener(_listener);
+    }
+    super.dispose();
+  }
+
+  @override
+  Widget build(BuildContext context) {
+    final dropdownWidget = _buildDropdownWidget();
+    return SizedBox(
+      width: widget.width,
+      height: widget.height,
+      child: DecoratedBox(
+        decoration: BoxDecoration(
+          borderRadius: BorderRadius.circular(widget.borderRadius),
+          border: Border.all(
+            color: widget.borderColor,
+            width: widget.borderWidth,
+          ),
+          color: widget.fillColor,
+        ),
+        child: Padding(
+          padding: _useDropdown2() ? EdgeInsets.zero : widget.margin,
+          child: widget.hidesUnderline
+              ? DropdownButtonHideUnderline(child: dropdownWidget)
+              : dropdownWidget,
+        ),
+      ),
+    );
+  }
+
+  bool _useDropdown2() =>
+      widget.isMultiSelect ||
+      widget.isSearchable ||
+      !widget.isOverButton ||
+      widget.maxHeight != null;
+
+  Widget _buildDropdownWidget() =>
+      _useDropdown2() ? _buildDropdown() : _buildLegacyDropdown();
+
+  Widget _buildLegacyDropdown() {
+    return DropdownButton<T>(
+      value: currentValue,
+      hint: _createHintText(),
+      items: _createMenuItems(),
+      elevation: widget.elevation.toInt(),
+      onChanged: widget.disabled ? null : (value) => controller.value = value,
+      icon: widget.icon,
+      isExpanded: true,
+      dropdownColor: widget.fillColor,
+      focusColor: Colors.transparent,
+    );
+  }
+
+  Text? _createHintText() => widget.hintText != null
+      ? Text(widget.hintText!, style: widget.textStyle)
+      : null;
+
+  List<DropdownMenuItem<T>> _createMenuItems() => widget.options
+      .map(
+        (option) => DropdownMenuItem<T>(
+          value: option,
+          child: Padding(
+            padding: _useDropdown2() ? horizontalMargin : EdgeInsets.zero,
+            child: Text(optionLabels[option] ?? '', style: widget.textStyle),
+          ),
+        ),
+      )
+      .toList();
+
+  List<DropdownMenuItem<T>> _createMultiselectMenuItems() => widget.options
+      .map(
+        (item) => DropdownMenuItem<T>(
+          value: item,
+          // Disable default onTap to avoid closing menu when selecting an item
+          enabled: false,
+          child: StatefulBuilder(
+            builder: (context, menuSetState) {
+              final isSelected =
+                  multiSelectController.value?.contains(item) ?? false;
+              return InkWell(
+                onTap: () {
+                  multiSelectController.value ??= [];
+                  isSelected
+                      ? multiSelectController.value!.remove(item)
+                      : multiSelectController.value!.add(item);
+                  multiSelectController.update();
+                  // This rebuilds the StatefulWidget to update the button's text.
+                  setState(() {});
+                  // This rebuilds the dropdownMenu Widget to update the check mark.
+                  menuSetState(() {});
+                },
+                child: Container(
+                  height: double.infinity,
+                  padding: horizontalMargin,
+                  child: Row(
+                    children: [
+                      if (isSelected)
+                        const Icon(Icons.check_box_outlined)
+                      else
+                        const Icon(Icons.check_box_outline_blank),
+                      const SizedBox(width: 16),
+                      Expanded(
+                        child: Text(
+                          optionLabels[item]!,
+                          style: widget.textStyle,
+                        ),
+                      ),
+                    ],
+                  ),
+                ),
+              );
+            },
+          ),
+        ),
+      )
+      .toList();
+
+  Widget _buildDropdown() {
+    final overlayColor = MaterialStateProperty.resolveWith<Color?>((states) =>
+        states.contains(MaterialState.focused) ? Colors.transparent : null);
+    final iconStyleData = widget.icon != null
+        ? IconStyleData(icon: widget.icon!)
+        : const IconStyleData();
+    return DropdownButton2<T>(
+      value: currentValue,
+      hint: _createHintText(),
+      items: isMultiSelect ? _createMultiselectMenuItems() : _createMenuItems(),
+      iconStyleData: iconStyleData,
+      buttonStyleData: ButtonStyleData(
+        elevation: widget.elevation.toInt(),
+        overlayColor: overlayColor,
+        padding: widget.margin,
+      ),
+      menuItemStyleData: MenuItemStyleData(
+        overlayColor: overlayColor,
+        padding: EdgeInsets.zero,
+      ),
+      dropdownStyleData: DropdownStyleData(
+        elevation: widget.elevation.toInt(),
+        decoration: BoxDecoration(
+          borderRadius: BorderRadius.circular(4.0),
+          color: widget.fillColor,
+        ),
+        isOverButton: widget.isOverButton,
+        offset: widget.menuOffset ?? Offset.zero,
+        maxHeight: widget.maxHeight,
+        padding: EdgeInsets.zero,
+      ),
+      onChanged: widget.disabled
+          ? null
+          : (isMultiSelect ? (_) {} : (val) => widget.controller!.value = val),
+      isExpanded: true,
+      selectedItemBuilder: (context) => widget.options
+          .map(
+            (item) => Align(
+              alignment: AlignmentDirectional.centerStart,
+              child: Text(
+                isMultiSelect
+                    ? currentValues
+                        .where((v) => optionLabels.containsKey(v))
+                        .map((v) => optionLabels[v])
+                        .join(', ')
+                    : optionLabels[item]!,
+                style: widget.textStyle,
+                maxLines: 1,
+              ),
+            ),
+          )
+          .toList(),
+      dropdownSearchData: widget.isSearchable
+          ? DropdownSearchData<T>(
+              searchController: _textEditingController,
+              searchInnerWidgetHeight: 50,
+              searchInnerWidget: Container(
+                height: 50,
+                padding: const EdgeInsets.only(
+                  top: 8,
+                  bottom: 4,
+                  right: 8,
+                  left: 8,
+                ),
+                child: TextFormField(
+                  expands: true,
+                  maxLines: null,
+                  controller: _textEditingController,
+                  cursorColor: widget.searchCursorColor,
+                  style: widget.searchTextStyle,
+                  decoration: InputDecoration(
+                    isDense: true,
+                    contentPadding: const EdgeInsets.symmetric(
+                      horizontal: 10,
+                      vertical: 8,
+                    ),
+                    hintText: widget.searchHintText,
+                    hintStyle: widget.searchHintTextStyle,
+                    border: OutlineInputBorder(
+                      borderRadius: BorderRadius.circular(8),
+                    ),
+                  ),
+                ),
+              ),
+              searchMatchFn: (item, searchValue) {
+                return (optionLabels[item.value] ?? '')
+                    .toLowerCase()
+                    .contains(searchValue.toLowerCase());
+              },
+            )
+          : null,
+      // This is to clear the search value when you close the menu
+      onMenuStateChange: widget.isSearchable
+          ? (isOpen) {
+              if (!isOpen) {
+                _textEditingController.clear();
+              }
+            }
+          : null,
+    );
+  }
+}
